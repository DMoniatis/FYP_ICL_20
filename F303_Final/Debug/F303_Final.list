
F303_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d86c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800da10  0800da10  0001da10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df38  0800df38  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  0800df38  0800df38  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df38  0800df38  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df38  0800df38  0001df38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df3c  0800df3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800df40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002df8  20000290  0800e1d0  00020290  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003088  0800e1d0  00023088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba35  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f0e  00000000  00000000  0003bcf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  0003ec08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  0003fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b77e  00000000  00000000  00040c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005c69  00000000  00000000  0004c3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00052037  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004fb4  00000000  00000000  000520b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000290 	.word	0x20000290
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d9f4 	.word	0x0800d9f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000294 	.word	0x20000294
 80001dc:	0800d9f4 	.word	0x0800d9f4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x28>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x28>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f002 fa89 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 f808 	bl	8000c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f00a fafe 	bl	800b284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40022000 	.word	0x40022000

08000c94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x54>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x58>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 faa1 	bl	80031fa <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00e      	b.n	8000ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d80a      	bhi.n	8000cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f002 fa69 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_InitTick+0x5c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200000b8 	.word	0x200000b8
 8000cec:	20000004 	.word	0x20000004
 8000cf0:	20000000 	.word	0x20000000

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000004 	.word	0x20000004
 8000d18:	2000041c 	.word	0x2000041c

08000d1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	2000041c 	.word	0x2000041c

08000d34 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff ffee 	bl	8000d1c <HAL_GetTick>
 8000d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4c:	d005      	beq.n	8000d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_Delay+0x40>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4413      	add	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d5a:	bf00      	nop
 8000d5c:	f7ff ffde 	bl	8000d1c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d8f7      	bhi.n	8000d5c <HAL_Delay+0x28>
  {
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_SuspendTick+0x1c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_SuspendTick+0x1c>)
 8000d82:	f023 0302 	bic.w	r3, r3, #2
 8000d86:	6013      	str	r3, [r2, #0]
                                                   
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_ResumeTick+0x1c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_ResumeTick+0x1c>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	6013      	str	r3, [r2, #0]
  
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b09c      	sub	sp, #112	; 0x70
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e1e2      	b.n	80011c6 <HAL_ADC_Init+0x3e6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f003 0310 	and.w	r3, r3, #16
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d176      	bne.n	8000f00 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d152      	bne.n	8000ec0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f00a fa49 	bl	800b2cc <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d13b      	bne.n	8000ec0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f001 f845 	bl	8001ed8 <ADC_Disable>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d12f      	bne.n	8000ec0 <HAL_ADC_Init+0xe0>
 8000e60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d12b      	bne.n	8000ec0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e70:	f023 0302 	bic.w	r3, r3, #2
 8000e74:	f043 0202 	orr.w	r2, r3, #2
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e8a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e9c:	4b92      	ldr	r3, [pc, #584]	; (80010e8 <HAL_ADC_Init+0x308>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a92      	ldr	r2, [pc, #584]	; (80010ec <HAL_ADC_Init+0x30c>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	0c9a      	lsrs	r2, r3, #18
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000eb2:	e002      	b.n	8000eba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f9      	bne.n	8000eb4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d007      	beq.n	8000ede <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000edc:	d110      	bne.n	8000f00 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f023 0312 	bic.w	r3, r3, #18
 8000ee6:	f043 0210 	orr.w	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f04:	f003 0310 	and.w	r3, r3, #16
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f040 814f 	bne.w	80011ac <HAL_ADC_Init+0x3cc>
 8000f0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 814a 	bne.w	80011ac <HAL_ADC_Init+0x3cc>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f040 8142 	bne.w	80011ac <HAL_ADC_Init+0x3cc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f30:	f043 0202 	orr.w	r2, r3, #2
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f40:	d004      	beq.n	8000f4c <HAL_ADC_Init+0x16c>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a6a      	ldr	r2, [pc, #424]	; (80010f0 <HAL_ADC_Init+0x310>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d101      	bne.n	8000f50 <HAL_ADC_Init+0x170>
 8000f4c:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <HAL_ADC_Init+0x314>)
 8000f4e:	e000      	b.n	8000f52 <HAL_ADC_Init+0x172>
 8000f50:	4b69      	ldr	r3, [pc, #420]	; (80010f8 <HAL_ADC_Init+0x318>)
 8000f52:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f5c:	d102      	bne.n	8000f64 <HAL_ADC_Init+0x184>
 8000f5e:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <HAL_ADC_Init+0x310>)
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	e01a      	b.n	8000f9a <HAL_ADC_Init+0x1ba>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a61      	ldr	r2, [pc, #388]	; (80010f0 <HAL_ADC_Init+0x310>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d103      	bne.n	8000f76 <HAL_ADC_Init+0x196>
 8000f6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	e011      	b.n	8000f9a <HAL_ADC_Init+0x1ba>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a60      	ldr	r2, [pc, #384]	; (80010fc <HAL_ADC_Init+0x31c>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d102      	bne.n	8000f86 <HAL_ADC_Init+0x1a6>
 8000f80:	4b5f      	ldr	r3, [pc, #380]	; (8001100 <HAL_ADC_Init+0x320>)
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	e009      	b.n	8000f9a <HAL_ADC_Init+0x1ba>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a5d      	ldr	r2, [pc, #372]	; (8001100 <HAL_ADC_Init+0x320>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d102      	bne.n	8000f96 <HAL_ADC_Init+0x1b6>
 8000f90:	4b5a      	ldr	r3, [pc, #360]	; (80010fc <HAL_ADC_Init+0x31c>)
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	e001      	b.n	8000f9a <HAL_ADC_Init+0x1ba>
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d108      	bne.n	8000fba <HAL_ADC_Init+0x1da>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_Init+0x1da>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_ADC_Init+0x1dc>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d11c      	bne.n	8000ffa <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fc0:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d010      	beq.n	8000fe8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <HAL_ADC_Init+0x202>
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_Init+0x202>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_ADC_Init+0x204>
 8000fe2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d108      	bne.n	8000ffa <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ff8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	035b      	lsls	r3, r3, #13
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001004:	2a01      	cmp	r2, #1
 8001006:	d002      	beq.n	800100e <HAL_ADC_Init+0x22e>
 8001008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800100c:	e000      	b.n	8001010 <HAL_ADC_Init+0x230>
 800100e:	2200      	movs	r2, #0
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4313      	orrs	r3, r2
 800101e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001020:	4313      	orrs	r3, r2
 8001022:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	2b01      	cmp	r3, #1
 800102a:	d11b      	bne.n	8001064 <HAL_ADC_Init+0x284>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d109      	bne.n	8001048 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	3b01      	subs	r3, #1
 800103a:	045a      	lsls	r2, r3, #17
 800103c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800103e:	4313      	orrs	r3, r2
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	66bb      	str	r3, [r7, #104]	; 0x68
 8001046:	e00d      	b.n	8001064 <HAL_ADC_Init+0x284>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001050:	f043 0220 	orr.w	r2, r3, #32
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105c:	f043 0201 	orr.w	r2, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	2b01      	cmp	r3, #1
 800106a:	d055      	beq.n	8001118 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <HAL_ADC_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d004      	beq.n	8001080 <HAL_ADC_Init+0x2a0>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <HAL_ADC_Init+0x320>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d141      	bne.n	8001104 <HAL_ADC_Init+0x324>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001088:	d02a      	beq.n	80010e0 <HAL_ADC_Init+0x300>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001092:	d022      	beq.n	80010da <HAL_ADC_Init+0x2fa>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800109c:	d01a      	beq.n	80010d4 <HAL_ADC_Init+0x2f4>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a2:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80010a6:	d012      	beq.n	80010ce <HAL_ADC_Init+0x2ee>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80010b0:	d00a      	beq.n	80010c8 <HAL_ADC_Init+0x2e8>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80010ba:	d002      	beq.n	80010c2 <HAL_ADC_Init+0x2e2>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	e024      	b.n	800110c <HAL_ADC_Init+0x32c>
 80010c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010c6:	e021      	b.n	800110c <HAL_ADC_Init+0x32c>
 80010c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010cc:	e01e      	b.n	800110c <HAL_ADC_Init+0x32c>
 80010ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010d2:	e01b      	b.n	800110c <HAL_ADC_Init+0x32c>
 80010d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d8:	e018      	b.n	800110c <HAL_ADC_Init+0x32c>
 80010da:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80010de:	e015      	b.n	800110c <HAL_ADC_Init+0x32c>
 80010e0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010e4:	e012      	b.n	800110c <HAL_ADC_Init+0x32c>
 80010e6:	bf00      	nop
 80010e8:	200000b8 	.word	0x200000b8
 80010ec:	431bde83 	.word	0x431bde83
 80010f0:	50000100 	.word	0x50000100
 80010f4:	50000300 	.word	0x50000300
 80010f8:	50000700 	.word	0x50000700
 80010fc:	50000400 	.word	0x50000400
 8001100:	50000500 	.word	0x50000500
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001110:	4313      	orrs	r3, r2
 8001112:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001114:	4313      	orrs	r3, r2
 8001116:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b00      	cmp	r3, #0
 8001124:	d113      	bne.n	800114e <HAL_ADC_Init+0x36e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001134:	f023 0302 	bic.w	r3, r3, #2
 8001138:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	039a      	lsls	r2, r3, #14
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4313      	orrs	r3, r2
 8001148:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800114a:	4313      	orrs	r3, r2
 800114c:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_ADC_Init+0x3f0>)
 8001156:	4013      	ands	r3, r2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800115e:	430b      	orrs	r3, r1
 8001160:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10c      	bne.n	8001184 <HAL_ADC_Init+0x3a4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	f023 010f 	bic.w	r1, r3, #15
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	631a      	str	r2, [r3, #48]	; 0x30
 8001182:	e007      	b.n	8001194 <HAL_ADC_Init+0x3b4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 020f 	bic.w	r2, r2, #15
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f023 0303 	bic.w	r3, r3, #3
 80011a2:	f043 0201 	orr.w	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	645a      	str	r2, [r3, #68]	; 0x44
 80011aa:	e00a      	b.n	80011c2 <HAL_ADC_Init+0x3e2>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b0:	f023 0312 	bic.w	r3, r3, #18
 80011b4:	f043 0210 	orr.w	r2, r3, #16
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3770      	adds	r7, #112	; 0x70
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	fff0c007 	.word	0xfff0c007

080011d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f040 80f7 	bne.w	80013e2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_Start_DMA+0x2e>
 80011fe:	2302      	movs	r3, #2
 8001200:	e0f2      	b.n	80013e8 <HAL_ADC_Start_DMA+0x214>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001212:	d004      	beq.n	800121e <HAL_ADC_Start_DMA+0x4a>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a75      	ldr	r2, [pc, #468]	; (80013f0 <HAL_ADC_Start_DMA+0x21c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d109      	bne.n	8001232 <HAL_ADC_Start_DMA+0x5e>
 800121e:	4b75      	ldr	r3, [pc, #468]	; (80013f4 <HAL_ADC_Start_DMA+0x220>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf0c      	ite	eq
 800122a:	2301      	moveq	r3, #1
 800122c:	2300      	movne	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	e008      	b.n	8001244 <HAL_ADC_Start_DMA+0x70>
 8001232:	4b71      	ldr	r3, [pc, #452]	; (80013f8 <HAL_ADC_Start_DMA+0x224>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf0c      	ite	eq
 800123e:	2301      	moveq	r3, #1
 8001240:	2300      	movne	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80c5 	beq.w	80013d4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 fde6 	bl	8001e1c <ADC_Enable>
 8001250:	4603      	mov	r3, r0
 8001252:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 80b7 	bne.w	80013ca <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001278:	d004      	beq.n	8001284 <HAL_ADC_Start_DMA+0xb0>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a5c      	ldr	r2, [pc, #368]	; (80013f0 <HAL_ADC_Start_DMA+0x21c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d106      	bne.n	8001292 <HAL_ADC_Start_DMA+0xbe>
 8001284:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_ADC_Start_DMA+0x220>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2b00      	cmp	r3, #0
 800128e:	d010      	beq.n	80012b2 <HAL_ADC_Start_DMA+0xde>
 8001290:	e005      	b.n	800129e <HAL_ADC_Start_DMA+0xca>
 8001292:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <HAL_ADC_Start_DMA+0x224>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	2b00      	cmp	r3, #0
 800129c:	d009      	beq.n	80012b2 <HAL_ADC_Start_DMA+0xde>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a6:	d004      	beq.n	80012b2 <HAL_ADC_Start_DMA+0xde>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a53      	ldr	r2, [pc, #332]	; (80013fc <HAL_ADC_Start_DMA+0x228>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d115      	bne.n	80012de <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d036      	beq.n	800133a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	645a      	str	r2, [r3, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012dc:	e02d      	b.n	800133a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f2:	d004      	beq.n	80012fe <HAL_ADC_Start_DMA+0x12a>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <HAL_ADC_Start_DMA+0x21c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10a      	bne.n	8001314 <HAL_ADC_Start_DMA+0x140>
 80012fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf14      	ite	ne
 800130c:	2301      	movne	r3, #1
 800130e:	2300      	moveq	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	e008      	b.n	8001326 <HAL_ADC_Start_DMA+0x152>
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_ADC_Start_DMA+0x228>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf14      	ite	ne
 8001320:	2301      	movne	r3, #1
 8001322:	2300      	moveq	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001332:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	645a      	str	r2, [r3, #68]	; 0x44
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001346:	d106      	bne.n	8001356 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134c:	f023 0206 	bic.w	r2, r3, #6
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	649a      	str	r2, [r3, #72]	; 0x48
 8001354:	e002      	b.n	800135c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	649a      	str	r2, [r3, #72]	; 0x48
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001368:	4a25      	ldr	r2, [pc, #148]	; (8001400 <HAL_ADC_Start_DMA+0x22c>)
 800136a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001370:	4a24      	ldr	r2, [pc, #144]	; (8001404 <HAL_ADC_Start_DMA+0x230>)
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001378:	4a23      	ldr	r2, [pc, #140]	; (8001408 <HAL_ADC_Start_DMA+0x234>)
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	221c      	movs	r2, #28
 8001382:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0210 	orr.w	r2, r2, #16
 8001392:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3340      	adds	r3, #64	; 0x40
 80013ae:	4619      	mov	r1, r3
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f001 ff80 	bl	80032b8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0204 	orr.w	r2, r2, #4
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	e00d      	b.n	80013e6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013d2:	e008      	b.n	80013e6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013e0:	e001      	b.n	80013e6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013e2:	2302      	movs	r3, #2
 80013e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	50000100 	.word	0x50000100
 80013f4:	50000300 	.word	0x50000300
 80013f8:	50000700 	.word	0x50000700
 80013fc:	50000400 	.word	0x50000400
 8001400:	08001d51 	.word	0x08001d51
 8001404:	08001dcb 	.word	0x08001dcb
 8001408:	08001de7 	.word	0x08001de7

0800140c <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_ADC_Stop_DMA+0x1a>
 8001422:	2302      	movs	r3, #2
 8001424:	e04a      	b.n	80014bc <HAL_ADC_Stop_DMA+0xb0>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800142e:	216c      	movs	r1, #108	; 0x6c
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fdb1 	bl	8001f98 <ADC_ConversionStop>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d138      	bne.n	80014b2 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001454:	4618      	mov	r0, r3
 8001456:	f001 ff8e 	bl	8003376 <HAL_DMA_Abort>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0210 	bic.w	r2, r2, #16
 800147e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fd26 	bl	8001ed8 <ADC_Disable>
 800148c:	4603      	mov	r3, r0
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e002      	b.n	8001498 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fd20 	bl	8001ed8 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80014dc:	2302      	movs	r3, #2
 80014de:	e057      	b.n	8001590 <HAL_ADCEx_Calibration_Start+0xcc>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fcf5 	bl	8001ed8 <ADC_Disable>
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d146      	bne.n	8001586 <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800150c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d107      	bne.n	8001524 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001522:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001532:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001534:	f7ff fbf2 	bl	8000d1c <HAL_GetTick>
 8001538:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800153a:	e014      	b.n	8001566 <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800153c:	f7ff fbee 	bl	8000d1c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b0a      	cmp	r3, #10
 8001548:	d90d      	bls.n	8001566 <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f023 0312 	bic.w	r3, r3, #18
 8001552:	f043 0210 	orr.w	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e014      	b.n	8001590 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001574:	d0e2      	beq.n	800153c <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f023 0303 	bic.w	r3, r3, #3
 800157e:	f043 0201 	orr.w	r2, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001598:	b480      	push	{r7}
 800159a:	b09d      	sub	sp, #116	; 0x74
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x22>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e2cb      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x5ba>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f040 82af 	bne.w	8001b30 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d81c      	bhi.n	8001614 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	461a      	mov	r2, r3
 80015ee:	231f      	movs	r3, #31
 80015f0:	4093      	lsls	r3, r2
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4019      	ands	r1, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	631a      	str	r2, [r3, #48]	; 0x30
 8001612:	e063      	b.n	80016dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b09      	cmp	r3, #9
 800161a:	d81e      	bhi.n	800165a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	3b1e      	subs	r3, #30
 8001630:	221f      	movs	r2, #31
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	4019      	ands	r1, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	3b1e      	subs	r3, #30
 800164c:	fa00 f203 	lsl.w	r2, r0, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
 8001658:	e040      	b.n	80016dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b0e      	cmp	r3, #14
 8001660:	d81e      	bhi.n	80016a0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	3b3c      	subs	r3, #60	; 0x3c
 8001676:	221f      	movs	r2, #31
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	4019      	ands	r1, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	3b3c      	subs	r3, #60	; 0x3c
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	639a      	str	r2, [r3, #56]	; 0x38
 800169e:	e01d      	b.n	80016dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	3b5a      	subs	r3, #90	; 0x5a
 80016b4:	221f      	movs	r2, #31
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4019      	ands	r1, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	3b5a      	subs	r3, #90	; 0x5a
 80016d0:	fa00 f203 	lsl.w	r2, r0, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 80e5 	bne.w	80018b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d91c      	bls.n	800172e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6999      	ldr	r1, [r3, #24]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	3b1e      	subs	r3, #30
 8001706:	2207      	movs	r2, #7
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	4019      	ands	r1, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6898      	ldr	r0, [r3, #8]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	3b1e      	subs	r3, #30
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	619a      	str	r2, [r3, #24]
 800172c:	e019      	b.n	8001762 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6959      	ldr	r1, [r3, #20]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	2207      	movs	r2, #7
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4019      	ands	r1, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6898      	ldr	r0, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	3b01      	subs	r3, #1
 8001780:	2b03      	cmp	r3, #3
 8001782:	d84f      	bhi.n	8001824 <HAL_ADC_ConfigChannel+0x28c>
 8001784:	a201      	add	r2, pc, #4	; (adr r2, 800178c <HAL_ADC_ConfigChannel+0x1f4>)
 8001786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178a:	bf00      	nop
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017bf 	.word	0x080017bf
 8001794:	080017e1 	.word	0x080017e1
 8001798:	08001803 	.word	0x08001803
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017a2:	4b9f      	ldr	r3, [pc, #636]	; (8001a20 <HAL_ADC_ConfigChannel+0x488>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	0691      	lsls	r1, r2, #26
 80017ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80017ae:	430a      	orrs	r2, r1
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017bc:	e07e      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017c4:	4b96      	ldr	r3, [pc, #600]	; (8001a20 <HAL_ADC_ConfigChannel+0x488>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	0691      	lsls	r1, r2, #26
 80017ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80017d0:	430a      	orrs	r2, r1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017dc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017de:	e06d      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017e6:	4b8e      	ldr	r3, [pc, #568]	; (8001a20 <HAL_ADC_ConfigChannel+0x488>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	0691      	lsls	r1, r2, #26
 80017f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80017f2:	430a      	orrs	r2, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017fe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001800:	e05c      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001808:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_ADC_ConfigChannel+0x488>)
 800180a:	4013      	ands	r3, r2
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	0691      	lsls	r1, r2, #26
 8001812:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001814:	430a      	orrs	r2, r1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001820:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001822:	e04b      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	069b      	lsls	r3, r3, #26
 8001834:	429a      	cmp	r2, r3
 8001836:	d107      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001846:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800184e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	069b      	lsls	r3, r3, #26
 8001858:	429a      	cmp	r2, r3
 800185a:	d107      	bne.n	800186c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800186a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001872:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	069b      	lsls	r3, r3, #26
 800187c:	429a      	cmp	r2, r3
 800187e:	d107      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800188e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	069b      	lsls	r3, r3, #26
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d10a      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018b4:	e001      	b.n	80018ba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018b6:	bf00      	nop
 80018b8:	e000      	b.n	80018bc <HAL_ADC_ConfigChannel+0x324>
      break;
 80018ba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x344>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x344>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_ADC_ConfigChannel+0x346>
 80018dc:	2300      	movs	r3, #0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 8131 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d00f      	beq.n	800190c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	400a      	ands	r2, r1
 8001906:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800190a:	e049      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2201      	movs	r2, #1
 800191a:	409a      	lsls	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b09      	cmp	r3, #9
 800192c:	d91c      	bls.n	8001968 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6999      	ldr	r1, [r3, #24]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	3b1b      	subs	r3, #27
 8001940:	2207      	movs	r2, #7
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	4019      	ands	r1, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6898      	ldr	r0, [r3, #8]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	3b1b      	subs	r3, #27
 800195a:	fa00 f203 	lsl.w	r2, r0, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	619a      	str	r2, [r3, #24]
 8001966:	e01b      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6959      	ldr	r1, [r3, #20]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	2207      	movs	r2, #7
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	4019      	ands	r1, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6898      	ldr	r0, [r3, #8]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	fa00 f203 	lsl.w	r2, r0, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a8:	d004      	beq.n	80019b4 <HAL_ADC_ConfigChannel+0x41c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_ADC_ConfigChannel+0x48c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x420>
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_ADC_ConfigChannel+0x490>)
 80019b6:	e000      	b.n	80019ba <HAL_ADC_ConfigChannel+0x422>
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_ADC_ConfigChannel+0x494>)
 80019ba:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b10      	cmp	r3, #16
 80019c2:	d105      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d015      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019d4:	2b11      	cmp	r3, #17
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00b      	beq.n	80019fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019e8:	2b12      	cmp	r3, #18
 80019ea:	f040 80ac 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 80a5 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a04:	d102      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x474>
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_ADC_ConfigChannel+0x48c>)
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	e023      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x4bc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_ADC_ConfigChannel+0x48c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10c      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x498>
 8001a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	e01a      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x4bc>
 8001a1e:	bf00      	nop
 8001a20:	83fff000 	.word	0x83fff000
 8001a24:	50000100 	.word	0x50000100
 8001a28:	50000300 	.word	0x50000300
 8001a2c:	50000700 	.word	0x50000700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a4a      	ldr	r2, [pc, #296]	; (8001b60 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d102      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x4a8>
 8001a3a:	4b4a      	ldr	r3, [pc, #296]	; (8001b64 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	e009      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x4bc>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <HAL_ADC_ConfigChannel+0x5cc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d102      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x4b8>
 8001a4a:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	e001      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x4bc>
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d108      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x4dc>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x4dc>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x4de>
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d150      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a7a:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d107      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x504>
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x504>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x506>
 8001a9c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d13c      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d11d      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x54e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab2:	d118      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001abe:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_ADC_ConfigChannel+0x5d0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a29      	ldr	r2, [pc, #164]	; (8001b6c <HAL_ADC_ConfigChannel+0x5d4>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9a      	lsrs	r2, r3, #18
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001ad6:	e002      	b.n	8001ade <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f9      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ae4:	e02e      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b11      	cmp	r3, #17
 8001aec:	d10b      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x56e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af6:	d106      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b02:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b04:	e01e      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b12      	cmp	r3, #18
 8001b0c:	d11a      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b18:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b1a:	e013      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	f043 0220 	orr.w	r2, r3, #32
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001b2e:	e00a      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001b42:	e000      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b44:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001b4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3774      	adds	r7, #116	; 0x74
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	50000400 	.word	0x50000400
 8001b64:	50000500 	.word	0x50000500
 8001b68:	200000b8 	.word	0x200000b8
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b09b      	sub	sp, #108	; 0x6c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b88:	d102      	bne.n	8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b8a:	4b6c      	ldr	r3, [pc, #432]	; (8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e01a      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a69      	ldr	r2, [pc, #420]	; (8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d103      	bne.n	8001ba2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	e011      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a66      	ldr	r2, [pc, #408]	; (8001d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d102      	bne.n	8001bb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bac:	4b65      	ldr	r3, [pc, #404]	; (8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e009      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a63      	ldr	r2, [pc, #396]	; (8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001bbc:	4b60      	ldr	r3, [pc, #384]	; (8001d40 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	e001      	b.n	8001bc6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0af      	b.n	8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e0a8      	b.n	8001d30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f040 808c 	bne.w	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x19e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 8085 	bne.w	8001d0e <HAL_ADCEx_MultiModeConfigChannel+0x19e>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0c:	d004      	beq.n	8001c18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a4a      	ldr	r2, [pc, #296]	; (8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c18:	4b4b      	ldr	r3, [pc, #300]	; (8001d48 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c1a:	e000      	b.n	8001c1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c1c:	4b4b      	ldr	r3, [pc, #300]	; (8001d4c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c1e:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d03f      	beq.n	8001ca8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c38:	035b      	lsls	r3, r3, #13
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c40:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d108      	bne.n	8001c62 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d15c      	bne.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001c84:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d14b      	bne.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c92:	f023 030f 	bic.w	r3, r3, #15
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	6811      	ldr	r1, [r2, #0]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	6892      	ldr	r2, [r2, #8]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca4:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ca6:	e03c      	b.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cb2:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d108      	bne.n	8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d123      	bne.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001cf6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d112      	bne.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d04:	f023 030f 	bic.w	r3, r3, #15
 8001d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d0a:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d0c:	e009      	b.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f043 0220 	orr.w	r2, r3, #32
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d20:	e000      	b.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d22:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001d2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001d30:	4618      	mov	r0, r3
 8001d32:	376c      	adds	r7, #108	; 0x6c
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	50000100 	.word	0x50000100
 8001d40:	50000400 	.word	0x50000400
 8001d44:	50000500 	.word	0x50000500
 8001d48:	50000300 	.word	0x50000300
 8001d4c:	50000700 	.word	0x50000700

08001d50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d126      	bne.n	8001db8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d115      	bne.n	8001db0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	69db      	ldr	r3, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d111      	bne.n	8001db0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f008 ffd7 	bl	800ad64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001db6:	e004      	b.n	8001dc2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7fe ffed 	bl	8000db8 <HAL_ADC_ConvHalfCpltCallback>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7fe ffdd 	bl	8000dcc <HAL_ADC_ErrorCallback>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <ADC_Enable+0x2c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <ADC_Enable+0x2c>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <ADC_Enable+0x2e>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d13c      	bne.n	8001ec8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <ADC_Enable+0xb8>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00d      	beq.n	8001e78 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	f043 0210 	orr.w	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e028      	b.n	8001eca <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001e88:	f7fe ff48 	bl	8000d1c <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e8e:	e014      	b.n	8001eba <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e90:	f7fe ff44 	bl	8000d1c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d90d      	bls.n	8001eba <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f043 0210 	orr.w	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e007      	b.n	8001eca <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d1e3      	bne.n	8001e90 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	8000003f 	.word	0x8000003f

08001ed8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d108      	bne.n	8001f04 <ADC_Disable+0x2c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <ADC_Disable+0x2c>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <ADC_Disable+0x2e>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d040      	beq.n	8001f8c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030d 	and.w	r3, r3, #13
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d10f      	bne.n	8001f38 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0202 	orr.w	r2, r2, #2
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001f30:	f7fe fef4 	bl	8000d1c <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f36:	e022      	b.n	8001f7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	f043 0210 	orr.w	r2, r3, #16
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e01c      	b.n	8001f8e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f54:	f7fe fee2 	bl	8000d1c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d90d      	bls.n	8001f7e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e007      	b.n	8001f8e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d0e3      	beq.n	8001f54 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8093 	beq.w	80020e4 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fcc:	d12a      	bne.n	8002024 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d126      	bne.n	8002024 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d122      	bne.n	8002024 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001fde:	230c      	movs	r3, #12
 8001fe0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001fe2:	e014      	b.n	800200e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4a42      	ldr	r2, [pc, #264]	; (80020f0 <ADC_ConversionStop+0x158>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d90d      	bls.n	8002008 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	f043 0210 	orr.w	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	649a      	str	r2, [r3, #72]	; 0x48
          
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e06e      	b.n	80020e6 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	3301      	adds	r3, #1
 800200c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	2b40      	cmp	r3, #64	; 0x40
 800201a:	d1e3      	bne.n	8001fe4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2240      	movs	r2, #64	; 0x40
 8002022:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b60      	cmp	r3, #96	; 0x60
 8002028:	d015      	beq.n	8002056 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b04      	cmp	r3, #4
 8002036:	d10e      	bne.n	8002056 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002042:	2b00      	cmp	r3, #0
 8002044:	d107      	bne.n	8002056 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0210 	orr.w	r2, r2, #16
 8002054:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d015      	beq.n	8002088 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b08      	cmp	r3, #8
 8002068:	d10e      	bne.n	8002088 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0220 	orr.w	r2, r2, #32
 8002086:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b60      	cmp	r3, #96	; 0x60
 800208c:	d004      	beq.n	8002098 <ADC_ConversionStop+0x100>
 800208e:	2b6c      	cmp	r3, #108	; 0x6c
 8002090:	d105      	bne.n	800209e <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002092:	230c      	movs	r3, #12
 8002094:	617b      	str	r3, [r7, #20]
        break;
 8002096:	e005      	b.n	80020a4 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002098:	2308      	movs	r3, #8
 800209a:	617b      	str	r3, [r7, #20]
        break;
 800209c:	e002      	b.n	80020a4 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800209e:	2304      	movs	r3, #4
 80020a0:	617b      	str	r3, [r7, #20]
        break;
 80020a2:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80020a4:	f7fe fe3a 	bl	8000d1c <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80020aa:	e014      	b.n	80020d6 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80020ac:	f7fe fe36 	bl	8000d1c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b0b      	cmp	r3, #11
 80020b8:	d90d      	bls.n	80020d6 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f043 0210 	orr.w	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e007      	b.n	80020e6 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e3      	bne.n	80020ac <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	000993ff 	.word	0x000993ff

080020f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *             the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e113      	b.n	8002336 <HAL_CAN_Init+0x242>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_CAN_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f009 fa90 	bl	800b648 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0202 	bic.w	r2, r2, #2
 800213e:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();   
 8002150:	f7fe fde4 	bl	8000d1c <HAL_GetTick>
 8002154:	60b8      	str	r0, [r7, #8]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8002156:	e010      	b.n	800217a <HAL_CAN_Init+0x86>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8002158:	f7fe fde0 	bl	8000d1c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b0a      	cmp	r3, #10
 8002164:	d909      	bls.n	800217a <HAL_CAN_Init+0x86>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2203      	movs	r2, #3
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0dd      	b.n	8002336 <HAL_CAN_Init+0x242>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0e7      	beq.n	8002158 <HAL_CAN_Init+0x64>
    }
  }

  /* Check acknowledge */
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	f040 80be 	bne.w	8002314 <HAL_CAN_Init+0x220>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d108      	bne.n	80021b2 <HAL_CAN_Init+0xbe>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e007      	b.n	80021c2 <HAL_CAN_Init+0xce>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c0:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d108      	bne.n	80021dc <HAL_CAN_Init+0xe8>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e007      	b.n	80021ec <HAL_CAN_Init+0xf8>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ea:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d108      	bne.n	8002206 <HAL_CAN_Init+0x112>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0220 	orr.w	r2, r2, #32
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e007      	b.n	8002216 <HAL_CAN_Init+0x122>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0220 	bic.w	r2, r2, #32
 8002214:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2b01      	cmp	r3, #1
 800221c:	d108      	bne.n	8002230 <HAL_CAN_Init+0x13c>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0210 	orr.w	r2, r2, #16
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e007      	b.n	8002240 <HAL_CAN_Init+0x14c>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0210 	bic.w	r2, r2, #16
 800223e:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	2b01      	cmp	r3, #1
 8002246:	d108      	bne.n	800225a <HAL_CAN_Init+0x166>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0208 	orr.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e007      	b.n	800226a <HAL_CAN_Init+0x176>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0208 	bic.w	r2, r2, #8
 8002268:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	2b01      	cmp	r3, #1
 8002270:	d108      	bne.n	8002284 <HAL_CAN_Init+0x190>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0204 	orr.w	r2, r2, #4
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e007      	b.n	8002294 <HAL_CAN_Init+0x1a0>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0204 	bic.w	r2, r2, #4
 8002292:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	ea42 0103 	orr.w	r1, r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();   
 80022ca:	f7fe fd27 	bl	8000d1c <HAL_GetTick>
 80022ce:	60b8      	str	r0, [r7, #8]
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80022d0:	e010      	b.n	80022f4 <HAL_CAN_Init+0x200>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80022d2:	f7fe fd23 	bl	8000d1c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b0a      	cmp	r3, #10
 80022de:	d909      	bls.n	80022f4 <HAL_CAN_Init+0x200>
      {
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2203      	movs	r2, #3
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

       return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e020      	b.n	8002336 <HAL_CAN_Init+0x242>
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d0e7      	beq.n	80022d2 <HAL_CAN_Init+0x1de>
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_CAN_Init+0x220>
    {
      status = CAN_INITSTATUS_SUCCESS;
 8002310:	2301      	movs	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d108      	bne.n	800232c <HAL_CAN_Init+0x238>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
    /* Return function status */
    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e004      	b.n	8002336 <HAL_CAN_Init+0x242>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2204      	movs	r2, #4
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Return function status */
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));

  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	2201      	movs	r2, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  SET_BIT(hcan->Instance->FMR, CAN_FMR_FINIT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0201 	orr.w	r2, r2, #1
 8002368:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43da      	mvns	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	400a      	ands	r2, r1
 800237e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d127      	bne.n	80023da <HAL_CAN_ConfigFilter+0x9c>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43da      	mvns	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023b4:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80023b6:	3248      	adds	r2, #72	; 0x48
 80023b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023d0:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80023d2:	3348      	adds	r3, #72	; 0x48
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	605a      	str	r2, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d126      	bne.n	8002430 <HAL_CAN_ConfigFilter+0xf2>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800240a:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800240c:	3248      	adds	r2, #72	; 0x48
 800240e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002426:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8002428:	3348      	adds	r3, #72	; 0x48
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <HAL_CAN_ConfigFilter+0x112>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43da      	mvns	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	400a      	ands	r2, r1
 800244a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800244e:	e009      	b.n	8002464 <HAL_CAN_ConfigFilter+0x126>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	430a      	orrs	r2, r1
 8002460:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_CAN_ConfigFilter+0x146>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43da      	mvns	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002482:	e009      	b.n	8002498 <HAL_CAN_ConfigFilter+0x15a>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	430a      	orrs	r2, r1
 8002494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d109      	bne.n	80024b4 <HAL_CAN_ConfigFilter+0x176>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 80024e2:	2304      	movs	r3, #4
 80024e4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024f8:	d010      	beq.n	800251c <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8002504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002508:	d008      	beq.n	800251c <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8002514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002518:	f040 818b 	bne.w	8002832 <HAL_CAN_Transmit+0x35a>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_CAN_Transmit+0x52>
 8002526:	2302      	movs	r3, #2
 8002528:	e188      	b.n	800283c <HAL_CAN_Transmit+0x364>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change CAN state */
    switch(hcan->State)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b32      	cmp	r3, #50	; 0x32
 800253c:	d008      	beq.n	8002550 <HAL_CAN_Transmit+0x78>
 800253e:	2b62      	cmp	r3, #98	; 0x62
 8002540:	d00b      	beq.n	800255a <HAL_CAN_Transmit+0x82>
 8002542:	2b22      	cmp	r3, #34	; 0x22
 8002544:	d10e      	bne.n	8002564 <HAL_CAN_Transmit+0x8c>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2242      	movs	r2, #66	; 0x42
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          break;
 800254e:	e00e      	b.n	800256e <HAL_CAN_Transmit+0x96>
      case(HAL_CAN_STATE_BUSY_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2252      	movs	r2, #82	; 0x52
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          break;
 8002558:	e009      	b.n	800256e <HAL_CAN_Transmit+0x96>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2272      	movs	r2, #114	; 0x72
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          break;
 8002562:	e004      	b.n	800256e <HAL_CAN_Transmit+0x96>
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2212      	movs	r2, #18
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          break;
 800256c:	bf00      	nop
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800257c:	d102      	bne.n	8002584 <HAL_CAN_Transmit+0xac>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	e00c      	b.n	800259e <HAL_CAN_Transmit+0xc6>
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800258e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002592:	d102      	bne.n	800259a <HAL_CAN_Transmit+0xc2>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 8002594:	2301      	movs	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e001      	b.n	800259e <HAL_CAN_Transmit+0xc6>
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 800259a:	2302      	movs	r3, #2
 800259c:	60fb      	str	r3, [r7, #12]
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3318      	adds	r3, #24
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	4413      	add	r3, r2
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6811      	ldr	r1, [r2, #0]
 80025b0:	f003 0201 	and.w	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3318      	adds	r3, #24
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	440b      	add	r3, r1
 80025bc:	601a      	str	r2, [r3, #0]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d117      	bne.n	80025f8 <HAL_CAN_Transmit+0x120>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3318      	adds	r3, #24
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	4413      	add	r3, r2
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0559      	lsls	r1, r3, #21
                                                           hcan->pTxMsg->RTR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	6809      	ldr	r1, [r1, #0]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3318      	adds	r3, #24
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	440b      	add	r3, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e01a      	b.n	800262e <HAL_CAN_Transmit+0x156>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3318      	adds	r3, #24
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	4413      	add	r3, r2
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	00d9      	lsls	r1, r3, #3
                                                           hcan->pTxMsg->IDE | \
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8002614:	4319      	orrs	r1, r3
                                                           hcan->pTxMsg->RTR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	68db      	ldr	r3, [r3, #12]
                                                           hcan->pTxMsg->IDE | \
 800261c:	430b      	orrs	r3, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	6809      	ldr	r1, [r1, #0]
 8002622:	431a      	orrs	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3318      	adds	r3, #24
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	440b      	add	r3, r1
 800262c:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	f002 020f 	and.w	r2, r2, #15
 800263c:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3318      	adds	r3, #24
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6811      	ldr	r1, [r2, #0]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3318      	adds	r3, #24
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	440b      	add	r3, r1
 800265e:	3304      	adds	r3, #4
 8002660:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3318      	adds	r3, #24
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	3304      	adds	r3, #4
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	6809      	ldr	r1, [r1, #0]
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3318      	adds	r3, #24
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	440b      	add	r3, r1
 8002686:	3304      	adds	r3, #4
 8002688:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	7ddb      	ldrb	r3, [r3, #23]
 8002690:	061a      	lsls	r2, r3, #24
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	7d9b      	ldrb	r3, [r3, #22]
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	7d5b      	ldrb	r3, [r3, #21]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	4313      	orrs	r3, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026aa:	7d12      	ldrb	r2, [r2, #20]
 80026ac:	4610      	mov	r0, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6811      	ldr	r1, [r2, #0]
 80026b2:	ea43 0200 	orr.w	r2, r3, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	440b      	add	r3, r1
 80026bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80026c0:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	7edb      	ldrb	r3, [r3, #27]
 80026c8:	061a      	lsls	r2, r3, #24
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	7e9b      	ldrb	r3, [r3, #26]
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	7e5b      	ldrb	r3, [r3, #25]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	4313      	orrs	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026e2:	7e12      	ldrb	r2, [r2, #24]
 80026e4:	4610      	mov	r0, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6811      	ldr	r1, [r2, #0]
 80026ea:	ea43 0200 	orr.w	r2, r3, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	440b      	add	r3, r1
 80026f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026f8:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3318      	adds	r3, #24
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	4413      	add	r3, r2
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6811      	ldr	r1, [r2, #0]
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3318      	adds	r3, #24
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	440b      	add	r3, r1
 8002718:	601a      	str	r2, [r3, #0]
  
    /* Get tick */
    tickstart = HAL_GetTick();   
 800271a:	f7fe faff 	bl	8000d1c <HAL_GetTick>
 800271e:	60b8      	str	r0, [r7, #8]
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8002720:	e038      	b.n	8002794 <HAL_CAN_Transmit+0x2bc>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d034      	beq.n	8002794 <HAL_CAN_Transmit+0x2bc>
      {
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_CAN_Transmit+0x268>
 8002730:	f7fe faf4 	bl	8000d1c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d229      	bcs.n	8002794 <HAL_CAN_Transmit+0x2bc>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2203      	movs	r2, #3
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

          /* Cancel transmission */
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_CAN_Transmit+0x288>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	e013      	b.n	8002788 <HAL_CAN_Transmit+0x2b0>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <HAL_CAN_Transmit+0x2a0>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	e007      	b.n	8002788 <HAL_CAN_Transmit+0x2b0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002786:	609a      	str	r2, [r3, #8]

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e053      	b.n	800283c <HAL_CAN_Transmit+0x364>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <HAL_CAN_Transmit+0x2da>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	4b28      	ldr	r3, [pc, #160]	; (8002844 <HAL_CAN_Transmit+0x36c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	4a27      	ldr	r2, [pc, #156]	; (8002844 <HAL_CAN_Transmit+0x36c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e019      	b.n	80027e6 <HAL_CAN_Transmit+0x30e>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10b      	bne.n	80027d0 <HAL_CAN_Transmit+0x2f8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_CAN_Transmit+0x370>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	4a21      	ldr	r2, [pc, #132]	; (8002848 <HAL_CAN_Transmit+0x370>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	e00a      	b.n	80027e6 <HAL_CAN_Transmit+0x30e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_CAN_Transmit+0x374>)
 80027d8:	4013      	ands	r3, r2
 80027da:	4a1c      	ldr	r2, [pc, #112]	; (800284c <HAL_CAN_Transmit+0x374>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d19b      	bne.n	8002722 <HAL_CAN_Transmit+0x24a>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b52      	cmp	r3, #82	; 0x52
 80027f4:	d008      	beq.n	8002808 <HAL_CAN_Transmit+0x330>
 80027f6:	2b72      	cmp	r3, #114	; 0x72
 80027f8:	d00b      	beq.n	8002812 <HAL_CAN_Transmit+0x33a>
 80027fa:	2b42      	cmp	r3, #66	; 0x42
 80027fc:	d10e      	bne.n	800281c <HAL_CAN_Transmit+0x344>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2222      	movs	r2, #34	; 0x22
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          break;
 8002806:	e00e      	b.n	8002826 <HAL_CAN_Transmit+0x34e>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2232      	movs	r2, #50	; 0x32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          break;
 8002810:	e009      	b.n	8002826 <HAL_CAN_Transmit+0x34e>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2262      	movs	r2, #98	; 0x62
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          break;
 800281a:	e004      	b.n	8002826 <HAL_CAN_Transmit+0x34e>
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          break;
 8002824:	bf00      	nop
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Return function status */
    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e004      	b.n	800283c <HAL_CAN_Transmit+0x364>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Return function status */
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	04000001 	.word	0x04000001
 8002848:	08000100 	.word	0x08000100
 800284c:	10010000 	.word	0x10010000

08002850 <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber    FIFO number.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_CAN_Receive_IT+0x1a>
 8002866:	2302      	movs	r3, #2
 8002868:	e0a9      	b.n	80029be <HAL_CAN_Receive_IT+0x16e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d11d      	bne.n	80028b4 <HAL_CAN_Receive_IT+0x64>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b22      	cmp	r3, #34	; 0x22
 8002882:	d011      	beq.n	80028a8 <HAL_CAN_Receive_IT+0x58>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 800288c:	2b42      	cmp	r3, #66	; 0x42
 800288e:	d00b      	beq.n	80028a8 <HAL_CAN_Receive_IT+0x58>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002896:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8002898:	2b62      	cmp	r3, #98	; 0x62
 800289a:	d005      	beq.n	80028a8 <HAL_CAN_Receive_IT+0x58>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a2:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80028a4:	2b72      	cmp	r3, #114	; 0x72
 80028a6:	d105      	bne.n	80028b4 <HAL_CAN_Receive_IT+0x64>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
 80028b2:	e084      	b.n	80029be <HAL_CAN_Receive_IT+0x16e>
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d11d      	bne.n	80028f6 <HAL_CAN_Receive_IT+0xa6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b32      	cmp	r3, #50	; 0x32
 80028c4:	d011      	beq.n	80028ea <HAL_CAN_Receive_IT+0x9a>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 80028ce:	2b52      	cmp	r3, #82	; 0x52
 80028d0:	d00b      	beq.n	80028ea <HAL_CAN_Receive_IT+0x9a>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80028da:	2b62      	cmp	r3, #98	; 0x62
 80028dc:	d005      	beq.n	80028ea <HAL_CAN_Receive_IT+0x9a>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80028e6:	2b72      	cmp	r3, #114	; 0x72
 80028e8:	d105      	bne.n	80028f6 <HAL_CAN_Receive_IT+0xa6>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
 80028f4:	e063      	b.n	80029be <HAL_CAN_Receive_IT+0x16e>
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11e      	bne.n	800293a <HAL_CAN_Receive_IT+0xea>
  {
    switch(hcan->State)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b32      	cmp	r3, #50	; 0x32
 8002906:	d008      	beq.n	800291a <HAL_CAN_Receive_IT+0xca>
 8002908:	2b52      	cmp	r3, #82	; 0x52
 800290a:	d00b      	beq.n	8002924 <HAL_CAN_Receive_IT+0xd4>
 800290c:	2b12      	cmp	r3, #18
 800290e:	d10e      	bne.n	800292e <HAL_CAN_Receive_IT+0xde>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2242      	movs	r2, #66	; 0x42
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002918:	e02d      	b.n	8002976 <HAL_CAN_Receive_IT+0x126>
      case(HAL_CAN_STATE_BUSY_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2262      	movs	r2, #98	; 0x62
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002922:	e028      	b.n	8002976 <HAL_CAN_Receive_IT+0x126>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2272      	movs	r2, #114	; 0x72
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 800292c:	e023      	b.n	8002976 <HAL_CAN_Receive_IT+0x126>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2222      	movs	r2, #34	; 0x22
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002936:	bf00      	nop
 8002938:	e01d      	b.n	8002976 <HAL_CAN_Receive_IT+0x126>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b22      	cmp	r3, #34	; 0x22
 8002944:	d008      	beq.n	8002958 <HAL_CAN_Receive_IT+0x108>
 8002946:	2b42      	cmp	r3, #66	; 0x42
 8002948:	d00b      	beq.n	8002962 <HAL_CAN_Receive_IT+0x112>
 800294a:	2b12      	cmp	r3, #18
 800294c:	d10e      	bne.n	800296c <HAL_CAN_Receive_IT+0x11c>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2252      	movs	r2, #82	; 0x52
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002956:	e00e      	b.n	8002976 <HAL_CAN_Receive_IT+0x126>
      case(HAL_CAN_STATE_BUSY_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2262      	movs	r2, #98	; 0x62
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002960:	e009      	b.n	8002976 <HAL_CAN_Receive_IT+0x126>
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2272      	movs	r2, #114	; 0x72
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 800296a:	e004      	b.n	8002976 <HAL_CAN_Receive_IT+0x126>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2232      	movs	r2, #50	; 0x32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002974:	bf00      	nop
    }
  }

  /* Set CAN error code to none */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
  /*  - Enable Error warning Interrupt */
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 420f 	orr.w	r2, r2, #36608	; 0x8f00
 800298a:	615a      	str	r2, [r3, #20]
                            CAN_IT_BOF |
                            CAN_IT_LEC |
                            CAN_IT_ERR);

  /* Process unlocked */
  __HAL_UNLOCK(hcan);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(FIFONumber == CAN_FIFO0)
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d108      	bne.n	80029ac <HAL_CAN_Receive_IT+0x15c>
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 020a 	orr.w	r2, r2, #10
 80029a8:	615a      	str	r2, [r3, #20]
 80029aa:	e007      	b.n	80029bc <HAL_CAN_Receive_IT+0x16c>
  }
  else
  {
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80029ba:	615a      	str	r2, [r3, #20]
  }
  
  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Check Overrun flag for FIFO0 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d10e      	bne.n	8002a04 <HAL_CAN_IRQHandler+0x38>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0)))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	f003 0308 	and.w	r3, r3, #8
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d107      	bne.n	8002a04 <HAL_CAN_IRQHandler+0x38>
  {
    /* Set CAN error code to FOV0 error */
    errorcode |= HAL_CAN_ERROR_FOV0;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fa:	60fb      	str	r3, [r7, #12]

    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2210      	movs	r2, #16
 8002a02:	60da      	str	r2, [r3, #12]
  }

  /* Check Overrun flag for FIFO1 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d10e      	bne.n	8002a30 <HAL_CAN_IRQHandler+0x64>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1)))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d107      	bne.n	8002a30 <HAL_CAN_IRQHandler+0x64>
  {
    /* Set CAN error code to FOV1 error */
    errorcode |= HAL_CAN_ERROR_FOV1;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a26:	60fb      	str	r3, [r7, #12]

    /* Clear FIFO1 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	611a      	str	r2, [r3, #16]
  }

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d13e      	bne.n	8002abc <HAL_CAN_IRQHandler+0xf0>
  {
    /* Check Transmit request completion status */
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	4b9e      	ldr	r3, [pc, #632]	; (8002cc0 <HAL_CAN_IRQHandler+0x2f4>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	4a9d      	ldr	r2, [pc, #628]	; (8002cc0 <HAL_CAN_IRQHandler+0x2f4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00f      	beq.n	8002a6e <HAL_CAN_IRQHandler+0xa2>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b9b      	ldr	r3, [pc, #620]	; (8002cc4 <HAL_CAN_IRQHandler+0x2f8>)
 8002a56:	4013      	ands	r3, r2
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8002a58:	4a9a      	ldr	r2, [pc, #616]	; (8002cc4 <HAL_CAN_IRQHandler+0x2f8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_CAN_IRQHandler+0xa2>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	4b98      	ldr	r3, [pc, #608]	; (8002cc8 <HAL_CAN_IRQHandler+0x2fc>)
 8002a66:	4013      	ands	r3, r2
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8002a68:	4a97      	ldr	r2, [pc, #604]	; (8002cc8 <HAL_CAN_IRQHandler+0x2fc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d126      	bne.n	8002abc <HAL_CAN_IRQHandler+0xf0>
    {
      /* Check Transmit success */
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d00f      	beq.n	8002a9c <HAL_CAN_IRQHandler+0xd0>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 8002a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8a:	d007      	beq.n	8002a9c <HAL_CAN_IRQHandler+0xd0>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2)))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 8002a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a9a:	d103      	bne.n	8002aa4 <HAL_CAN_IRQHandler+0xd8>
      {
        /* Call transmit function */
        CAN_Transmit_IT(hcan);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f92b 	bl	8002cf8 <CAN_Transmit_IT>
 8002aa2:	e003      	b.n	8002aac <HAL_CAN_IRQHandler+0xe0>
      }
      else /* Transmit failure */
      {
        /* Set CAN error code to TXFAIL error */
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aaa:	60fb      	str	r3, [r7, #12]
      }

      /* Clear transmission status flags (RQCPx and TXOKx) */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b85      	ldr	r3, [pc, #532]	; (8002ccc <HAL_CAN_IRQHandler+0x300>)
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6093      	str	r3, [r2, #8]
                                   CAN_FLAG_TXOK0 | CAN_FLAG_TXOK1 | CAN_FLAG_TXOK2);
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_CAN_IRQHandler+0x116>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0U))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 0303 	and.w	r3, r3, #3
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_CAN_IRQHandler+0x116>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8002ada:	2100      	movs	r1, #0
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f94b 	bl	8002d78 <CAN_Receive_IT>
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d10b      	bne.n	8002b08 <HAL_CAN_IRQHandler+0x13c>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0U))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f003 0303 	and.w	r3, r3, #3
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x13c>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8002b00:	2101      	movs	r1, #1
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f938 	bl	8002d78 <CAN_Receive_IT>
  }
  
  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d115      	bne.n	8002b4e <HAL_CAN_IRQHandler+0x182>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b30:	d10d      	bne.n	8002b4e <HAL_CAN_IRQHandler+0x182>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8002b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b40:	d105      	bne.n	8002b4e <HAL_CAN_IRQHandler+0x182>
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d115      	bne.n	8002b88 <HAL_CAN_IRQHandler+0x1bc>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8002b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6a:	d10d      	bne.n	8002b88 <HAL_CAN_IRQHandler+0x1bc>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8002b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7a:	d105      	bne.n	8002b88 <HAL_CAN_IRQHandler+0x1bc>
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0202 	orr.w	r2, r3, #2
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d115      	bne.n	8002bc2 <HAL_CAN_IRQHandler+0x1f6>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8002ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba4:	d10d      	bne.n	8002bc2 <HAL_CAN_IRQHandler+0x1f6>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d105      	bne.n	8002bc2 <HAL_CAN_IRQHandler+0x1f6>
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0204 	orr.w	r2, r3, #4
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d056      	beq.n	8002c7e <HAL_CAN_IRQHandler+0x2b2>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8002bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bde:	d14e      	bne.n	8002c7e <HAL_CAN_IRQHandler+0x2b2>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8002bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bee:	d146      	bne.n	8002c7e <HAL_CAN_IRQHandler+0x2b2>
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bfa:	2b30      	cmp	r3, #48	; 0x30
 8002bfc:	d01b      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x26a>
 8002bfe:	2b30      	cmp	r3, #48	; 0x30
 8002c00:	d804      	bhi.n	8002c0c <HAL_CAN_IRQHandler+0x240>
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	d009      	beq.n	8002c1a <HAL_CAN_IRQHandler+0x24e>
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d00e      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x25c>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 8002c0a:	e030      	b.n	8002c6e <HAL_CAN_IRQHandler+0x2a2>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8002c0c:	2b50      	cmp	r3, #80	; 0x50
 8002c0e:	d020      	beq.n	8002c52 <HAL_CAN_IRQHandler+0x286>
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	d025      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x294>
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d015      	beq.n	8002c44 <HAL_CAN_IRQHandler+0x278>
          break;
 8002c18:	e029      	b.n	8002c6e <HAL_CAN_IRQHandler+0x2a2>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f043 0208 	orr.w	r2, r3, #8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8002c26:	e022      	b.n	8002c6e <HAL_CAN_IRQHandler+0x2a2>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f043 0210 	orr.w	r2, r3, #16
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8002c34:	e01b      	b.n	8002c6e <HAL_CAN_IRQHandler+0x2a2>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f043 0220 	orr.w	r2, r3, #32
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8002c42:	e014      	b.n	8002c6e <HAL_CAN_IRQHandler+0x2a2>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8002c50:	e00d      	b.n	8002c6e <HAL_CAN_IRQHandler+0x2a2>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8002c5e:	e006      	b.n	8002c6e <HAL_CAN_IRQHandler+0x2a2>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8002c6c:	bf00      	nop
    }

    /* Clear Last error code Flag */ 
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c7c:	619a      	str	r2, [r3, #24]
  }

  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <HAL_CAN_IRQHandler+0x2ec>
  {
    /* Clear ERRI Flag */ 
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0204 	orr.w	r2, r2, #4
 8002c94:	605a      	str	r2, [r3, #4]

    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    /*  - Disable FIFO 0 message pending Interrupt */
    /*  - Disable FIFO 0 Overrun Interrupt */
    /*  - Disable FIFO 1 message pending Interrupt */
    /*  - Disable FIFO 1 Overrun Interrupt */
    /*  - Disable Transmit mailbox empty Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	f423 430f 	bic.w	r3, r3, #36608	; 0x8f00
 8002cac:	f023 035b 	bic.w	r3, r3, #91	; 0x5b
 8002cb0:	6153      	str	r3, [r2, #20]
                               CAN_IT_FMP1|
                               CAN_IT_FOV1|
                               CAN_IT_TME  );

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f816 	bl	8002ce4 <HAL_CAN_ErrorCallback>
  }  
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	04000001 	.word	0x04000001
 8002cc4:	08000100 	.word	0x08000100
 8002cc8:	10010000 	.word	0x10010000
 8002ccc:	00010519 	.word	0x00010519

08002cd0 <HAL_CAN_TxCpltCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <CAN_Transmit_IT>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b12      	cmp	r3, #18
 8002d1a:	d107      	bne.n	8002d2c <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8002d2a:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR );
  }

  /* Change CAN state */
  switch(hcan->State)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b52      	cmp	r3, #82	; 0x52
 8002d36:	d008      	beq.n	8002d4a <CAN_Transmit_IT+0x52>
 8002d38:	2b72      	cmp	r3, #114	; 0x72
 8002d3a:	d00b      	beq.n	8002d54 <CAN_Transmit_IT+0x5c>
 8002d3c:	2b42      	cmp	r3, #66	; 0x42
 8002d3e:	d10e      	bne.n	8002d5e <CAN_Transmit_IT+0x66>
  {
    case(HAL_CAN_STATE_BUSY_TX_RX0):
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2222      	movs	r2, #34	; 0x22
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      break;
 8002d48:	e00e      	b.n	8002d68 <CAN_Transmit_IT+0x70>
    case(HAL_CAN_STATE_BUSY_TX_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2232      	movs	r2, #50	; 0x32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      break;
 8002d52:	e009      	b.n	8002d68 <CAN_Transmit_IT+0x70>
    case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2262      	movs	r2, #98	; 0x62
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      break;
 8002d5c:	e004      	b.n	8002d68 <CAN_Transmit_IT+0x70>
    default: /* HAL_CAN_STATE_BUSY_TX */
      hcan->State = HAL_CAN_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      break;
 8002d66:	bf00      	nop
  }

  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffb1 	bl	8002cd0 <HAL_CAN_TxCpltCallback>
  
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <CAN_Receive_IT>:
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	70fb      	strb	r3, [r7, #3]
  CanRxMsgTypeDef* pRxMsg = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <CAN_Receive_IT+0x1e>
  {
    pRxMsg = hcan->pRxMsg;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e002      	b.n	8002d9c <CAN_Receive_IT+0x24>
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	331b      	adds	r3, #27
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0204 	and.w	r2, r3, #4
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	609a      	str	r2, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <CAN_Receive_IT+0x5c>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	331b      	adds	r3, #27
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0d5b      	lsrs	r3, r3, #21
 8002dca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e00b      	b.n	8002dec <CAN_Receive_IT+0x74>
  }
  else
  {
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	331b      	adds	r3, #27
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	08db      	lsrs	r3, r3, #3
 8002de4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
  }
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	331b      	adds	r3, #27
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	f003 0201 	and.w	r2, r3, #1
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	331b      	adds	r3, #27
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	331b      	adds	r3, #27
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	4413      	add	r3, r2
 8002e28:	3304      	adds	r3, #4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	61da      	str	r2, [r3, #28]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	621a      	str	r2, [r3, #32]
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	751a      	strb	r2, [r3, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	755a      	strb	r2, [r3, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	759a      	strb	r2, [r3, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e1b      	lsrs	r3, r3, #24
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	75da      	strb	r2, [r3, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	761a      	strb	r2, [r3, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	765a      	strb	r2, [r3, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	769a      	strb	r2, [r3, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e1b      	lsrs	r3, r3, #24
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	76da      	strb	r2, [r3, #27]

  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d110      	bne.n	8002f1e <CAN_Receive_IT+0x1a6>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0220 	orr.w	r2, r2, #32
 8002f0a:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 020a 	bic.w	r2, r2, #10
 8002f1a:	615a      	str	r2, [r3, #20]
 8002f1c:	e00f      	b.n	8002f3e <CAN_Receive_IT+0x1c6>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0220 	orr.w	r2, r2, #32
 8002f2c:	611a      	str	r2, [r3, #16]
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0250 	bic.w	r2, r2, #80	; 0x50
 8002f3c:	615a      	str	r2, [r3, #20]
  }
  
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b22      	cmp	r3, #34	; 0x22
 8002f48:	d005      	beq.n	8002f56 <CAN_Receive_IT+0x1de>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b32      	cmp	r3, #50	; 0x32
 8002f54:	d107      	bne.n	8002f66 <CAN_Receive_IT+0x1ee>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8002f64:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR );
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11e      	bne.n	8002faa <CAN_Receive_IT+0x232>
  {
    switch(hcan->State)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b62      	cmp	r3, #98	; 0x62
 8002f76:	d008      	beq.n	8002f8a <CAN_Receive_IT+0x212>
 8002f78:	2b72      	cmp	r3, #114	; 0x72
 8002f7a:	d00b      	beq.n	8002f94 <CAN_Receive_IT+0x21c>
 8002f7c:	2b42      	cmp	r3, #66	; 0x42
 8002f7e:	d10e      	bne.n	8002f9e <CAN_Receive_IT+0x226>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2212      	movs	r2, #18
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002f88:	e02d      	b.n	8002fe6 <CAN_Receive_IT+0x26e>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2232      	movs	r2, #50	; 0x32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002f92:	e028      	b.n	8002fe6 <CAN_Receive_IT+0x26e>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2252      	movs	r2, #82	; 0x52
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002f9c:	e023      	b.n	8002fe6 <CAN_Receive_IT+0x26e>
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002fa6:	bf00      	nop
 8002fa8:	e01d      	b.n	8002fe6 <CAN_Receive_IT+0x26e>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b62      	cmp	r3, #98	; 0x62
 8002fb4:	d008      	beq.n	8002fc8 <CAN_Receive_IT+0x250>
 8002fb6:	2b72      	cmp	r3, #114	; 0x72
 8002fb8:	d00b      	beq.n	8002fd2 <CAN_Receive_IT+0x25a>
 8002fba:	2b52      	cmp	r3, #82	; 0x52
 8002fbc:	d10e      	bne.n	8002fdc <CAN_Receive_IT+0x264>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2212      	movs	r2, #18
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002fc6:	e00e      	b.n	8002fe6 <CAN_Receive_IT+0x26e>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2222      	movs	r2, #34	; 0x22
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002fd0:	e009      	b.n	8002fe6 <CAN_Receive_IT+0x26e>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2242      	movs	r2, #66	; 0x42
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002fda:	e004      	b.n	8002fe6 <CAN_Receive_IT+0x26e>
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        break;
 8002fe4:	bf00      	nop
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f007 fe16 	bl	800ac18 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <NVIC_SetPriorityGrouping+0x44>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003014:	4013      	ands	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302a:	4a04      	ldr	r2, [pc, #16]	; (800303c <NVIC_SetPriorityGrouping+0x44>)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	60d3      	str	r3, [r2, #12]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <NVIC_GetPriorityGrouping+0x18>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 0307 	and.w	r3, r3, #7
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <NVIC_EnableIRQ+0x30>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	da0b      	bge.n	80030bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <NVIC_SetPriority+0x4c>)
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	3b04      	subs	r3, #4
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ba:	e009      	b.n	80030d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4907      	ldr	r1, [pc, #28]	; (80030e0 <NVIC_SetPriority+0x50>)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	0112      	lsls	r2, r2, #4
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	440b      	add	r3, r1
 80030cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00
 80030e0:	e000e100 	.word	0xe000e100

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff2d 	bl	8002ff8 <NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff42 	bl	8003040 <NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff35 	bl	800305c <NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa2 	bl	800314c <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e043      	b.n	80032b0 <HAL_DMA_Init+0x9e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800323e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003242:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800324c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f9b6 	bl	80035ec <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}  
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_DMA_Start_IT+0x20>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e04a      	b.n	800336e <HAL_DMA_Start_IT+0xb6>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d13a      	bne.n	8003360 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f93d 	bl	800358e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 020e 	orr.w	r2, r2, #14
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e00f      	b.n	800334e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 020a 	orr.w	r2, r2, #10
 800333c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0204 	bic.w	r2, r2, #4
 800334c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e005      	b.n	800336c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003368:	2302      	movs	r3, #2
 800336a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800336c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
	/* Disable DMA IT */
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 020e 	bic.w	r2, r2, #14
 800338c:	601a      	str	r2, [r3, #0]
	
	/* Disable the channel */
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
	
	/* Clear all flags */
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ac:	605a      	str	r2, [r3, #4]
	
	/* Change the DMA state*/
	hdma->State = HAL_DMA_STATE_READY; 
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	
	/* Process Unlocked */
	__HAL_UNLOCK(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2020 	strb.w	r2, [r3, #32]
	
	return HAL_OK; 
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d005      	beq.n	80033ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2204      	movs	r2, #4
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e027      	b.n	800343e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 020e 	bic.w	r2, r2, #14
 80033fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f202 	lsl.w	r2, r1, r2
 800341c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
    } 
  }
  return status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2204      	movs	r2, #4
 8003466:	409a      	lsls	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d024      	beq.n	80034ba <HAL_DMA_IRQHandler+0x72>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01f      	beq.n	80034ba <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	2104      	movs	r1, #4
 80034a2:	fa01 f202 	lsl.w	r2, r1, r2
 80034a6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d06a      	beq.n	8003586 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80034b8:	e065      	b.n	8003586 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2202      	movs	r2, #2
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02c      	beq.n	8003524 <HAL_DMA_IRQHandler+0xdc>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d027      	beq.n	8003524 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 020a 	bic.w	r2, r2, #10
 80034f0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	2102      	movs	r1, #2
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	2b00      	cmp	r3, #0
 8003518:	d035      	beq.n	8003586 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003522:	e030      	b.n	8003586 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	2208      	movs	r2, #8
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d028      	beq.n	8003586 <HAL_DMA_IRQHandler+0x13e>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d023      	beq.n	8003586 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 020e 	bic.w	r2, r2, #14
 800354c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
    }
  }
}  
 8003584:	e7ff      	b.n	8003586 <HAL_DMA_IRQHandler+0x13e>
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d108      	bne.n	80035ce <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035cc:	e007      	b.n	80035de <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	60da      	str	r2, [r3, #12]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b14      	ldr	r3, [pc, #80]	; (800364c <DMA_CalcBaseAndBitshift+0x60>)
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d80f      	bhi.n	8003620 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <DMA_CalcBaseAndBitshift+0x64>)
 8003608:	4413      	add	r3, r2
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <DMA_CalcBaseAndBitshift+0x68>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	009a      	lsls	r2, r3, #2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0f      	ldr	r2, [pc, #60]	; (8003658 <DMA_CalcBaseAndBitshift+0x6c>)
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800361e:	e00e      	b.n	800363e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <DMA_CalcBaseAndBitshift+0x70>)
 8003628:	4413      	add	r3, r2
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <DMA_CalcBaseAndBitshift+0x68>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <DMA_CalcBaseAndBitshift+0x74>)
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40020407 	.word	0x40020407
 8003650:	bffdfff8 	.word	0xbffdfff8
 8003654:	cccccccd 	.word	0xcccccccd
 8003658:	40020000 	.word	0x40020000
 800365c:	bffdfbf8 	.word	0xbffdfbf8
 8003660:	40020400 	.word	0x40020400

08003664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800367a:	e160      	b.n	800393e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8152 	beq.w	8003938 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x40>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b12      	cmp	r3, #18
 80036a2:	d123      	bne.n	80036ec <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	220f      	movs	r2, #15
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4013      	ands	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	6939      	ldr	r1, [r7, #16]
 80036e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0203 	and.w	r2, r3, #3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d00b      	beq.n	8003740 <HAL_GPIO_Init+0xdc>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d007      	beq.n	8003740 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003734:	2b11      	cmp	r3, #17
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b12      	cmp	r3, #18
 800373e:	d130      	bne.n	80037a2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003776:	2201      	movs	r2, #1
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	f003 0201 	and.w	r2, r3, #1
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	2203      	movs	r2, #3
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80ac 	beq.w	8003938 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e0:	4b5e      	ldr	r3, [pc, #376]	; (800395c <HAL_GPIO_Init+0x2f8>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	4a5d      	ldr	r2, [pc, #372]	; (800395c <HAL_GPIO_Init+0x2f8>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6193      	str	r3, [r2, #24]
 80037ec:	4b5b      	ldr	r3, [pc, #364]	; (800395c <HAL_GPIO_Init+0x2f8>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80037f8:	4a59      	ldr	r2, [pc, #356]	; (8003960 <HAL_GPIO_Init+0x2fc>)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	3302      	adds	r3, #2
 8003800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	220f      	movs	r2, #15
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003822:	d025      	beq.n	8003870 <HAL_GPIO_Init+0x20c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a4f      	ldr	r2, [pc, #316]	; (8003964 <HAL_GPIO_Init+0x300>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d01f      	beq.n	800386c <HAL_GPIO_Init+0x208>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a4e      	ldr	r2, [pc, #312]	; (8003968 <HAL_GPIO_Init+0x304>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d019      	beq.n	8003868 <HAL_GPIO_Init+0x204>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a4d      	ldr	r2, [pc, #308]	; (800396c <HAL_GPIO_Init+0x308>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_GPIO_Init+0x200>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a4c      	ldr	r2, [pc, #304]	; (8003970 <HAL_GPIO_Init+0x30c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00d      	beq.n	8003860 <HAL_GPIO_Init+0x1fc>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <HAL_GPIO_Init+0x310>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d007      	beq.n	800385c <HAL_GPIO_Init+0x1f8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <HAL_GPIO_Init+0x314>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_GPIO_Init+0x1f4>
 8003854:	2306      	movs	r3, #6
 8003856:	e00c      	b.n	8003872 <HAL_GPIO_Init+0x20e>
 8003858:	2307      	movs	r3, #7
 800385a:	e00a      	b.n	8003872 <HAL_GPIO_Init+0x20e>
 800385c:	2305      	movs	r3, #5
 800385e:	e008      	b.n	8003872 <HAL_GPIO_Init+0x20e>
 8003860:	2304      	movs	r3, #4
 8003862:	e006      	b.n	8003872 <HAL_GPIO_Init+0x20e>
 8003864:	2303      	movs	r3, #3
 8003866:	e004      	b.n	8003872 <HAL_GPIO_Init+0x20e>
 8003868:	2302      	movs	r3, #2
 800386a:	e002      	b.n	8003872 <HAL_GPIO_Init+0x20e>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <HAL_GPIO_Init+0x20e>
 8003870:	2300      	movs	r3, #0
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	f002 0203 	and.w	r2, r2, #3
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	4093      	lsls	r3, r2
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003882:	4937      	ldr	r1, [pc, #220]	; (8003960 <HAL_GPIO_Init+0x2fc>)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003890:	4b3a      	ldr	r3, [pc, #232]	; (800397c <HAL_GPIO_Init+0x318>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	43db      	mvns	r3, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038b4:	4a31      	ldr	r2, [pc, #196]	; (800397c <HAL_GPIO_Init+0x318>)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038ba:	4b30      	ldr	r3, [pc, #192]	; (800397c <HAL_GPIO_Init+0x318>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4013      	ands	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038de:	4a27      	ldr	r2, [pc, #156]	; (800397c <HAL_GPIO_Init+0x318>)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038e4:	4b25      	ldr	r3, [pc, #148]	; (800397c <HAL_GPIO_Init+0x318>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003908:	4a1c      	ldr	r2, [pc, #112]	; (800397c <HAL_GPIO_Init+0x318>)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_GPIO_Init+0x318>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	43db      	mvns	r3, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4013      	ands	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003932:	4a12      	ldr	r2, [pc, #72]	; (800397c <HAL_GPIO_Init+0x318>)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	3301      	adds	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	f47f ae97 	bne.w	800367c <HAL_GPIO_Init+0x18>
  }
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	40010000 	.word	0x40010000
 8003964:	48000400 	.word	0x48000400
 8003968:	48000800 	.word	0x48000800
 800396c:	48000c00 	.word	0x48000c00
 8003970:	48001000 	.word	0x48001000
 8003974:	48001400 	.word	0x48001400
 8003978:	48001800 	.word	0x48001800
 800397c:	40010400 	.word	0x40010400

08003980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	807b      	strh	r3, [r7, #2]
 800398c:	4613      	mov	r3, r2
 800398e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003990:	787b      	ldrb	r3, [r7, #1]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003996:	887a      	ldrh	r2, [r7, #2]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800399c:	e002      	b.n	80039a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d006      	beq.n	80039d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039c6:	4a05      	ldr	r2, [pc, #20]	; (80039dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f007 fc0e 	bl	800b1f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40010400 	.word	0x40010400

080039e0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <HAL_PWR_EnterSTOPMode+0x60>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f023 0303 	bic.w	r3, r3, #3
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003a06:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <HAL_PWR_EnterSTOPMode+0x60>)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <HAL_PWR_EnterSTOPMode+0x64>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <HAL_PWR_EnterSTOPMode+0x64>)
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	6113      	str	r3, [r2, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_PWR_EnterSTOPMode+0x42>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003a1e:	bf30      	wfi
 8003a20:	e002      	b.n	8003a28 <HAL_PWR_EnterSTOPMode+0x48>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8003a22:	bf40      	sev
  __ASM volatile ("wfe");
 8003a24:	bf20      	wfe
 8003a26:	bf20      	wfe
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_PWR_EnterSTOPMode+0x64>)
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <HAL_PWR_EnterSTOPMode+0x64>)
 8003a2e:	f023 0304 	bic.w	r3, r3, #4
 8003a32:	6113      	str	r3, [r2, #16]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40007000 	.word	0x40007000
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5a:	1d3b      	adds	r3, r7, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8164 	beq.w	8003d32 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a6a:	4bb0      	ldr	r3, [pc, #704]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d00c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a76:	4bad      	ldr	r3, [pc, #692]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d15a      	bne.n	8003b38 <HAL_RCC_OscConfig+0xf0>
 8003a82:	4baa      	ldr	r3, [pc, #680]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d153      	bne.n	8003b38 <HAL_RCC_OscConfig+0xf0>
 8003a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a94:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003aa4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d102      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x7a>
 8003abc:	4b9b      	ldr	r3, [pc, #620]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0xa6>
 8003ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ada:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ade:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003aea:	4b90      	ldr	r3, [pc, #576]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003af2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003af6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003afa:	fa92 f2a2 	rbit	r2, r2
 8003afe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8003b02:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003b06:	fab2 f282 	clz	r2, r2
 8003b0a:	b252      	sxtb	r2, r2
 8003b0c:	f042 0220 	orr.w	r2, r2, #32
 8003b10:	b252      	sxtb	r2, r2
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	f002 021f 	and.w	r2, r2, #31
 8003b18:	2101      	movs	r1, #1
 8003b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8105 	beq.w	8003d30 <HAL_RCC_OscConfig+0x2e8>
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 80ff 	bne.w	8003d30 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f000 be6b 	b.w	800480e <HAL_RCC_OscConfig+0xdc6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x10a>
 8003b44:	4b79      	ldr	r3, [pc, #484]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a78      	ldr	r2, [pc, #480]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	e030      	b.n	8003bb4 <HAL_RCC_OscConfig+0x16c>
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10c      	bne.n	8003b76 <HAL_RCC_OscConfig+0x12e>
 8003b5c:	4b73      	ldr	r3, [pc, #460]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a72      	ldr	r2, [pc, #456]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6f      	ldr	r2, [pc, #444]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e01e      	b.n	8003bb4 <HAL_RCC_OscConfig+0x16c>
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x154>
 8003b82:	4b6a      	ldr	r3, [pc, #424]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a69      	ldr	r2, [pc, #420]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b67      	ldr	r3, [pc, #412]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a66      	ldr	r2, [pc, #408]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0x16c>
 8003b9c:	4b63      	ldr	r3, [pc, #396]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a62      	ldr	r2, [pc, #392]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b60      	ldr	r3, [pc, #384]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a5f      	ldr	r2, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d05a      	beq.n	8003c74 <HAL_RCC_OscConfig+0x22c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fd f8ad 	bl	8000d1c <HAL_GetTick>
 8003bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x196>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fd f8a8 	bl	8000d1c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b64      	cmp	r3, #100	; 0x64
 8003bd6:	d902      	bls.n	8003bde <HAL_RCC_OscConfig+0x196>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	f000 be18 	b.w	800480e <HAL_RCC_OscConfig+0xdc6>
 8003bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8003bf2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d102      	bne.n	8003c10 <HAL_RCC_OscConfig+0x1c8>
 8003c0a:	4b48      	ldr	r3, [pc, #288]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	e015      	b.n	8003c3c <HAL_RCC_OscConfig+0x1f4>
 8003c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c14:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003c1c:	fa93 f3a3 	rbit	r3, r3
 8003c20:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c28:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c2c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c38:	4b3c      	ldr	r3, [pc, #240]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c40:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003c44:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003c48:	fa92 f2a2 	rbit	r2, r2
 8003c4c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8003c50:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c54:	fab2 f282 	clz	r2, r2
 8003c58:	b252      	sxtb	r2, r2
 8003c5a:	f042 0220 	orr.w	r2, r2, #32
 8003c5e:	b252      	sxtb	r2, r2
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f002 021f 	and.w	r2, r2, #31
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0aa      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x180>
 8003c72:	e05e      	b.n	8003d32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd f852 	bl	8000d1c <HAL_GetTick>
 8003c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x24c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7e:	f7fd f84d 	bl	8000d1c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d902      	bls.n	8003c94 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	f000 bdbd 	b.w	800480e <HAL_RCC_OscConfig+0xdc6>
 8003c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c98:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8003ca8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x27e>
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e015      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2aa>
 8003cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cde:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ce2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_RCC_OscConfig+0x2e4>)
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cf6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003cfa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003cfe:	fa92 f2a2 	rbit	r2, r2
 8003d02:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8003d06:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d0a:	fab2 f282 	clz	r2, r2
 8003d0e:	b252      	sxtb	r2, r2
 8003d10:	f042 0220 	orr.w	r2, r2, #32
 8003d14:	b252      	sxtb	r2, r2
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f002 021f 	and.w	r2, r2, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1aa      	bne.n	8003c7e <HAL_RCC_OscConfig+0x236>
 8003d28:	e003      	b.n	8003d32 <HAL_RCC_OscConfig+0x2ea>
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8171 	beq.w	8004024 <HAL_RCC_OscConfig+0x5dc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d42:	4bd0      	ldr	r3, [pc, #832]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d4e:	4bcd      	ldr	r3, [pc, #820]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d16e      	bne.n	8003e38 <HAL_RCC_OscConfig+0x3f0>
 8003d5a:	4bca      	ldr	r3, [pc, #808]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d66:	d167      	bne.n	8003e38 <HAL_RCC_OscConfig+0x3f0>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8003d7a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	fab3 f383 	clz	r3, r3
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d102      	bne.n	8003d98 <HAL_RCC_OscConfig+0x350>
 8003d92:	4bbc      	ldr	r3, [pc, #752]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	e013      	b.n	8003dc0 <HAL_RCC_OscConfig+0x378>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003daa:	2302      	movs	r3, #2
 8003dac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003db0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003dbc:	4bb1      	ldr	r3, [pc, #708]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003dc6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003dca:	fa92 f2a2 	rbit	r2, r2
 8003dce:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8003dd2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003dd6:	fab2 f282 	clz	r2, r2
 8003dda:	b252      	sxtb	r2, r2
 8003ddc:	f042 0220 	orr.w	r2, r2, #32
 8003de0:	b252      	sxtb	r2, r2
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	f002 021f 	and.w	r2, r2, #31
 8003de8:	2101      	movs	r1, #1
 8003dea:	fa01 f202 	lsl.w	r2, r1, r2
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_RCC_OscConfig+0x3bc>
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d002      	beq.n	8003e04 <HAL_RCC_OscConfig+0x3bc>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f000 bd05 	b.w	800480e <HAL_RCC_OscConfig+0xdc6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e04:	4b9f      	ldr	r3, [pc, #636]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6919      	ldr	r1, [r3, #16]
 8003e12:	23f8      	movs	r3, #248	; 0xf8
 8003e14:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8003e24:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	4994      	ldr	r1, [pc, #592]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	e0f5      	b.n	8004024 <HAL_RCC_OscConfig+0x5dc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8085 	beq.w	8003f4e <HAL_RCC_OscConfig+0x506>
 8003e44:	2301      	movs	r3, #1
 8003e46:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8003e56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fc ff55 	bl	8000d1c <HAL_GetTick>
 8003e72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e78:	f7fc ff50 	bl	8000d1c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d902      	bls.n	8003e8e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	f000 bcc0 	b.w	800480e <HAL_RCC_OscConfig+0xdc6>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8003ea0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d102      	bne.n	8003ebe <HAL_RCC_OscConfig+0x476>
 8003eb8:	4b72      	ldr	r3, [pc, #456]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	e013      	b.n	8003ee6 <HAL_RCC_OscConfig+0x49e>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ec8:	fa93 f3a3 	rbit	r3, r3
 8003ecc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003ed6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003eda:	fa93 f3a3 	rbit	r3, r3
 8003ede:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ee2:	4b68      	ldr	r3, [pc, #416]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003eec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003ef0:	fa92 f2a2 	rbit	r2, r2
 8003ef4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8003ef8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003efc:	fab2 f282 	clz	r2, r2
 8003f00:	b252      	sxtb	r2, r2
 8003f02:	f042 0220 	orr.w	r2, r2, #32
 8003f06:	b252      	sxtb	r2, r2
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f002 021f 	and.w	r2, r2, #31
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0ae      	beq.n	8003e78 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4b5a      	ldr	r3, [pc, #360]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6919      	ldr	r1, [r3, #16]
 8003f28:	23f8      	movs	r3, #248	; 0xf8
 8003f2a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8003f3a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	494f      	ldr	r1, [pc, #316]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e06a      	b.n	8004024 <HAL_RCC_OscConfig+0x5dc>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f58:	fa93 f3a3 	rbit	r3, r3
 8003f5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8003f60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	461a      	mov	r2, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fc fed0 	bl	8000d1c <HAL_GetTick>
 8003f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f80:	e00a      	b.n	8003f98 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fc fecb 	bl	8000d1c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d902      	bls.n	8003f98 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	f000 bc3b 	b.w	800480e <HAL_RCC_OscConfig+0xdc6>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8003faa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d102      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x580>
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	e013      	b.n	8003ff0 <HAL_RCC_OscConfig+0x5a8>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003fda:	2302      	movs	r3, #2
 8003fdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003fe0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <HAL_RCC_OscConfig+0x63c>)
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003ff6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003ffa:	fa92 f2a2 	rbit	r2, r2
 8003ffe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8004002:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004006:	fab2 f282 	clz	r2, r2
 800400a:	b252      	sxtb	r2, r2
 800400c:	f042 0220 	orr.w	r2, r2, #32
 8004010:	b252      	sxtb	r2, r2
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	f002 021f 	and.w	r2, r2, #31
 8004018:	2101      	movs	r1, #1
 800401a:	fa01 f202 	lsl.w	r2, r1, r2
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ae      	bne.n	8003f82 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80d7 	beq.w	80041e2 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d066      	beq.n	800410c <HAL_RCC_OscConfig+0x6c4>
 800403e:	2301      	movs	r3, #1
 8004040:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8004050:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_OscConfig+0x640>)
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	461a      	mov	r2, r3
 8004062:	2301      	movs	r3, #1
 8004064:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7fc fe59 	bl	8000d1c <HAL_GetTick>
 800406a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	e00d      	b.n	800408c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004070:	f7fc fe54 	bl	8000d1c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d905      	bls.n	800408c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e3c4      	b.n	800480e <HAL_RCC_OscConfig+0xdc6>
 8004084:	40021000 	.word	0x40021000
 8004088:	10908120 	.word	0x10908120
 800408c:	2302      	movs	r3, #2
 800408e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800409e:	2302      	movs	r3, #2
 80040a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a8:	fa93 f2a3 	rbit	r2, r3
 80040ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80040b6:	2202      	movs	r2, #2
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f2a3 	rbit	r2, r3
 80040c4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80040c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ca:	4ba5      	ldr	r3, [pc, #660]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80040cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80040d2:	2102      	movs	r1, #2
 80040d4:	6019      	str	r1, [r3, #0]
 80040d6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fa93 f1a3 	rbit	r1, r3
 80040e0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040e4:	6019      	str	r1, [r3, #0]
  return(result);
 80040e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040f6:	b25b      	sxtb	r3, r3
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2101      	movs	r1, #1
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0b2      	beq.n	8004070 <HAL_RCC_OscConfig+0x628>
 800410a:	e06a      	b.n	80041e2 <HAL_RCC_OscConfig+0x79a>
 800410c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	fa93 f2a3 	rbit	r2, r3
 800411e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004122:	601a      	str	r2, [r3, #0]
  return(result);
 8004124:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004128:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	4b8c      	ldr	r3, [pc, #560]	; (8004364 <HAL_RCC_OscConfig+0x91c>)
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	461a      	mov	r2, r3
 8004138:	2300      	movs	r3, #0
 800413a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7fc fdee 	bl	8000d1c <HAL_GetTick>
 8004140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004144:	e009      	b.n	800415a <HAL_RCC_OscConfig+0x712>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004146:	f7fc fde9 	bl	8000d1c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x712>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e359      	b.n	800480e <HAL_RCC_OscConfig+0xdc6>
 800415a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800415e:	2202      	movs	r2, #2
 8004160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	fa93 f2a3 	rbit	r2, r3
 800416c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004176:	2202      	movs	r2, #2
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	fa93 f2a3 	rbit	r2, r3
 8004184:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800418e:	2202      	movs	r2, #2
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a2:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80041a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041aa:	2102      	movs	r1, #2
 80041ac:	6019      	str	r1, [r3, #0]
 80041ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	fa93 f1a3 	rbit	r1, r3
 80041b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041bc:	6019      	str	r1, [r3, #0]
  return(result);
 80041be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	fab3 f383 	clz	r3, r3
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041ce:	b25b      	sxtb	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	2101      	movs	r1, #1
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1b1      	bne.n	8004146 <HAL_RCC_OscConfig+0x6fe>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8159 	beq.w	80044a4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f8:	4b59      	ldr	r3, [pc, #356]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d112      	bne.n	800422a <HAL_RCC_OscConfig+0x7e2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b56      	ldr	r3, [pc, #344]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	4a55      	ldr	r2, [pc, #340]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	61d3      	str	r3, [r2, #28]
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004218:	f107 030c 	add.w	r3, r7, #12
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	4b4f      	ldr	r3, [pc, #316]	; (8004368 <HAL_RCC_OscConfig+0x920>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11a      	bne.n	800426c <HAL_RCC_OscConfig+0x824>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004236:	4b4c      	ldr	r3, [pc, #304]	; (8004368 <HAL_RCC_OscConfig+0x920>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a4b      	ldr	r2, [pc, #300]	; (8004368 <HAL_RCC_OscConfig+0x920>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004242:	f7fc fd6b 	bl	8000d1c <HAL_GetTick>
 8004246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424a:	e009      	b.n	8004260 <HAL_RCC_OscConfig+0x818>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424c:	f7fc fd66 	bl	8000d1c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b64      	cmp	r3, #100	; 0x64
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x818>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e2d6      	b.n	800480e <HAL_RCC_OscConfig+0xdc6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCC_OscConfig+0x920>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ef      	beq.n	800424c <HAL_RCC_OscConfig+0x804>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d106      	bne.n	8004284 <HAL_RCC_OscConfig+0x83c>
 8004276:	4b3a      	ldr	r3, [pc, #232]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4a39      	ldr	r2, [pc, #228]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6213      	str	r3, [r2, #32]
 8004282:	e02f      	b.n	80042e4 <HAL_RCC_OscConfig+0x89c>
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x860>
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4a33      	ldr	r2, [pc, #204]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	6213      	str	r3, [r2, #32]
 800429a:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	4a30      	ldr	r2, [pc, #192]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80042a0:	f023 0304 	bic.w	r3, r3, #4
 80042a4:	6213      	str	r3, [r2, #32]
 80042a6:	e01d      	b.n	80042e4 <HAL_RCC_OscConfig+0x89c>
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x884>
 80042b2:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	4a2a      	ldr	r2, [pc, #168]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	6213      	str	r3, [r2, #32]
 80042be:	4b28      	ldr	r3, [pc, #160]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4a27      	ldr	r2, [pc, #156]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6213      	str	r3, [r2, #32]
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0x89c>
 80042cc:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4a23      	ldr	r2, [pc, #140]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	6213      	str	r3, [r2, #32]
 80042d8:	4b21      	ldr	r3, [pc, #132]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4a20      	ldr	r2, [pc, #128]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 80042de:	f023 0304 	bic.w	r3, r3, #4
 80042e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e4:	1d3b      	adds	r3, r7, #4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d06b      	beq.n	80043c6 <HAL_RCC_OscConfig+0x97e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ee:	f7fc fd15 	bl	8000d1c <HAL_GetTick>
 80042f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0x8c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f8:	f7fc fd10 	bl	8000d1c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x8c8>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e27e      	b.n	800480e <HAL_RCC_OscConfig+0xdc6>
 8004310:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004314:	2202      	movs	r2, #2
 8004316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	fa93 f2a3 	rbit	r2, r3
 8004322:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800432c:	2202      	movs	r2, #2
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	fa93 f2a3 	rbit	r2, r3
 800433a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800433e:	601a      	str	r2, [r3, #0]
  return(result);
 8004340:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004344:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d108      	bne.n	800436c <HAL_RCC_OscConfig+0x924>
 800435a:	4b01      	ldr	r3, [pc, #4]	; (8004360 <HAL_RCC_OscConfig+0x918>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	e013      	b.n	8004388 <HAL_RCC_OscConfig+0x940>
 8004360:	40021000 	.word	0x40021000
 8004364:	10908120 	.word	0x10908120
 8004368:	40007000 	.word	0x40007000
 800436c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004370:	2202      	movs	r2, #2
 8004372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fa93 f2a3 	rbit	r2, r3
 800437e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	4bc0      	ldr	r3, [pc, #768]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800438c:	2102      	movs	r1, #2
 800438e:	6011      	str	r1, [r2, #0]
 8004390:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	fa92 f1a2 	rbit	r1, r2
 800439a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800439e:	6011      	str	r1, [r2, #0]
  return(result);
 80043a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	fab2 f282 	clz	r2, r2
 80043aa:	b252      	sxtb	r2, r2
 80043ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b0:	b252      	sxtb	r2, r2
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	f002 021f 	and.w	r2, r2, #31
 80043b8:	2101      	movs	r1, #1
 80043ba:	fa01 f202 	lsl.w	r2, r1, r2
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d099      	beq.n	80042f8 <HAL_RCC_OscConfig+0x8b0>
 80043c4:	e064      	b.n	8004490 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fc fca9 	bl	8000d1c <HAL_GetTick>
 80043ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0x9a0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fc fca4 	bl	8000d1c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x9a0>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e212      	b.n	800480e <HAL_RCC_OscConfig+0xdc6>
 80043e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043ec:	2202      	movs	r2, #2
 80043ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	fa93 f2a3 	rbit	r2, r3
 80043fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004404:	2202      	movs	r2, #2
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	fa93 f2a3 	rbit	r2, r3
 8004412:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004416:	601a      	str	r2, [r3, #0]
  return(result);
 8004418:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800441c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d102      	bne.n	8004438 <HAL_RCC_OscConfig+0x9f0>
 8004432:	4b95      	ldr	r3, [pc, #596]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	e00d      	b.n	8004454 <HAL_RCC_OscConfig+0xa0c>
 8004438:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800443c:	2202      	movs	r2, #2
 800443e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	fa93 f2a3 	rbit	r2, r3
 800444a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	4b8d      	ldr	r3, [pc, #564]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004458:	2102      	movs	r1, #2
 800445a:	6011      	str	r1, [r2, #0]
 800445c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	fa92 f1a2 	rbit	r1, r2
 8004466:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800446a:	6011      	str	r1, [r2, #0]
  return(result);
 800446c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	fab2 f282 	clz	r2, r2
 8004476:	b252      	sxtb	r2, r2
 8004478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447c:	b252      	sxtb	r2, r2
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	f002 021f 	and.w	r2, r2, #31
 8004484:	2101      	movs	r1, #1
 8004486:	fa01 f202 	lsl.w	r2, r1, r2
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d19f      	bne.n	80043d0 <HAL_RCC_OscConfig+0x988>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004490:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004494:	2b01      	cmp	r3, #1
 8004496:	d105      	bne.n	80044a4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004498:	4b7b      	ldr	r3, [pc, #492]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4a7a      	ldr	r2, [pc, #488]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 800449e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044a4:	1d3b      	adds	r3, r7, #4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 81ae 	beq.w	800480c <HAL_RCC_OscConfig+0xdc4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044b0:	4b75      	ldr	r3, [pc, #468]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	f000 81a5 	beq.w	8004808 <HAL_RCC_OscConfig+0xdc0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	f040 811d 	bne.w	8004704 <HAL_RCC_OscConfig+0xcbc>
 80044ca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80044ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	fa93 f2a3 	rbit	r2, r3
 80044de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044e2:	601a      	str	r2, [r3, #0]
  return(result);
 80044e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80044e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ea:	fab3 f383 	clz	r3, r3
 80044ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	461a      	mov	r2, r3
 80044fa:	2300      	movs	r3, #0
 80044fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fc fc0d 	bl	8000d1c <HAL_GetTick>
 8004502:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004506:	e009      	b.n	800451c <HAL_RCC_OscConfig+0xad4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004508:	f7fc fc08 	bl	8000d1c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0xad4>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e178      	b.n	800480e <HAL_RCC_OscConfig+0xdc6>
 800451c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	fa93 f2a3 	rbit	r2, r3
 8004530:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004534:	601a      	str	r2, [r3, #0]
  return(result);
 8004536:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800453a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d102      	bne.n	8004556 <HAL_RCC_OscConfig+0xb0e>
 8004550:	4b4d      	ldr	r3, [pc, #308]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	e01b      	b.n	800458e <HAL_RCC_OscConfig+0xb46>
 8004556:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800455a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800455e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	fa93 f2a3 	rbit	r2, r3
 800456a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	fa93 f2a3 	rbit	r2, r3
 8004584:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	4b3f      	ldr	r3, [pc, #252]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004592:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004596:	6011      	str	r1, [r2, #0]
 8004598:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	fa92 f1a2 	rbit	r1, r2
 80045a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045a6:	6011      	str	r1, [r2, #0]
  return(result);
 80045a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	fab2 f282 	clz	r2, r2
 80045b2:	b252      	sxtb	r2, r2
 80045b4:	f042 0220 	orr.w	r2, r2, #32
 80045b8:	b252      	sxtb	r2, r2
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	f002 021f 	and.w	r2, r2, #31
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f202 	lsl.w	r2, r1, r2
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d19d      	bne.n	8004508 <HAL_RCC_OscConfig+0xac0>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045cc:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f023 020f 	bic.w	r2, r3, #15
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	492b      	ldr	r1, [pc, #172]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	62cb      	str	r3, [r1, #44]	; 0x2c
 80045e0:	4b29      	ldr	r3, [pc, #164]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80045e8:	1d3b      	adds	r3, r7, #4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6a19      	ldr	r1, [r3, #32]
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	430b      	orrs	r3, r1
 80045f6:	4924      	ldr	r1, [pc, #144]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
 80045fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	fa93 f2a3 	rbit	r2, r3
 8004610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004614:	601a      	str	r2, [r3, #0]
  return(result);
 8004616:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800461a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800461c:	fab3 f383 	clz	r3, r3
 8004620:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004624:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	461a      	mov	r2, r3
 800462c:	2301      	movs	r3, #1
 800462e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fc fb74 	bl	8000d1c <HAL_GetTick>
 8004634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004638:	e009      	b.n	800464e <HAL_RCC_OscConfig+0xc06>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463a:	f7fc fb6f 	bl	8000d1c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0xc06>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e0df      	b.n	800480e <HAL_RCC_OscConfig+0xdc6>
 800464e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	fa93 f2a3 	rbit	r2, r3
 8004662:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004666:	601a      	str	r2, [r3, #0]
  return(result);
 8004668:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800466c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d104      	bne.n	800468c <HAL_RCC_OscConfig+0xc44>
 8004682:	4b01      	ldr	r3, [pc, #4]	; (8004688 <HAL_RCC_OscConfig+0xc40>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	e01d      	b.n	80046c4 <HAL_RCC_OscConfig+0xc7c>
 8004688:	40021000 	.word	0x40021000
 800468c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	fa93 f2a3 	rbit	r2, r3
 80046a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	fa93 f2a3 	rbit	r2, r3
 80046ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	4b55      	ldr	r3, [pc, #340]	; (8004818 <HAL_RCC_OscConfig+0xdd0>)
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80046c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046cc:	6011      	str	r1, [r2, #0]
 80046ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	fa92 f1a2 	rbit	r1, r2
 80046d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046dc:	6011      	str	r1, [r2, #0]
  return(result);
 80046de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	fab2 f282 	clz	r2, r2
 80046e8:	b252      	sxtb	r2, r2
 80046ea:	f042 0220 	orr.w	r2, r2, #32
 80046ee:	b252      	sxtb	r2, r2
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	f002 021f 	and.w	r2, r2, #31
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d09b      	beq.n	800463a <HAL_RCC_OscConfig+0xbf2>
 8004702:	e083      	b.n	800480c <HAL_RCC_OscConfig+0xdc4>
 8004704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800470c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	fa93 f2a3 	rbit	r2, r3
 8004718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800471c:	601a      	str	r2, [r3, #0]
  return(result);
 800471e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004722:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004724:	fab3 f383 	clz	r3, r3
 8004728:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800472c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	461a      	mov	r2, r3
 8004734:	2300      	movs	r3, #0
 8004736:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fc faf0 	bl	8000d1c <HAL_GetTick>
 800473c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004740:	e009      	b.n	8004756 <HAL_RCC_OscConfig+0xd0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004742:	f7fc faeb 	bl	8000d1c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0xd0e>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e05b      	b.n	800480e <HAL_RCC_OscConfig+0xdc6>
 8004756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800475a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800475e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	fa93 f2a3 	rbit	r2, r3
 800476a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800476e:	601a      	str	r2, [r3, #0]
  return(result);
 8004770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d102      	bne.n	8004790 <HAL_RCC_OscConfig+0xd48>
 800478a:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_RCC_OscConfig+0xdd0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	e01b      	b.n	80047c8 <HAL_RCC_OscConfig+0xd80>
 8004790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	fa93 f2a3 	rbit	r2, r3
 80047a4:	f107 0320 	add.w	r3, r7, #32
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	f107 031c 	add.w	r3, r7, #28
 80047ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	f107 031c 	add.w	r3, r7, #28
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	fa93 f2a3 	rbit	r2, r3
 80047be:	f107 0318 	add.w	r3, r7, #24
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	4b14      	ldr	r3, [pc, #80]	; (8004818 <HAL_RCC_OscConfig+0xdd0>)
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f107 0214 	add.w	r2, r7, #20
 80047cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	f107 0214 	add.w	r2, r7, #20
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	fa92 f1a2 	rbit	r1, r2
 80047dc:	f107 0210 	add.w	r2, r7, #16
 80047e0:	6011      	str	r1, [r2, #0]
  return(result);
 80047e2:	f107 0210 	add.w	r2, r7, #16
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	fab2 f282 	clz	r2, r2
 80047ec:	b252      	sxtb	r2, r2
 80047ee:	f042 0220 	orr.w	r2, r2, #32
 80047f2:	b252      	sxtb	r2, r2
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	f002 021f 	and.w	r2, r2, #31
 80047fa:	2101      	movs	r1, #1
 80047fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004800:	4013      	ands	r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d19d      	bne.n	8004742 <HAL_RCC_OscConfig+0xcfa>
 8004806:	e001      	b.n	800480c <HAL_RCC_OscConfig+0xdc4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0xdc6>
    }
  }
  
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000

0800481c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b09e      	sub	sp, #120	; 0x78
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800482a:	4ba7      	ldr	r3, [pc, #668]	; (8004ac8 <HAL_RCC_ClockConfig+0x2ac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d910      	bls.n	800485a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004838:	4ba3      	ldr	r3, [pc, #652]	; (8004ac8 <HAL_RCC_ClockConfig+0x2ac>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f023 0207 	bic.w	r2, r3, #7
 8004840:	49a1      	ldr	r1, [pc, #644]	; (8004ac8 <HAL_RCC_ClockConfig+0x2ac>)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	4313      	orrs	r3, r2
 8004846:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004848:	4b9f      	ldr	r3, [pc, #636]	; (8004ac8 <HAL_RCC_ClockConfig+0x2ac>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d001      	beq.n	800485a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e175      	b.n	8004b46 <HAL_RCC_ClockConfig+0x32a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004866:	4b99      	ldr	r3, [pc, #612]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4996      	ldr	r1, [pc, #600]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8109 	beq.w	8004a98 <HAL_RCC_ClockConfig+0x27c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d13d      	bne.n	800490a <HAL_RCC_ClockConfig+0xee>
 800488e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004892:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800489c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d102      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x9c>
 80048b2:	4b86      	ldr	r3, [pc, #536]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	e00f      	b.n	80048d8 <HAL_RCC_ClockConfig+0xbc>
 80048b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	667b      	str	r3, [r7, #100]	; 0x64
 80048c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ca:	663b      	str	r3, [r7, #96]	; 0x60
 80048cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d4:	4b7d      	ldr	r3, [pc, #500]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80048de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048e0:	fa92 f2a2 	rbit	r2, r2
 80048e4:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80048e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048e8:	fab2 f282 	clz	r2, r2
 80048ec:	b252      	sxtb	r2, r2
 80048ee:	f042 0220 	orr.w	r2, r2, #32
 80048f2:	b252      	sxtb	r2, r2
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	f002 021f 	and.w	r2, r2, #31
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d17d      	bne.n	8004a02 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e11d      	b.n	8004b46 <HAL_RCC_ClockConfig+0x32a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d13d      	bne.n	800498e <HAL_RCC_ClockConfig+0x172>
 8004912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004916:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8004920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_RCC_ClockConfig+0x120>
 8004936:	4b65      	ldr	r3, [pc, #404]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	e00f      	b.n	800495c <HAL_RCC_ClockConfig+0x140>
 800493c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004940:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
 800494a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
 8004950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004958:	4b5c      	ldr	r3, [pc, #368]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004960:	63ba      	str	r2, [r7, #56]	; 0x38
 8004962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004964:	fa92 f2a2 	rbit	r2, r2
 8004968:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 800496a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496c:	fab2 f282 	clz	r2, r2
 8004970:	b252      	sxtb	r2, r2
 8004972:	f042 0220 	orr.w	r2, r2, #32
 8004976:	b252      	sxtb	r2, r2
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	f002 021f 	and.w	r2, r2, #31
 800497e:	2101      	movs	r1, #1
 8004980:	fa01 f202 	lsl.w	r2, r1, r2
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d13b      	bne.n	8004a02 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e0db      	b.n	8004b46 <HAL_RCC_ClockConfig+0x32a>
 800498e:	2302      	movs	r3, #2
 8004990:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d102      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x19a>
 80049b0:	4b46      	ldr	r3, [pc, #280]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	e00d      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1b6>
 80049b6:	2302      	movs	r3, #2
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	2302      	movs	r3, #2
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2202      	movs	r2, #2
 80049d4:	61ba      	str	r2, [r7, #24]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	fa92 f2a2 	rbit	r2, r2
 80049dc:	617a      	str	r2, [r7, #20]
  return(result);
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	fab2 f282 	clz	r2, r2
 80049e4:	b252      	sxtb	r2, r2
 80049e6:	f042 0220 	orr.w	r2, r2, #32
 80049ea:	b252      	sxtb	r2, r2
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	f002 021f 	and.w	r2, r2, #31
 80049f2:	2101      	movs	r1, #1
 80049f4:	fa01 f202 	lsl.w	r2, r1, r2
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e0a1      	b.n	8004b46 <HAL_RCC_ClockConfig+0x32a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a02:	4b32      	ldr	r3, [pc, #200]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f023 0203 	bic.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	492f      	ldr	r1, [pc, #188]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a14:	f7fc f982 	bl	8000d1c <HAL_GetTick>
 8004a18:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d112      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a24:	f7fc f97a 	bl	8000d1c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e085      	b.n	8004b46 <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a3a:	4b24      	ldr	r3, [pc, #144]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d1ee      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x208>
 8004a46:	e027      	b.n	8004a98 <HAL_RCC_ClockConfig+0x27c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d11d      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x270>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a52:	f7fc f963 	bl	8000d1c <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e06e      	b.n	8004b46 <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a68:	4b18      	ldr	r3, [pc, #96]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d1ee      	bne.n	8004a52 <HAL_RCC_ClockConfig+0x236>
 8004a74:	e010      	b.n	8004a98 <HAL_RCC_ClockConfig+0x27c>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a76:	f7fc f951 	bl	8000d1c <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e05c      	b.n	8004b46 <HAL_RCC_ClockConfig+0x32a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <HAL_RCC_ClockConfig+0x2b0>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1ee      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_ClockConfig+0x2ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d214      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <HAL_RCC_ClockConfig+0x2ac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 0207 	bic.w	r2, r3, #7
 8004aae:	4906      	ldr	r1, [pc, #24]	; (8004ac8 <HAL_RCC_ClockConfig+0x2ac>)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ab6:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <HAL_RCC_ClockConfig+0x2ac>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e03e      	b.n	8004b46 <HAL_RCC_ClockConfig+0x32a>
 8004ac8:	40022000 	.word	0x40022000
 8004acc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004adc:	4b1c      	ldr	r3, [pc, #112]	; (8004b50 <HAL_RCC_ClockConfig+0x334>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4919      	ldr	r1, [pc, #100]	; (8004b50 <HAL_RCC_ClockConfig+0x334>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <HAL_RCC_ClockConfig+0x334>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4911      	ldr	r1, [pc, #68]	; (8004b50 <HAL_RCC_ClockConfig+0x334>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b0e:	f000 f825 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004b12:	4601      	mov	r1, r0
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_RCC_ClockConfig+0x334>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b1c:	23f0      	movs	r3, #240	; 0xf0
 8004b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	fab3 f383 	clz	r3, r3
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <HAL_RCC_ClockConfig+0x338>)
 8004b34:	5cd3      	ldrb	r3, [r2, r3]
 8004b36:	fa21 f303 	lsr.w	r3, r1, r3
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <HAL_RCC_ClockConfig+0x33c>)
 8004b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f7fc f8a8 	bl	8000c94 <HAL_InitTick>
  
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3778      	adds	r7, #120	; 0x78
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	0800dd94 	.word	0x0800dd94
 8004b58:	200000b8 	.word	0x200000b8

08004b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b08b      	sub	sp, #44	; 0x2c
 8004b60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	2300      	movs	r3, #0
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004b76:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d002      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x30>
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x36>
 8004b8a:	e03f      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004b8e:	623b      	str	r3, [r7, #32]
      break;
 8004b90:	e03f      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b98:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004b9c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	607b      	str	r3, [r7, #4]
  return(result);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	fab3 f383 	clz	r3, r3
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bb2:	5cd3      	ldrb	r3, [r2, r3]
 8004bb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	f003 020f 	and.w	r2, r3, #15
 8004bbe:	230f      	movs	r3, #15
 8004bc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	fa93 f3a3 	rbit	r3, r3
 8004bc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	fab3 f383 	clz	r3, r3
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004be4:	4a0f      	ldr	r2, [pc, #60]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf4:	e007      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8004bf6:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	623b      	str	r3, [r7, #32]
      break;
 8004c0a:	e002      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c0e:	623b      	str	r3, [r7, #32]
      break;
 8004c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	372c      	adds	r7, #44	; 0x2c
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40021000 	.word	0x40021000
 8004c24:	007a1200 	.word	0x007a1200
 8004c28:	0800dd74 	.word	0x0800dd74
 8004c2c:	0800dd84 	.word	0x0800dd84

08004c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	200000b8 	.word	0x200000b8

08004c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004c4e:	f7ff ffef 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c52:	4601      	mov	r1, r0
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c5c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004c60:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	fa93 f3a3 	rbit	r3, r3
 8004c68:	603b      	str	r3, [r7, #0]
  return(result);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	fab3 f383 	clz	r3, r3
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
 8004c74:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c76:	5cd3      	ldrb	r3, [r2, r3]
 8004c78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000
 8004c88:	0800dda4 	.word	0x0800dda4

08004c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c92:	f7ff ffcd 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c96:	4601      	mov	r1, r0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8004ca0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004ca4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	fa93 f3a3 	rbit	r3, r3
 8004cac:	603b      	str	r3, [r7, #0]
  return(result);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	fab3 f383 	clz	r3, r3
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb8:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x40>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	0800dda4 	.word	0x0800dda4

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b092      	sub	sp, #72	; 0x48
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80d6 	beq.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf4:	4b4d      	ldr	r3, [pc, #308]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10e      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	4b4a      	ldr	r3, [pc, #296]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4a49      	ldr	r2, [pc, #292]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	61d3      	str	r3, [r2, #28]
 8004d0c:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b44      	ldr	r3, [pc, #272]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2a:	4b41      	ldr	r3, [pc, #260]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a40      	ldr	r2, [pc, #256]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d36:	f7fb fff1 	bl	8000d1c <HAL_GetTick>
 8004d3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	e008      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fb ffed 	bl	8000d1c <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e1d4      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d5c:	4b33      	ldr	r3, [pc, #204]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 8083 	beq.w	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d07b      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d7c:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	fa93 f3a3 	rbit	r3, r3
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d96:	fab3 f383 	clz	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b25      	ldr	r3, [pc, #148]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	461a      	mov	r2, r3
 8004da4:	2301      	movs	r3, #1
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db8:	fab3 f383 	clz	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dca:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d04c      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dda:	f7fb ff9f 	bl	8000d1c <HAL_GetTick>
 8004dde:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fb ff9b 	bl	8000d1c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e180      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
 8004e04:	2302      	movs	r3, #2
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	fa93 f3a3 	rbit	r3, r3
 8004e0e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e12:	fab3 f383 	clz	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d108      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004e26:	4b01      	ldr	r3, [pc, #4]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	e00d      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40007000 	.word	0x40007000
 8004e34:	10908100 	.word	0x10908100
 8004e38:	2302      	movs	r3, #2
 8004e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	4b9c      	ldr	r3, [pc, #624]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	2202      	movs	r2, #2
 8004e4a:	613a      	str	r2, [r7, #16]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	fa92 f2a2 	rbit	r2, r2
 8004e52:	60fa      	str	r2, [r7, #12]
  return(result);
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	fab2 f282 	clz	r2, r2
 8004e5a:	b252      	sxtb	r2, r2
 8004e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e60:	b252      	sxtb	r2, r2
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	f002 021f 	and.w	r2, r2, #31
 8004e68:	2101      	movs	r1, #1
 8004e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0b6      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e74:	4b90      	ldr	r3, [pc, #576]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	498d      	ldr	r1, [pc, #564]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d105      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e8e:	4b8a      	ldr	r3, [pc, #552]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	4a89      	ldr	r2, [pc, #548]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e98:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ea6:	4b84      	ldr	r3, [pc, #528]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	f023 0203 	bic.w	r2, r3, #3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	4981      	ldr	r1, [pc, #516]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec4:	4b7c      	ldr	r3, [pc, #496]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4979      	ldr	r1, [pc, #484]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee2:	4b75      	ldr	r3, [pc, #468]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	4972      	ldr	r1, [pc, #456]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f00:	4b6d      	ldr	r3, [pc, #436]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	f023 0210 	bic.w	r2, r3, #16
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	496a      	ldr	r1, [pc, #424]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004f1e:	4b66      	ldr	r3, [pc, #408]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	4963      	ldr	r1, [pc, #396]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f3c:	4b5e      	ldr	r3, [pc, #376]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	f023 0220 	bic.w	r2, r3, #32
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	495b      	ldr	r1, [pc, #364]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f5a:	4b57      	ldr	r3, [pc, #348]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	4954      	ldr	r1, [pc, #336]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f78:	4b4f      	ldr	r3, [pc, #316]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	494c      	ldr	r1, [pc, #304]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f96:	4b48      	ldr	r3, [pc, #288]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	4945      	ldr	r1, [pc, #276]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fb4:	4b40      	ldr	r3, [pc, #256]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	493d      	ldr	r1, [pc, #244]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fd2:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	4936      	ldr	r1, [pc, #216]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ff0:	4b31      	ldr	r3, [pc, #196]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	492e      	ldr	r1, [pc, #184]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d008      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800500e:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	4927      	ldr	r1, [pc, #156]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800501c:	4313      	orrs	r3, r2
 800501e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800502c:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	491f      	ldr	r1, [pc, #124]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800503a:	4313      	orrs	r3, r2
 800503c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d008      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800504a:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	4918      	ldr	r1, [pc, #96]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005058:	4313      	orrs	r3, r2
 800505a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	4910      	ldr	r1, [pc, #64]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005076:	4313      	orrs	r3, r2
 8005078:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	4909      	ldr	r1, [pc, #36]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005094:	4313      	orrs	r3, r2
 8005096:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b0:	4901      	ldr	r1, [pc, #4]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	630b      	str	r3, [r1, #48]	; 0x30
 80050b6:	e001      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80050b8:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80050c8:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d4:	490b      	ldr	r1, [pc, #44]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f2:	4904      	ldr	r1, [pc, #16]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3748      	adds	r7, #72	; 0x48
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40021000 	.word	0x40021000

08005108 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e01d      	b.n	8005156 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f006 fad6 	bl	800b6e0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f000 fb48 	bl	80057dc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e01d      	b.n	80051e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f815 	bl	80051ea <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f000 fb02 	bl	80057dc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2201      	movs	r2, #1
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fe73 	bl	8005efe <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <HAL_TIM_PWM_Start+0x88>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIM_PWM_Start+0x54>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a19      	ldr	r2, [pc, #100]	; (800528c <HAL_TIM_PWM_Start+0x8c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_TIM_PWM_Start+0x54>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a17      	ldr	r2, [pc, #92]	; (8005290 <HAL_TIM_PWM_Start+0x90>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIM_PWM_Start+0x54>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a16      	ldr	r2, [pc, #88]	; (8005294 <HAL_TIM_PWM_Start+0x94>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIM_PWM_Start+0x54>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a14      	ldr	r2, [pc, #80]	; (8005298 <HAL_TIM_PWM_Start+0x98>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIM_PWM_Start+0x54>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a13      	ldr	r2, [pc, #76]	; (800529c <HAL_TIM_PWM_Start+0x9c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_TIM_PWM_Start+0x58>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_TIM_PWM_Start+0x5a>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800526c:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f042 0201 	orr.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
} 
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40013400 	.word	0x40013400
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800
 800529c:	40015000 	.word	0x40015000

080052a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{   
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fe23 	bl	8005efe <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2c      	ldr	r2, [pc, #176]	; (8005370 <HAL_TIM_PWM_Stop+0xd0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d018      	beq.n	80052f4 <HAL_TIM_PWM_Stop+0x54>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2b      	ldr	r2, [pc, #172]	; (8005374 <HAL_TIM_PWM_Stop+0xd4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <HAL_TIM_PWM_Stop+0x54>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a29      	ldr	r2, [pc, #164]	; (8005378 <HAL_TIM_PWM_Stop+0xd8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00e      	beq.n	80052f4 <HAL_TIM_PWM_Stop+0x54>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a28      	ldr	r2, [pc, #160]	; (800537c <HAL_TIM_PWM_Stop+0xdc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d009      	beq.n	80052f4 <HAL_TIM_PWM_Stop+0x54>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a26      	ldr	r2, [pc, #152]	; (8005380 <HAL_TIM_PWM_Stop+0xe0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d004      	beq.n	80052f4 <HAL_TIM_PWM_Stop+0x54>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a25      	ldr	r2, [pc, #148]	; (8005384 <HAL_TIM_PWM_Stop+0xe4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d101      	bne.n	80052f8 <HAL_TIM_PWM_Stop+0x58>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <HAL_TIM_PWM_Stop+0x5a>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d017      	beq.n	800532e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a1a      	ldr	r2, [r3, #32]
 8005304:	f241 1311 	movw	r3, #4369	; 0x1111
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10f      	bne.n	800532e <HAL_TIM_PWM_Stop+0x8e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	f240 4344 	movw	r3, #1092	; 0x444
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d107      	bne.n	800532e <HAL_TIM_PWM_Stop+0x8e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800532c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a1a      	ldr	r2, [r3, #32]
 8005334:	f241 1311 	movw	r3, #4369	; 0x1111
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <HAL_TIM_PWM_Stop+0xbe>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	f240 4344 	movw	r3, #1092	; 0x444
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d107      	bne.n	800535e <HAL_TIM_PWM_Stop+0xbe>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
} 
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40013400 	.word	0x40013400
 8005378:	40014000 	.word	0x40014000
 800537c:	40014400 	.word	0x40014400
 8005380:	40014800 	.word	0x40014800
 8005384:	40015000 	.word	0x40015000

08005388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b02      	cmp	r3, #2
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0202 	mvn.w	r2, #2
 80053b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9e7 	bl	800579e <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f9d9 	bl	800578a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f9ea 	bl	80057b2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0204 	mvn.w	r2, #4
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f9bd 	bl	800579e <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f9af 	bl	800578a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f9c0 	bl	80057b2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b08      	cmp	r3, #8
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b08      	cmp	r3, #8
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0208 	mvn.w	r2, #8
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2204      	movs	r2, #4
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f993 	bl	800579e <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f985 	bl	800578a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f996 	bl	80057b2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b10      	cmp	r3, #16
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0210 	mvn.w	r2, #16
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2208      	movs	r2, #8
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f969 	bl	800579e <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f95b 	bl	800578a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f96c 	bl	80057b2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d10e      	bne.n	800550c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d107      	bne.n	800550c <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0201 	mvn.w	r2, #1
 8005504:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f005 fc4a 	bl	800ada0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005516:	2b80      	cmp	r3, #128	; 0x80
 8005518:	d10e      	bne.n	8005538 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005524:	2b80      	cmp	r3, #128	; 0x80
 8005526:	d107      	bne.n	8005538 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005530:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 ff10 	bl	8006358 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d10e      	bne.n	8005566 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b80      	cmp	r3, #128	; 0x80
 8005554:	d107      	bne.n	8005566 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800555e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 ff03 	bl	800636c <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d10e      	bne.n	8005592 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d107      	bne.n	8005592 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800558a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f91a 	bl	80057c6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b20      	cmp	r3, #32
 800559e:	d10e      	bne.n	80055be <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d107      	bne.n	80055be <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f06f 0220 	mvn.w	r2, #32
 80055b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fec3 	bl	8006344 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_ConfigClockSource+0x1c>
 80055de:	2302      	movs	r3, #2
 80055e0:	e0cf      	b.n	8005782 <HAL_TIM_ConfigClockSource+0x1bc>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005600:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005604:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800560c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d07c      	beq.n	8005718 <HAL_TIM_ConfigClockSource+0x152>
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d80f      	bhi.n	8005642 <HAL_TIM_ConfigClockSource+0x7c>
 8005622:	2b10      	cmp	r3, #16
 8005624:	f000 808f 	beq.w	8005746 <HAL_TIM_ConfigClockSource+0x180>
 8005628:	2b10      	cmp	r3, #16
 800562a:	d803      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x6e>
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8083 	beq.w	8005738 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8005632:	e09d      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8005634:	2b20      	cmp	r3, #32
 8005636:	f000 808d 	beq.w	8005754 <HAL_TIM_ConfigClockSource+0x18e>
 800563a:	2b30      	cmp	r3, #48	; 0x30
 800563c:	f000 8091 	beq.w	8005762 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8005640:	e096      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8005642:	2b70      	cmp	r3, #112	; 0x70
 8005644:	d018      	beq.n	8005678 <HAL_TIM_ConfigClockSource+0xb2>
 8005646:	2b70      	cmp	r3, #112	; 0x70
 8005648:	d804      	bhi.n	8005654 <HAL_TIM_ConfigClockSource+0x8e>
 800564a:	2b50      	cmp	r3, #80	; 0x50
 800564c:	d044      	beq.n	80056d8 <HAL_TIM_ConfigClockSource+0x112>
 800564e:	2b60      	cmp	r3, #96	; 0x60
 8005650:	d052      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8005652:	e08d      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005658:	d003      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x9c>
 800565a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565e:	d028      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8005660:	e086      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005670:	f023 0307 	bic.w	r3, r3, #7
 8005674:	6093      	str	r3, [r2, #8]
    break;
 8005676:	e07b      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6899      	ldr	r1, [r3, #8]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f000 fc17 	bl	8005eba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800569e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	609a      	str	r2, [r3, #8]
    break;
 80056b0:	e05e      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6899      	ldr	r1, [r3, #8]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f000 fbfa 	bl	8005eba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056d4:	609a      	str	r2, [r3, #8]
    break;
 80056d6:	e04b      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f000 fb61 	bl	8005dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2150      	movs	r1, #80	; 0x50
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fbc2 	bl	8005e7a <TIM_ITRx_SetConfig>
    break;
 80056f6:	e03b      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	6859      	ldr	r1, [r3, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	461a      	mov	r2, r3
 8005706:	f000 fb84 	bl	8005e12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2160      	movs	r1, #96	; 0x60
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fbb2 	bl	8005e7a <TIM_ITRx_SetConfig>
    break;
 8005716:	e02b      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	6859      	ldr	r1, [r3, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	461a      	mov	r2, r3
 8005726:	f000 fb41 	bl	8005dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2140      	movs	r1, #64	; 0x40
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fba2 	bl	8005e7a <TIM_ITRx_SetConfig>
    break;
 8005736:	e01b      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fb9b 	bl	8005e7a <TIM_ITRx_SetConfig>
    break;
 8005744:	e014      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2110      	movs	r1, #16
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fb94 	bl	8005e7a <TIM_ITRx_SetConfig>
    break;
 8005752:	e00d      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2120      	movs	r1, #32
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fb8d 	bl	8005e7a <TIM_ITRx_SetConfig>
    break;
 8005760:	e006      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2130      	movs	r1, #48	; 0x30
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fb86 	bl	8005e7a <TIM_ITRx_SetConfig>
    break;
 800576e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a6:	bf00      	nop
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a42      	ldr	r2, [pc, #264]	; (80058fc <TIM_Base_SetConfig+0x120>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <TIM_Base_SetConfig+0x44>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fe:	d00f      	beq.n	8005820 <TIM_Base_SetConfig+0x44>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a3f      	ldr	r2, [pc, #252]	; (8005900 <TIM_Base_SetConfig+0x124>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00b      	beq.n	8005820 <TIM_Base_SetConfig+0x44>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a3e      	ldr	r2, [pc, #248]	; (8005904 <TIM_Base_SetConfig+0x128>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d007      	beq.n	8005820 <TIM_Base_SetConfig+0x44>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a3d      	ldr	r2, [pc, #244]	; (8005908 <TIM_Base_SetConfig+0x12c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_Base_SetConfig+0x44>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a3c      	ldr	r2, [pc, #240]	; (800590c <TIM_Base_SetConfig+0x130>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d108      	bne.n	8005832 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a31      	ldr	r2, [pc, #196]	; (80058fc <TIM_Base_SetConfig+0x120>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01f      	beq.n	800587a <TIM_Base_SetConfig+0x9e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005840:	d01b      	beq.n	800587a <TIM_Base_SetConfig+0x9e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2e      	ldr	r2, [pc, #184]	; (8005900 <TIM_Base_SetConfig+0x124>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d017      	beq.n	800587a <TIM_Base_SetConfig+0x9e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <TIM_Base_SetConfig+0x128>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <TIM_Base_SetConfig+0x9e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <TIM_Base_SetConfig+0x12c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00f      	beq.n	800587a <TIM_Base_SetConfig+0x9e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <TIM_Base_SetConfig+0x134>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_Base_SetConfig+0x9e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a2b      	ldr	r2, [pc, #172]	; (8005914 <TIM_Base_SetConfig+0x138>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <TIM_Base_SetConfig+0x9e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <TIM_Base_SetConfig+0x13c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_Base_SetConfig+0x9e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <TIM_Base_SetConfig+0x130>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a12      	ldr	r2, [pc, #72]	; (80058fc <TIM_Base_SetConfig+0x120>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <TIM_Base_SetConfig+0x104>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a13      	ldr	r2, [pc, #76]	; (8005908 <TIM_Base_SetConfig+0x12c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00f      	beq.n	80058e0 <TIM_Base_SetConfig+0x104>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a13      	ldr	r2, [pc, #76]	; (8005910 <TIM_Base_SetConfig+0x134>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_Base_SetConfig+0x104>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a12      	ldr	r2, [pc, #72]	; (8005914 <TIM_Base_SetConfig+0x138>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_Base_SetConfig+0x104>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a11      	ldr	r2, [pc, #68]	; (8005918 <TIM_Base_SetConfig+0x13c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0x104>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a0c      	ldr	r2, [pc, #48]	; (800590c <TIM_Base_SetConfig+0x130>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d103      	bne.n	80058e8 <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	615a      	str	r2, [r3, #20]
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40013400 	.word	0x40013400
 800590c:	40015000 	.word	0x40015000
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800

0800591c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f023 0302 	bic.w	r3, r3, #2
 8005974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a30      	ldr	r2, [pc, #192]	; (8005a44 <TIM_OC1_SetConfig+0x128>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <TIM_OC1_SetConfig+0x94>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2f      	ldr	r2, [pc, #188]	; (8005a48 <TIM_OC1_SetConfig+0x12c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00f      	beq.n	80059b0 <TIM_OC1_SetConfig+0x94>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2e      	ldr	r2, [pc, #184]	; (8005a4c <TIM_OC1_SetConfig+0x130>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00b      	beq.n	80059b0 <TIM_OC1_SetConfig+0x94>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a2d      	ldr	r2, [pc, #180]	; (8005a50 <TIM_OC1_SetConfig+0x134>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d007      	beq.n	80059b0 <TIM_OC1_SetConfig+0x94>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a2c      	ldr	r2, [pc, #176]	; (8005a54 <TIM_OC1_SetConfig+0x138>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_OC1_SetConfig+0x94>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a2b      	ldr	r2, [pc, #172]	; (8005a58 <TIM_OC1_SetConfig+0x13c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10c      	bne.n	80059ca <TIM_OC1_SetConfig+0xae>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0308 	bic.w	r3, r3, #8
 80059b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 0304 	bic.w	r3, r3, #4
 80059c8:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <TIM_OC1_SetConfig+0x128>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <TIM_OC1_SetConfig+0xde>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <TIM_OC1_SetConfig+0x12c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00f      	beq.n	80059fa <TIM_OC1_SetConfig+0xde>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <TIM_OC1_SetConfig+0x130>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00b      	beq.n	80059fa <TIM_OC1_SetConfig+0xde>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1a      	ldr	r2, [pc, #104]	; (8005a50 <TIM_OC1_SetConfig+0x134>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d007      	beq.n	80059fa <TIM_OC1_SetConfig+0xde>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <TIM_OC1_SetConfig+0x138>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_OC1_SetConfig+0xde>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <TIM_OC1_SetConfig+0x13c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d111      	bne.n	8005a1e <TIM_OC1_SetConfig+0x102>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
} 
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40013400 	.word	0x40013400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800
 8005a58:	40015000 	.word	0x40015000

08005a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8005a6e:	2300      	movs	r3, #0
 8005a70:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f023 0210 	bic.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa2:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0320 	bic.w	r3, r3, #32
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a2c      	ldr	r2, [pc, #176]	; (8005b78 <TIM_OC2_SetConfig+0x11c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <TIM_OC2_SetConfig+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a2b      	ldr	r2, [pc, #172]	; (8005b7c <TIM_OC2_SetConfig+0x120>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_OC2_SetConfig+0x80>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <TIM_OC2_SetConfig+0x124>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d10d      	bne.n	8005af8 <TIM_OC2_SetConfig+0x9c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af6:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <TIM_OC2_SetConfig+0x11c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d013      	beq.n	8005b28 <TIM_OC2_SetConfig+0xcc>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a1e      	ldr	r2, [pc, #120]	; (8005b7c <TIM_OC2_SetConfig+0x120>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00f      	beq.n	8005b28 <TIM_OC2_SetConfig+0xcc>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <TIM_OC2_SetConfig+0x128>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00b      	beq.n	8005b28 <TIM_OC2_SetConfig+0xcc>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <TIM_OC2_SetConfig+0x12c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d007      	beq.n	8005b28 <TIM_OC2_SetConfig+0xcc>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <TIM_OC2_SetConfig+0x130>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC2_SetConfig+0xcc>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a17      	ldr	r2, [pc, #92]	; (8005b80 <TIM_OC2_SetConfig+0x124>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d113      	bne.n	8005b50 <TIM_OC2_SetConfig+0xf4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b2e:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b36:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40013400 	.word	0x40013400
 8005b80:	40015000 	.word	0x40015000
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40014400 	.word	0x40014400
 8005b8c:	40014800 	.word	0x40014800

08005b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2b      	ldr	r2, [pc, #172]	; (8005ca8 <TIM_OC3_SetConfig+0x118>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_OC3_SetConfig+0x7e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <TIM_OC3_SetConfig+0x11c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_OC3_SetConfig+0x7e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a29      	ldr	r2, [pc, #164]	; (8005cb0 <TIM_OC3_SetConfig+0x120>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d10d      	bne.n	8005c2a <TIM_OC3_SetConfig+0x9a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c28:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ca8 <TIM_OC3_SetConfig+0x118>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <TIM_OC3_SetConfig+0xca>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <TIM_OC3_SetConfig+0x11c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00f      	beq.n	8005c5a <TIM_OC3_SetConfig+0xca>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	; (8005cb4 <TIM_OC3_SetConfig+0x124>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <TIM_OC3_SetConfig+0xca>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1c      	ldr	r2, [pc, #112]	; (8005cb8 <TIM_OC3_SetConfig+0x128>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d007      	beq.n	8005c5a <TIM_OC3_SetConfig+0xca>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	; (8005cbc <TIM_OC3_SetConfig+0x12c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d003      	beq.n	8005c5a <TIM_OC3_SetConfig+0xca>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <TIM_OC3_SetConfig+0x120>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d113      	bne.n	8005c82 <TIM_OC3_SetConfig+0xf2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c68:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	621a      	str	r2, [r3, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40015000 	.word	0x40015000
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400
 8005cbc:	40014800 	.word	0x40014800

08005cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d06:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <TIM_OC4_SetConfig+0xd4>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <TIM_OC4_SetConfig+0x98>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <TIM_OC4_SetConfig+0xd8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00f      	beq.n	8005d58 <TIM_OC4_SetConfig+0x98>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a18      	ldr	r2, [pc, #96]	; (8005d9c <TIM_OC4_SetConfig+0xdc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00b      	beq.n	8005d58 <TIM_OC4_SetConfig+0x98>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a17      	ldr	r2, [pc, #92]	; (8005da0 <TIM_OC4_SetConfig+0xe0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d007      	beq.n	8005d58 <TIM_OC4_SetConfig+0x98>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a16      	ldr	r2, [pc, #88]	; (8005da4 <TIM_OC4_SetConfig+0xe4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_OC4_SetConfig+0x98>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <TIM_OC4_SetConfig+0xe8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d109      	bne.n	8005d6c <TIM_OC4_SetConfig+0xac>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5e:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40013400 	.word	0x40013400
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40014400 	.word	0x40014400
 8005da4:	40014800 	.word	0x40014800
 8005da8:	40015000 	.word	0x40015000

08005dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f023 0201 	bic.w	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f023 030a 	bic.w	r3, r3, #10
 8005df0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b087      	sub	sp, #28
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f023 0210 	bic.w	r2, r3, #16
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	031b      	lsls	r3, r3, #12
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b085      	sub	sp, #20
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	460b      	mov	r3, r1
 8005e84:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	f043 0307 	orr.w	r3, r3, #7
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	609a      	str	r2, [r3, #8]
}
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b087      	sub	sp, #28
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	021a      	lsls	r2, r3, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	609a      	str	r2, [r3, #8]
} 
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b087      	sub	sp, #28
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8005f0e:	2201      	movs	r2, #1
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1a      	ldr	r2, [r3, #32]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	401a      	ands	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1a      	ldr	r2, [r3, #32]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f32:	431a      	orrs	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	621a      	str	r2, [r3, #32]
}
 8005f38:	bf00      	nop
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e105      	b.n	800616a <HAL_TIM_PWM_ConfigChannel+0x226>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b14      	cmp	r3, #20
 8005f72:	f200 80f0 	bhi.w	8006156 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005fd1 	.word	0x08005fd1
 8005f80:	08006157 	.word	0x08006157
 8005f84:	08006157 	.word	0x08006157
 8005f88:	08006157 	.word	0x08006157
 8005f8c:	08006011 	.word	0x08006011
 8005f90:	08006157 	.word	0x08006157
 8005f94:	08006157 	.word	0x08006157
 8005f98:	08006157 	.word	0x08006157
 8005f9c:	08006053 	.word	0x08006053
 8005fa0:	08006157 	.word	0x08006157
 8005fa4:	08006157 	.word	0x08006157
 8005fa8:	08006157 	.word	0x08006157
 8005fac:	08006093 	.word	0x08006093
 8005fb0:	08006157 	.word	0x08006157
 8005fb4:	08006157 	.word	0x08006157
 8005fb8:	08006157 	.word	0x08006157
 8005fbc:	080060d5 	.word	0x080060d5
 8005fc0:	08006157 	.word	0x08006157
 8005fc4:	08006157 	.word	0x08006157
 8005fc8:	08006157 	.word	0x08006157
 8005fcc:	08006115 	.word	0x08006115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff fca0 	bl	800591c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0208 	orr.w	r2, r2, #8
 8005fea:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0204 	bic.w	r2, r2, #4
 8005ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6999      	ldr	r1, [r3, #24]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	619a      	str	r2, [r3, #24]
    }
    break;
 800600e:	e0a3      	b.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fd20 	bl	8005a5c <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800602a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6999      	ldr	r1, [r3, #24]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	619a      	str	r2, [r3, #24]
    }
    break;
 8006050:	e082      	b.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff fd99 	bl	8005b90 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0208 	orr.w	r2, r2, #8
 800606c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0204 	bic.w	r2, r2, #4
 800607c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69d9      	ldr	r1, [r3, #28]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	61da      	str	r2, [r3, #28]
    }
    break;
 8006090:	e062      	b.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff fe11 	bl	8005cc0 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ac:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69d9      	ldr	r1, [r3, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	021a      	lsls	r2, r3, #8
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	61da      	str	r2, [r3, #28]
    }
    break;
 80060d2:	e041      	b.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f950 	bl	8006380 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0208 	orr.w	r2, r2, #8
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0204 	bic.w	r2, r2, #4
 80060fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8006112:	e021      	b.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f9a0 	bl	8006460 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	021a      	lsls	r2, r3, #8
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8006154:	e000      	b.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 8006156:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop

08006174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006188:	2302      	movs	r3, #2
 800618a:	e042      	b.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1d      	ldr	r2, [pc, #116]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d009      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d004      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d108      	bne.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ec:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
} 
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40013400 	.word	0x40013400
 8006228:	40015000 	.word	0x40015000

0800622c <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006244:	2302      	movs	r3, #2
 8006246:	e071      	b.n	800632c <HAL_TIMEx_ConfigBreakDeadTime+0x100>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a18      	ldr	r2, [pc, #96]	; (8006338 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a17      	ldr	r2, [pc, #92]	; (800633c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a15      	ldr	r2, [pc, #84]	; (8006340 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d115      	bne.n	800631a <HAL_TIMEx_ConfigBreakDeadTime+0xee>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	051b      	lsls	r3, r3, #20
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40013400 	.word	0x40013400
 8006340:	40015000 	.word	0x40015000

08006344 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063d0:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a19      	ldr	r2, [pc, #100]	; (8006448 <TIM_OC5_SetConfig+0xc8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <TIM_OC5_SetConfig+0x8e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a18      	ldr	r2, [pc, #96]	; (800644c <TIM_OC5_SetConfig+0xcc>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00f      	beq.n	800640e <TIM_OC5_SetConfig+0x8e>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a17      	ldr	r2, [pc, #92]	; (8006450 <TIM_OC5_SetConfig+0xd0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00b      	beq.n	800640e <TIM_OC5_SetConfig+0x8e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a16      	ldr	r2, [pc, #88]	; (8006454 <TIM_OC5_SetConfig+0xd4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d007      	beq.n	800640e <TIM_OC5_SetConfig+0x8e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a15      	ldr	r2, [pc, #84]	; (8006458 <TIM_OC5_SetConfig+0xd8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_OC5_SetConfig+0x8e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a14      	ldr	r2, [pc, #80]	; (800645c <TIM_OC5_SetConfig+0xdc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d109      	bne.n	8006422 <TIM_OC5_SetConfig+0xa2>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006414:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	621a      	str	r2, [r3, #32]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40013400 	.word	0x40013400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800
 800645c:	40015000 	.word	0x40015000

08006460 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800649a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064b2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	051b      	lsls	r3, r3, #20
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a1a      	ldr	r2, [pc, #104]	; (800652c <TIM_OC6_SetConfig+0xcc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d013      	beq.n	80064f0 <TIM_OC6_SetConfig+0x90>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a19      	ldr	r2, [pc, #100]	; (8006530 <TIM_OC6_SetConfig+0xd0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00f      	beq.n	80064f0 <TIM_OC6_SetConfig+0x90>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a18      	ldr	r2, [pc, #96]	; (8006534 <TIM_OC6_SetConfig+0xd4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00b      	beq.n	80064f0 <TIM_OC6_SetConfig+0x90>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <TIM_OC6_SetConfig+0xd8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d007      	beq.n	80064f0 <TIM_OC6_SetConfig+0x90>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a16      	ldr	r2, [pc, #88]	; (800653c <TIM_OC6_SetConfig+0xdc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d003      	beq.n	80064f0 <TIM_OC6_SetConfig+0x90>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a15      	ldr	r2, [pc, #84]	; (8006540 <TIM_OC6_SetConfig+0xe0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d109      	bne.n	8006504 <TIM_OC6_SetConfig+0xa4>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	029b      	lsls	r3, r3, #10
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
} 
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40013400 	.word	0x40013400
 8006534:	40014000 	.word	0x40014000
 8006538:	40014400 	.word	0x40014400
 800653c:	40014800 	.word	0x40014800
 8006540:	40015000 	.word	0x40015000

08006544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e043      	b.n	80065de <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f005 f928 	bl	800b7c0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2224      	movs	r2, #36	; 0x24
 8006574:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fa6d 	bl	8006a68 <UART_SetConfig>
 800658e:	4603      	mov	r3, r0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e022      	b.n	80065de <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fc5f 	bl	8006e64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065c4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0201 	orr.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fce6 	bl	8006fa8 <UART_CheckIdleState>
 80065dc:	4603      	mov	r3, r0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b088      	sub	sp, #32
 80065ea:	af02      	add	r7, sp, #8
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b20      	cmp	r3, #32
 8006604:	d177      	bne.n	80066f6 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_UART_Transmit+0x2c>
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e070      	b.n	80066f8 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_UART_Transmit+0x3e>
 8006620:	2302      	movs	r3, #2
 8006622:	e069      	b.n	80066f8 <HAL_UART_Transmit+0x112>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2221      	movs	r2, #33	; 0x21
 8006636:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800663a:	f7fa fb6f 	bl	8000d1c <HAL_GetTick>
 800663e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	88fa      	ldrh	r2, [r7, #6]
 800664c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8006650:	e034      	b.n	80066bc <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 fce3 	bl	800703a <UART_WaitOnFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e03c      	b.n	80066f8 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006686:	d111      	bne.n	80066ac <HAL_UART_Transmit+0xc6>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10d      	bne.n	80066ac <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	881a      	ldrh	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a0:	b292      	uxth	r2, r2
 80066a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3302      	adds	r3, #2
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	e007      	b.n	80066bc <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	60ba      	str	r2, [r7, #8]
 80066b2:	781a      	ldrb	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	b292      	uxth	r2, r2
 80066ba:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1c4      	bne.n	8006652 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2140      	movs	r1, #64	; 0x40
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fcb1 	bl	800703a <UART_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e00a      	b.n	80066f8 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	e000      	b.n	80066f8 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80066f6:	2302      	movs	r3, #2
  }
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_UART_Receive_DMA>:
  *       DMA half transfer complete, DMA transfer complete and DMA transfer
  *       error interrupts are enabled
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	80fb      	strh	r3, [r7, #6]
  /* Check if UART instance supports continuous communication using DMA */
  assert_param(IS_UART_DMA_INSTANCE(huart->Instance));

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b20      	cmp	r3, #32
 8006718:	d15a      	bne.n	80067d0 <HAL_UART_Receive_DMA+0xd0>
  {
    if((pData == NULL ) || (Size == 0U))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_UART_Receive_DMA+0x26>
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e053      	b.n	80067d2 <HAL_UART_Receive_DMA+0xd2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_UART_Receive_DMA+0x38>
 8006734:	2302      	movs	r3, #2
 8006736:	e04c      	b.n	80067d2 <HAL_UART_Receive_DMA+0xd2>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2222      	movs	r2, #34	; 0x22
 8006758:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006760:	4a1e      	ldr	r2, [pc, #120]	; (80067dc <HAL_UART_Receive_DMA+0xdc>)
 8006762:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006768:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_UART_Receive_DMA+0xe0>)
 800676a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006770:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <HAL_UART_Receive_DMA+0xe4>)
 8006772:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006778:	2200      	movs	r2, #0
 800677a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3324      	adds	r3, #36	; 0x24
 8006786:	4619      	mov	r1, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678c:	461a      	mov	r2, r3
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	f7fc fd92 	bl	80032b8 <HAL_DMA_Start_IT>

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067aa:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0201 	orr.w	r2, r2, #1
 80067ba:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ca:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e000      	b.n	80067d2 <HAL_UART_Receive_DMA+0xd2>
  }
  else
  {
    return HAL_BUSY;
 80067d0:	2302      	movs	r3, #2
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	08007137 	.word	0x08007137
 80067e0:	080071a1 	.word	0x080071a1
 80067e4:	080071bd 	.word	0x080071bd

080067e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10d      	bne.n	800682a <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_UART_IRQHandler+0x42>
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fd8c 	bl	8007340 <UART_Receive_IT>
      return;
 8006828:	e0fa      	b.n	8006a20 <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80ba 	beq.w	80069ae <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 80af 	beq.w	80069ae <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00e      	beq.n	8006878 <HAL_UART_IRQHandler+0x90>
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2201      	movs	r2, #1
 800686a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006870:	f043 0201 	orr.w	r2, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00e      	beq.n	80068a0 <HAL_UART_IRQHandler+0xb8>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2202      	movs	r2, #2
 8006892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006898:	f043 0204 	orr.w	r2, r3, #4
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00e      	beq.n	80068c8 <HAL_UART_IRQHandler+0xe0>
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2204      	movs	r2, #4
 80068ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c0:	f043 0202 	orr.w	r2, r3, #2
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d013      	beq.n	80068fa <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2208      	movs	r2, #8
 80068ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f2:	f043 0208 	orr.w	r2, r3, #8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 808d 	beq.w	8006a1e <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <HAL_UART_IRQHandler+0x136>
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fd11 	bl	8007340 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	d131      	bne.n	800699c <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fbde 	bl	80070fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d123      	bne.n	8006994 <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006960:	2b00      	cmp	r3, #0
 8006962:	d013      	beq.n	800698c <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006968:	4a2f      	ldr	r2, [pc, #188]	; (8006a28 <HAL_UART_IRQHandler+0x240>)
 800696a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006970:	4618      	mov	r0, r3
 8006972:	f7fc fd2b 	bl	80033cc <HAL_DMA_Abort_IT>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d016      	beq.n	80069aa <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006986:	4610      	mov	r0, r2
 8006988:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698a:	e00e      	b.n	80069aa <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f861 	bl	8006a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006992:	e00a      	b.n	80069aa <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f85d 	bl	8006a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699a:	e006      	b.n	80069aa <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f859 	bl	8006a54 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80069a8:	e039      	b.n	8006a1e <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069aa:	bf00      	nop
    return;
 80069ac:	e037      	b.n	8006a1e <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d015      	beq.n	80069e4 <HAL_UART_IRQHandler+0x1fc>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d010      	beq.n	80069e4 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069ca:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fd19 	bl	8007414 <HAL_UARTEx_WakeupCallback>
    return;
 80069e2:	e01d      	b.n	8006a20 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_UART_IRQHandler+0x218>
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc31 	bl	8007260 <UART_Transmit_IT>
    return;
 80069fe:	e00f      	b.n	8006a20 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_UART_IRQHandler+0x238>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d005      	beq.n	8006a20 <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fc7b 	bl	8007310 <UART_EndTransmit_IT>
    return;
 8006a1a:	bf00      	nop
 8006a1c:	e000      	b.n	8006a20 <HAL_UART_IRQHandler+0x238>
    return;
 8006a1e:	bf00      	nop
  }

}
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	08007235 	.word	0x08007235

08006a2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006a74:	2310      	movs	r3, #16
 8006a76:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4ba7      	ldr	r3, [pc, #668]	; (8006d40 <UART_SetConfig+0x2d8>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	430b      	orrs	r3, r1
 8006aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a96      	ldr	r2, [pc, #600]	; (8006d44 <UART_SetConfig+0x2dc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d121      	bne.n	8006b34 <UART_SetConfig+0xcc>
 8006af0:	4b95      	ldr	r3, [pc, #596]	; (8006d48 <UART_SetConfig+0x2e0>)
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d817      	bhi.n	8006b2c <UART_SetConfig+0xc4>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <UART_SetConfig+0x9c>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b15 	.word	0x08006b15
 8006b08:	08006b21 	.word	0x08006b21
 8006b0c:	08006b27 	.word	0x08006b27
 8006b10:	08006b1b 	.word	0x08006b1b
 8006b14:	2301      	movs	r3, #1
 8006b16:	75fb      	strb	r3, [r7, #23]
 8006b18:	e0b2      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	75fb      	strb	r3, [r7, #23]
 8006b1e:	e0af      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b20:	2304      	movs	r3, #4
 8006b22:	75fb      	strb	r3, [r7, #23]
 8006b24:	e0ac      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b26:	2308      	movs	r3, #8
 8006b28:	75fb      	strb	r3, [r7, #23]
 8006b2a:	e0a9      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b2c:	2310      	movs	r3, #16
 8006b2e:	75fb      	strb	r3, [r7, #23]
 8006b30:	bf00      	nop
 8006b32:	e0a5      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a84      	ldr	r2, [pc, #528]	; (8006d4c <UART_SetConfig+0x2e4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d123      	bne.n	8006b86 <UART_SetConfig+0x11e>
 8006b3e:	4b82      	ldr	r3, [pc, #520]	; (8006d48 <UART_SetConfig+0x2e0>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b4a:	d012      	beq.n	8006b72 <UART_SetConfig+0x10a>
 8006b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b50:	d802      	bhi.n	8006b58 <UART_SetConfig+0xf0>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <UART_SetConfig+0xfe>
 8006b56:	e012      	b.n	8006b7e <UART_SetConfig+0x116>
 8006b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b5c:	d00c      	beq.n	8006b78 <UART_SetConfig+0x110>
 8006b5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b62:	d003      	beq.n	8006b6c <UART_SetConfig+0x104>
 8006b64:	e00b      	b.n	8006b7e <UART_SetConfig+0x116>
 8006b66:	2300      	movs	r3, #0
 8006b68:	75fb      	strb	r3, [r7, #23]
 8006b6a:	e089      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	75fb      	strb	r3, [r7, #23]
 8006b70:	e086      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b72:	2304      	movs	r3, #4
 8006b74:	75fb      	strb	r3, [r7, #23]
 8006b76:	e083      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b78:	2308      	movs	r3, #8
 8006b7a:	75fb      	strb	r3, [r7, #23]
 8006b7c:	e080      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b7e:	2310      	movs	r3, #16
 8006b80:	75fb      	strb	r3, [r7, #23]
 8006b82:	bf00      	nop
 8006b84:	e07c      	b.n	8006c80 <UART_SetConfig+0x218>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a71      	ldr	r2, [pc, #452]	; (8006d50 <UART_SetConfig+0x2e8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d123      	bne.n	8006bd8 <UART_SetConfig+0x170>
 8006b90:	4b6d      	ldr	r3, [pc, #436]	; (8006d48 <UART_SetConfig+0x2e0>)
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b9c:	d012      	beq.n	8006bc4 <UART_SetConfig+0x15c>
 8006b9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ba2:	d802      	bhi.n	8006baa <UART_SetConfig+0x142>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <UART_SetConfig+0x150>
 8006ba8:	e012      	b.n	8006bd0 <UART_SetConfig+0x168>
 8006baa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bae:	d00c      	beq.n	8006bca <UART_SetConfig+0x162>
 8006bb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006bb4:	d003      	beq.n	8006bbe <UART_SetConfig+0x156>
 8006bb6:	e00b      	b.n	8006bd0 <UART_SetConfig+0x168>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	75fb      	strb	r3, [r7, #23]
 8006bbc:	e060      	b.n	8006c80 <UART_SetConfig+0x218>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	75fb      	strb	r3, [r7, #23]
 8006bc2:	e05d      	b.n	8006c80 <UART_SetConfig+0x218>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	75fb      	strb	r3, [r7, #23]
 8006bc8:	e05a      	b.n	8006c80 <UART_SetConfig+0x218>
 8006bca:	2308      	movs	r3, #8
 8006bcc:	75fb      	strb	r3, [r7, #23]
 8006bce:	e057      	b.n	8006c80 <UART_SetConfig+0x218>
 8006bd0:	2310      	movs	r3, #16
 8006bd2:	75fb      	strb	r3, [r7, #23]
 8006bd4:	bf00      	nop
 8006bd6:	e053      	b.n	8006c80 <UART_SetConfig+0x218>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a5d      	ldr	r2, [pc, #372]	; (8006d54 <UART_SetConfig+0x2ec>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d123      	bne.n	8006c2a <UART_SetConfig+0x1c2>
 8006be2:	4b59      	ldr	r3, [pc, #356]	; (8006d48 <UART_SetConfig+0x2e0>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bee:	d012      	beq.n	8006c16 <UART_SetConfig+0x1ae>
 8006bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bf4:	d802      	bhi.n	8006bfc <UART_SetConfig+0x194>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <UART_SetConfig+0x1a2>
 8006bfa:	e012      	b.n	8006c22 <UART_SetConfig+0x1ba>
 8006bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c00:	d00c      	beq.n	8006c1c <UART_SetConfig+0x1b4>
 8006c02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c06:	d003      	beq.n	8006c10 <UART_SetConfig+0x1a8>
 8006c08:	e00b      	b.n	8006c22 <UART_SetConfig+0x1ba>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75fb      	strb	r3, [r7, #23]
 8006c0e:	e037      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c10:	2302      	movs	r3, #2
 8006c12:	75fb      	strb	r3, [r7, #23]
 8006c14:	e034      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c16:	2304      	movs	r3, #4
 8006c18:	75fb      	strb	r3, [r7, #23]
 8006c1a:	e031      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	75fb      	strb	r3, [r7, #23]
 8006c20:	e02e      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c22:	2310      	movs	r3, #16
 8006c24:	75fb      	strb	r3, [r7, #23]
 8006c26:	bf00      	nop
 8006c28:	e02a      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a4a      	ldr	r2, [pc, #296]	; (8006d58 <UART_SetConfig+0x2f0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d123      	bne.n	8006c7c <UART_SetConfig+0x214>
 8006c34:	4b44      	ldr	r3, [pc, #272]	; (8006d48 <UART_SetConfig+0x2e0>)
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c40:	d012      	beq.n	8006c68 <UART_SetConfig+0x200>
 8006c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c46:	d802      	bhi.n	8006c4e <UART_SetConfig+0x1e6>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <UART_SetConfig+0x1f4>
 8006c4c:	e012      	b.n	8006c74 <UART_SetConfig+0x20c>
 8006c4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c52:	d00c      	beq.n	8006c6e <UART_SetConfig+0x206>
 8006c54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c58:	d003      	beq.n	8006c62 <UART_SetConfig+0x1fa>
 8006c5a:	e00b      	b.n	8006c74 <UART_SetConfig+0x20c>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	75fb      	strb	r3, [r7, #23]
 8006c60:	e00e      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c62:	2302      	movs	r3, #2
 8006c64:	75fb      	strb	r3, [r7, #23]
 8006c66:	e00b      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	75fb      	strb	r3, [r7, #23]
 8006c6c:	e008      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c6e:	2308      	movs	r3, #8
 8006c70:	75fb      	strb	r3, [r7, #23]
 8006c72:	e005      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c74:	2310      	movs	r3, #16
 8006c76:	75fb      	strb	r3, [r7, #23]
 8006c78:	bf00      	nop
 8006c7a:	e001      	b.n	8006c80 <UART_SetConfig+0x218>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c88:	d17d      	bne.n	8006d86 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d865      	bhi.n	8006d5c <UART_SetConfig+0x2f4>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <UART_SetConfig+0x230>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006cd9 	.word	0x08006cd9
 8006ca0:	08006cf5 	.word	0x08006cf5
 8006ca4:	08006d5d 	.word	0x08006d5d
 8006ca8:	08006d0f 	.word	0x08006d0f
 8006cac:	08006d5d 	.word	0x08006d5d
 8006cb0:	08006d5d 	.word	0x08006d5d
 8006cb4:	08006d5d 	.word	0x08006d5d
 8006cb8:	08006d2b 	.word	0x08006d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006cbc:	f7fd ffc4 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	005a      	lsls	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	085b      	lsrs	r3, r3, #1
 8006cca:	441a      	add	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd4:	82bb      	strh	r3, [r7, #20]
        break;
 8006cd6:	e044      	b.n	8006d62 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006cd8:	f7fd ffd8 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	005a      	lsls	r2, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	085b      	lsrs	r3, r3, #1
 8006ce6:	441a      	add	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf0:	82bb      	strh	r3, [r7, #20]
        break;
 8006cf2:	e036      	b.n	8006d62 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006cfe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6852      	ldr	r2, [r2, #4]
 8006d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d0a:	82bb      	strh	r3, [r7, #20]
        break;
 8006d0c:	e029      	b.n	8006d62 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006d0e:	f7fd ff25 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8006d12:	4603      	mov	r3, r0
 8006d14:	005a      	lsls	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	441a      	add	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d26:	82bb      	strh	r3, [r7, #20]
        break;
 8006d28:	e01b      	b.n	8006d62 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	82bb      	strh	r3, [r7, #20]
        break;
 8006d3e:	e010      	b.n	8006d62 <UART_SetConfig+0x2fa>
 8006d40:	efff69f3 	.word	0xefff69f3
 8006d44:	40013800 	.word	0x40013800
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	40004400 	.word	0x40004400
 8006d50:	40004800 	.word	0x40004800
 8006d54:	40004c00 	.word	0x40004c00
 8006d58:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	74fb      	strb	r3, [r7, #19]
        break;
 8006d60:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8006d62:	8abb      	ldrh	r3, [r7, #20]
 8006d64:	f023 030f 	bic.w	r3, r3, #15
 8006d68:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d6a:	8abb      	ldrh	r3, [r7, #20]
 8006d6c:	105b      	asrs	r3, r3, #1
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	897b      	ldrh	r3, [r7, #10]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	897a      	ldrh	r2, [r7, #10]
 8006d82:	60da      	str	r2, [r3, #12]
 8006d84:	e069      	b.n	8006e5a <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d863      	bhi.n	8006e54 <UART_SetConfig+0x3ec>
 8006d8c:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <UART_SetConfig+0x32c>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08006dd9 	.word	0x08006dd9
 8006d9c:	08006df9 	.word	0x08006df9
 8006da0:	08006e55 	.word	0x08006e55
 8006da4:	08006e19 	.word	0x08006e19
 8006da8:	08006e55 	.word	0x08006e55
 8006dac:	08006e55 	.word	0x08006e55
 8006db0:	08006e55 	.word	0x08006e55
 8006db4:	08006e39 	.word	0x08006e39
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006db8:	f7fd ff46 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	441a      	add	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60da      	str	r2, [r3, #12]
        break;
 8006dd6:	e040      	b.n	8006e5a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006dd8:	f7fd ff58 	bl	8004c8c <HAL_RCC_GetPCLK2Freq>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	085b      	lsrs	r3, r3, #1
 8006de4:	441a      	add	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60da      	str	r2, [r3, #12]
        break;
 8006df6:	e030      	b.n	8006e5a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8006e02:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6852      	ldr	r2, [r2, #4]
 8006e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60da      	str	r2, [r3, #12]
        break;
 8006e16:	e020      	b.n	8006e5a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006e18:	f7fd fea0 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60da      	str	r2, [r3, #12]
        break;
 8006e36:	e010      	b.n	8006e5a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60da      	str	r2, [r3, #12]
        break;
 8006e52:	e002      	b.n	8006e5a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	74fb      	strb	r3, [r7, #19]
        break;
 8006e58:	bf00      	nop
    }
  }

  return ret;
 8006e5a:	7cfb      	ldrb	r3, [r7, #19]

}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	f003 0310 	and.w	r3, r3, #16
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01a      	beq.n	8006f7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f62:	d10a      	bne.n	8006f7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006fba:	f7f9 feaf 	bl	8000d1c <HAL_GetTick>
 8006fbe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b08      	cmp	r3, #8
 8006fcc:	d10e      	bne.n	8006fec <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f82c 	bl	800703a <UART_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e022      	b.n	8007032 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d10e      	bne.n	8007018 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ffa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f816 	bl	800703a <UART_WaitOnFlagUntilTimeout>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e00c      	b.n	8007032 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	603b      	str	r3, [r7, #0]
 8007046:	4613      	mov	r3, r2
 8007048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704a:	e02c      	b.n	80070a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d028      	beq.n	80070a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <UART_WaitOnFlagUntilTimeout+0x30>
 800705a:	f7f9 fe5f 	bl	8000d1c <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	429a      	cmp	r2, r3
 8007068:	d21d      	bcs.n	80070a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007078:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0201 	bic.w	r2, r2, #1
 8007088:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e00f      	b.n	80070c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69da      	ldr	r2, [r3, #28]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4013      	ands	r3, r2
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	bf0c      	ite	eq
 80070b6:	2301      	moveq	r3, #1
 80070b8:	2300      	movne	r3, #0
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d0c3      	beq.n	800704c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80070e4:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007110:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d11f      	bne.n	8007192 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007168:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0201 	bic.w	r2, r2, #1
 8007178:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007188:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  }

  HAL_UART_RxCpltCallback(huart);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f003 ff9c 	bl	800b0d0 <HAL_UART_RxCpltCallback>
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff fc46 	bl	8006a40 <HAL_UART_RxHalfCpltCallback>
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b21      	cmp	r3, #33	; 0x21
 80071d4:	d10d      	bne.n	80071f2 <UART_DMAError+0x36>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e0:	2b80      	cmp	r3, #128	; 0x80
 80071e2:	d106      	bne.n	80071f2 <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0U;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff ff6e 	bl	80070ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b22      	cmp	r3, #34	; 0x22
 80071fc:	d10d      	bne.n	800721a <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	d106      	bne.n	800721a <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f7ff ff70 	bl	80070fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800721e:	f043 0210 	orr.w	r2, r3, #16
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff fc14 	bl	8006a54 <HAL_UART_ErrorCallback>
}
 800722c:	bf00      	nop
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff fbfe 	bl	8006a54 <HAL_UART_ErrorCallback>
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b21      	cmp	r3, #33	; 0x21
 8007272:	d146      	bne.n	8007302 <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800727a:	b29b      	uxth	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d111      	bne.n	80072a4 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800728e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800729e:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	e02f      	b.n	8007304 <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ac:	d114      	bne.n	80072d8 <UART_Transmit_IT+0x78>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d110      	bne.n	80072d8 <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ba:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	881a      	ldrh	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c8:	b292      	uxth	r2, r2
 80072ca:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d0:	1c9a      	adds	r2, r3, #2
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80072d6:	e009      	b.n	80072ec <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072dc:	1c59      	adds	r1, r3, #1
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	64d1      	str	r1, [r2, #76]	; 0x4c
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	b292      	uxth	r2, r2
 80072ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e000      	b.n	8007304 <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 8007302:	2302      	movs	r3, #2
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007326:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7ff fb7b 	bl	8006a2c <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800734e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b22      	cmp	r3, #34	; 0x22
 800735a:	d14e      	bne.n	80073fa <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007362:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736c:	d112      	bne.n	8007394 <UART_Receive_IT+0x54>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10e      	bne.n	8007394 <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737a:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800737c:	89ba      	ldrh	r2, [r7, #12]
 800737e:	89fb      	ldrh	r3, [r7, #14]
 8007380:	4013      	ands	r3, r2
 8007382:	b29a      	uxth	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738c:	1c9a      	adds	r2, r3, #2
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	655a      	str	r2, [r3, #84]	; 0x54
 8007392:	e00b      	b.n	80073ac <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007394:	89bb      	ldrh	r3, [r7, #12]
 8007396:	b2d9      	uxtb	r1, r3
 8007398:	89fb      	ldrh	r3, [r7, #14]
 800739a:	b2da      	uxtb	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a0:	1c5c      	adds	r4, r3, #1
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	6544      	str	r4, [r0, #84]	; 0x54
 80073a6:	400a      	ands	r2, r1
 80073a8:	b2d2      	uxtb	r2, r2
 80073aa:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4619      	mov	r1, r3
 80073bc:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d118      	bne.n	80073f6 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0201 	bic.w	r2, r2, #1
 80073e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f003 fe6f 	bl	800b0d0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	e00a      	b.n	800740c <UART_Receive_IT+0xcc>
    }

    return HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e008      	b.n	800740c <UART_Receive_IT+0xcc>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	699a      	ldr	r2, [r3, #24]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0208 	orr.w	r2, r2, #8
 8007408:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 800740a:	2302      	movs	r3, #2
  }
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	bd90      	pop	{r4, r7, pc}

08007414 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800742a:	ed2d 8b02 	vpush	{d8}
 800742e:	b0b7      	sub	sp, #220	; 0xdc
 8007430:	af1c      	add	r7, sp, #112	; 0x70
  /* USER CODE BEGIN 1 */
	sleepReset:

	//initialise the 4 ADC content holding arrays after a sleep to get correct ADC readings
	for (int i = 0; i < adc1BufferSize; i++ ){adc1Buffer[i] = 0;}
 8007432:	2300      	movs	r3, #0
 8007434:	667b      	str	r3, [r7, #100]	; 0x64
 8007436:	e007      	b.n	8007448 <main+0x20>
 8007438:	4a78      	ldr	r2, [pc, #480]	; (800761c <main+0x1f4>)
 800743a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800743c:	2100      	movs	r1, #0
 800743e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007444:	3301      	adds	r3, #1
 8007446:	667b      	str	r3, [r7, #100]	; 0x64
 8007448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800744a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800744e:	dbf3      	blt.n	8007438 <main+0x10>
	for (int i = 0; i < adc2BufferSize; i++ ){adc2Buffer[i] = 0;}
 8007450:	2300      	movs	r3, #0
 8007452:	663b      	str	r3, [r7, #96]	; 0x60
 8007454:	e007      	b.n	8007466 <main+0x3e>
 8007456:	4a72      	ldr	r2, [pc, #456]	; (8007620 <main+0x1f8>)
 8007458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800745a:	2100      	movs	r1, #0
 800745c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8007460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007462:	3301      	adds	r3, #1
 8007464:	663b      	str	r3, [r7, #96]	; 0x60
 8007466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007468:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800746c:	dbf3      	blt.n	8007456 <main+0x2e>
	for (int i = 0; i < adc3BufferSize; i++ ){adc3Buffer[i] = 0;}
 800746e:	2300      	movs	r3, #0
 8007470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007472:	e007      	b.n	8007484 <main+0x5c>
 8007474:	4a6b      	ldr	r2, [pc, #428]	; (8007624 <main+0x1fc>)
 8007476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007478:	2100      	movs	r1, #0
 800747a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800747e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007480:	3301      	adds	r3, #1
 8007482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007486:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800748a:	dbf3      	blt.n	8007474 <main+0x4c>
	for (int i = 0; i < adc4BufferSize; i++ ){adc4Buffer[i] = 0;}
 800748c:	2300      	movs	r3, #0
 800748e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007490:	e007      	b.n	80074a2 <main+0x7a>
 8007492:	4a65      	ldr	r2, [pc, #404]	; (8007628 <main+0x200>)
 8007494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007496:	2100      	movs	r1, #0
 8007498:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800749c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800749e:	3301      	adds	r3, #1
 80074a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80074a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80074a8:	dbf3      	blt.n	8007492 <main+0x6a>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80074aa:	f7f9 fbdd 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80074ae:	f000 fa37 	bl	8007920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80074b2:	f000 fef1 	bl	8008298 <MX_GPIO_Init>
  MX_DMA_Init();
 80074b6:	f000 fea5 	bl	8008204 <MX_DMA_Init>
  MX_ADC1_Init();
 80074ba:	f000 fa97 	bl	80079ec <MX_ADC1_Init>
  MX_TIM1_Init();
 80074be:	f000 fd6b 	bl	8007f98 <MX_TIM1_Init>
  MX_ADC2_Init();
 80074c2:	f000 fb55 	bl	8007b70 <MX_ADC2_Init>
  MX_ADC3_Init();
 80074c6:	f000 fbe7 	bl	8007c98 <MX_ADC3_Init>
  MX_ADC4_Init();
 80074ca:	f000 fc87 	bl	8007ddc <MX_ADC4_Init>
  MX_TIM2_Init();
 80074ce:	f000 fe1b 	bl	8008108 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80074d2:	f000 fe67 	bl	80081a4 <MX_USART3_UART_Init>
  MX_CAN_Init();
 80074d6:	f000 fd1f 	bl	8007f18 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  //CAN configuration
  CAN_FilterConfig(); //we initialise the CAN bus filter
 80074da:	f003 fb75 	bl	800abc8 <CAN_FilterConfig>

  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 80074de:	2100      	movs	r1, #0
 80074e0:	4852      	ldr	r0, [pc, #328]	; (800762c <main+0x204>)
 80074e2:	f7fb f9b5 	bl	8002850 <HAL_CAN_Receive_IT>

  //Set CAN transmission parameters
  hcan.pTxMsg->StdId = OwnID;
 80074e6:	4b52      	ldr	r3, [pc, #328]	; (8007630 <main+0x208>)
 80074e8:	881a      	ldrh	r2, [r3, #0]
 80074ea:	4b50      	ldr	r3, [pc, #320]	; (800762c <main+0x204>)
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	601a      	str	r2, [r3, #0]
  hcan.pTxMsg->RTR = CAN_RTR_DATA;
 80074f0:	4b4e      	ldr	r3, [pc, #312]	; (800762c <main+0x204>)
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	2200      	movs	r2, #0
 80074f6:	60da      	str	r2, [r3, #12]
  hcan.pTxMsg->IDE = CAN_ID_STD;
 80074f8:	4b4c      	ldr	r3, [pc, #304]	; (800762c <main+0x204>)
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	2200      	movs	r2, #0
 80074fe:	609a      	str	r2, [r3, #8]
  hcan.pTxMsg->DLC = 8;
 8007500:	4b4a      	ldr	r3, [pc, #296]	; (800762c <main+0x204>)
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	2208      	movs	r2, #8
 8007506:	611a      	str	r2, [r3, #16]

  //Start PWM for the buck boost MOSFETS
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1); //PMOS
 8007508:	2100      	movs	r1, #0
 800750a:	484a      	ldr	r0, [pc, #296]	; (8007634 <main+0x20c>)
 800750c:	f7fd fe78 	bl	8005200 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2); //NMOS
 8007510:	2104      	movs	r1, #4
 8007512:	4848      	ldr	r0, [pc, #288]	; (8007634 <main+0x20c>)
 8007514:	f7fd fe74 	bl	8005200 <HAL_TIM_PWM_Start>

  //Calibrate ADCs
  while(HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK);
 8007518:	bf00      	nop
 800751a:	2100      	movs	r1, #0
 800751c:	4846      	ldr	r0, [pc, #280]	; (8007638 <main+0x210>)
 800751e:	f7f9 ffd1 	bl	80014c4 <HAL_ADCEx_Calibration_Start>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f8      	bne.n	800751a <main+0xf2>
  while(HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED) != HAL_OK);
 8007528:	bf00      	nop
 800752a:	2100      	movs	r1, #0
 800752c:	4843      	ldr	r0, [pc, #268]	; (800763c <main+0x214>)
 800752e:	f7f9 ffc9 	bl	80014c4 <HAL_ADCEx_Calibration_Start>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f8      	bne.n	800752a <main+0x102>
  while(HAL_ADCEx_Calibration_Start(&hadc3,ADC_SINGLE_ENDED) != HAL_OK);
 8007538:	bf00      	nop
 800753a:	2100      	movs	r1, #0
 800753c:	4840      	ldr	r0, [pc, #256]	; (8007640 <main+0x218>)
 800753e:	f7f9 ffc1 	bl	80014c4 <HAL_ADCEx_Calibration_Start>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1f8      	bne.n	800753a <main+0x112>
  while(HAL_ADCEx_Calibration_Start(&hadc4,ADC_SINGLE_ENDED) != HAL_OK);
 8007548:	bf00      	nop
 800754a:	2100      	movs	r1, #0
 800754c:	483d      	ldr	r0, [pc, #244]	; (8007644 <main+0x21c>)
 800754e:	f7f9 ffb9 	bl	80014c4 <HAL_ADCEx_Calibration_Start>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f8      	bne.n	800754a <main+0x122>

  //HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)adc1Buffer, adc1BufferSize*2);
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc1Buffer, adc1BufferSize);
 8007558:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800755c:	492f      	ldr	r1, [pc, #188]	; (800761c <main+0x1f4>)
 800755e:	4836      	ldr	r0, [pc, #216]	; (8007638 <main+0x210>)
 8007560:	f7f9 fe38 	bl	80011d4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)adc2Buffer, adc2BufferSize);
 8007564:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007568:	492d      	ldr	r1, [pc, #180]	; (8007620 <main+0x1f8>)
 800756a:	4834      	ldr	r0, [pc, #208]	; (800763c <main+0x214>)
 800756c:	f7f9 fe32 	bl	80011d4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3,(uint32_t*)adc3Buffer, adc3BufferSize);
 8007570:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8007574:	492b      	ldr	r1, [pc, #172]	; (8007624 <main+0x1fc>)
 8007576:	4832      	ldr	r0, [pc, #200]	; (8007640 <main+0x218>)
 8007578:	f7f9 fe2c 	bl	80011d4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4,(uint32_t*)adc4Buffer, adc4BufferSize);
 800757c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007580:	4929      	ldr	r1, [pc, #164]	; (8007628 <main+0x200>)
 8007582:	4830      	ldr	r0, [pc, #192]	; (8007644 <main+0x21c>)
 8007584:	f7f9 fe26 	bl	80011d4 <HAL_ADC_Start_DMA>


  HAL_TIM_Base_Start_IT(&htim2); //start timer 2 for 500 Hz core ISR
 8007588:	482f      	ldr	r0, [pc, #188]	; (8007648 <main+0x220>)
 800758a:	f7fd fde8 	bl	800515e <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(CB_En_GPIO_Port,CB_En_Pin, GPIO_PIN_SET); //connect load
 800758e:	2201      	movs	r2, #1
 8007590:	2101      	movs	r1, #1
 8007592:	482e      	ldr	r0, [pc, #184]	; (800764c <main+0x224>)
 8007594:	f7fc f9f4 	bl	8003980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VC_En_GPIO_Port,VC_En_Pin, GPIO_PIN_SET); //enable cell voltage measurements
 8007598:	2201      	movs	r2, #1
 800759a:	2104      	movs	r1, #4
 800759c:	482b      	ldr	r0, [pc, #172]	; (800764c <main+0x224>)
 800759e:	f7fc f9ef 	bl	8003980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Temp_En_GPIO_Port,Temp_En_Pin, GPIO_PIN_SET); //connect thermistors
 80075a2:	2201      	movs	r2, #1
 80075a4:	2120      	movs	r1, #32
 80075a6:	482a      	ldr	r0, [pc, #168]	; (8007650 <main+0x228>)
 80075a8:	f7fc f9ea 	bl	8003980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CANmode_GPIO_Port,CANmode_Pin, GPIO_PIN_RESET); //enable can transmitter
 80075ac:	2200      	movs	r2, #0
 80075ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80075b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075b6:	f7fc f9e3 	bl	8003980 <HAL_GPIO_WritePin>

  sprintf(msg,">>>>> Prototype ready <<<<< \r\n");
 80075ba:	4a26      	ldr	r2, [pc, #152]	; (8007654 <main+0x22c>)
 80075bc:	4b26      	ldr	r3, [pc, #152]	; (8007658 <main+0x230>)
 80075be:	4615      	mov	r5, r2
 80075c0:	461c      	mov	r4, r3
 80075c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075c4:	6028      	str	r0, [r5, #0]
 80075c6:	6069      	str	r1, [r5, #4]
 80075c8:	60aa      	str	r2, [r5, #8]
 80075ca:	60eb      	str	r3, [r5, #12]
 80075cc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80075ce:	6128      	str	r0, [r5, #16]
 80075d0:	6169      	str	r1, [r5, #20]
 80075d2:	61aa      	str	r2, [r5, #24]
 80075d4:	8823      	ldrh	r3, [r4, #0]
 80075d6:	78a2      	ldrb	r2, [r4, #2]
 80075d8:	83ab      	strh	r3, [r5, #28]
 80075da:	4613      	mov	r3, r2
 80075dc:	77ab      	strb	r3, [r5, #30]
  HAL_UART_Transmit(&huart3,msg, strlen(msg), HAL_MAX_DELAY);
 80075de:	481d      	ldr	r0, [pc, #116]	; (8007654 <main+0x22c>)
 80075e0:	f7f8 fe08 	bl	80001f4 <strlen>
 80075e4:	4603      	mov	r3, r0
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ec:	4919      	ldr	r1, [pc, #100]	; (8007654 <main+0x22c>)
 80075ee:	481b      	ldr	r0, [pc, #108]	; (800765c <main+0x234>)
 80075f0:	f7fe fff9 	bl	80065e6 <HAL_UART_Transmit>

  HAL_UART_Receive_DMA(&huart3,TxRx_data,8); //re-enable DMA for UART
 80075f4:	2208      	movs	r2, #8
 80075f6:	491a      	ldr	r1, [pc, #104]	; (8007660 <main+0x238>)
 80075f8:	4818      	ldr	r0, [pc, #96]	; (800765c <main+0x234>)
 80075fa:	f7ff f881 	bl	8006700 <HAL_UART_Receive_DMA>
//**********************************************************************************************************************************************************
//--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE--WHILE
//**********************************************************************************************************************************************************
  while (1)
  {
	  if(goToSleepFlag == 1){goToSleep();goto sleepReset;} //allows correct exiting of sleep from CAN induced sleep
 80075fe:	4b19      	ldr	r3, [pc, #100]	; (8007664 <main+0x23c>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <main+0x1e4>
 8007606:	f003 fa73 	bl	800aaf0 <goToSleep>
 800760a:	e712      	b.n	8007432 <main+0xa>
	  if(errorCode != 0){blinkErrorCode();}
 800760c:	4b16      	ldr	r3, [pc, #88]	; (8007668 <main+0x240>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d02b      	beq.n	800766c <main+0x244>
 8007614:	f003 f882 	bl	800a71c <blinkErrorCode>
 8007618:	e02f      	b.n	800767a <main+0x252>
 800761a:	bf00      	nop
 800761c:	20001328 	.word	0x20001328
 8007620:	2000212c 	.word	0x2000212c
 8007624:	200008e0 	.word	0x200008e0
 8007628:	200023ac 	.word	0x200023ac
 800762c:	2000056c 	.word	0x2000056c
 8007630:	2000002c 	.word	0x2000002c
 8007634:	200012e8 	.word	0x200012e8
 8007638:	200007f4 	.word	0x200007f4
 800763c:	20000518 	.word	0x20000518
 8007640:	20000848 	.word	0x20000848
 8007644:	20002fec 	.word	0x20002fec
 8007648:	20002fac 	.word	0x20002fac
 800764c:	48000400 	.word	0x48000400
 8007650:	48000800 	.word	0x48000800
 8007654:	200005b0 	.word	0x200005b0
 8007658:	0800da10 	.word	0x0800da10
 800765c:	200004a8 	.word	0x200004a8
 8007660:	200012e0 	.word	0x200012e0
 8007664:	20000311 	.word	0x20000311
 8007668:	200003fc 	.word	0x200003fc
	  else{HAL_GPIO_WritePin(timingPin_GPIO_Port, timingPin_Pin,GPIO_PIN_SET);}
 800766c:	2201      	movs	r2, #1
 800766e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007676:	f7fc f983 	bl	8003980 <HAL_GPIO_WritePin>

 	 //UNCOMMENT FOR HUMAN READABLE UART REPORTING
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 800767a:	4b87      	ldr	r3, [pc, #540]	; (8007898 <main+0x470>)
 800767c:	edd3 7a00 	vldr	s15, [r3]
 8007680:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800789c <main+0x474>
 8007684:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 8007688:	eebc 8ae7 	vcvt.u32.f32	s16, s15
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 800768c:	4b84      	ldr	r3, [pc, #528]	; (80078a0 <main+0x478>)
 800768e:	edd3 7a00 	vldr	s15, [r3]
 8007692:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800789c <main+0x474>
 8007696:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 800769a:	eefc 8ae7 	vcvt.u32.f32	s17, s15
 800769e:	4b81      	ldr	r3, [pc, #516]	; (80078a4 <main+0x47c>)
 80076a0:	edd3 7a00 	vldr	s15, [r3]
 80076a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 80076ac:	4b7e      	ldr	r3, [pc, #504]	; (80078a8 <main+0x480>)
 80076ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076b2:	4618      	mov	r0, r3
 80076b4:	4621      	mov	r1, r4
 80076b6:	f7f9 fa67 	bl	8000b88 <__aeabi_d2uiz>
 80076ba:	6538      	str	r0, [r7, #80]	; 0x50
 80076bc:	4b7b      	ldr	r3, [pc, #492]	; (80078ac <main+0x484>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	64fb      	str	r3, [r7, #76]	; 0x4c
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 80076c2:	4b7b      	ldr	r3, [pc, #492]	; (80078b0 <main+0x488>)
 80076c4:	edd3 7a00 	vldr	s15, [r3]
 80076c8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800789c <main+0x474>
 80076cc:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 80076d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076d4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 80076d8:	4b76      	ldr	r3, [pc, #472]	; (80078b4 <main+0x48c>)
 80076da:	edd3 7a00 	vldr	s15, [r3]
 80076de:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800789c <main+0x474>
 80076e2:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 80076e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ea:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 80076ee:	4b72      	ldr	r3, [pc, #456]	; (80078b8 <main+0x490>)
 80076f0:	edd3 7a00 	vldr	s15, [r3]
 80076f4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800789c <main+0x474>
 80076f8:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 80076fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007700:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 8007704:	4b6d      	ldr	r3, [pc, #436]	; (80078bc <main+0x494>)
 8007706:	edd3 7a00 	vldr	s15, [r3]
 800770a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800789c <main+0x474>
 800770e:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 8007712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007716:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 800771a:	4b69      	ldr	r3, [pc, #420]	; (80078c0 <main+0x498>)
 800771c:	edd3 7a00 	vldr	s15, [r3]
 8007720:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800789c <main+0x474>
 8007724:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 8007728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800772c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 8007730:	4b64      	ldr	r3, [pc, #400]	; (80078c4 <main+0x49c>)
 8007732:	edd3 7a00 	vldr	s15, [r3]
 8007736:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800789c <main+0x474>
 800773a:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 800773e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007742:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 8007746:	4b60      	ldr	r3, [pc, #384]	; (80078c8 <main+0x4a0>)
 8007748:	edd3 7a00 	vldr	s15, [r3]
 800774c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800789c <main+0x474>
 8007750:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 8007754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007758:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 800775c:	4b5b      	ldr	r3, [pc, #364]	; (80078cc <main+0x4a4>)
 800775e:	edd3 7a00 	vldr	s15, [r3]
 8007762:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800789c <main+0x474>
 8007766:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 800776a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
 8007772:	4b57      	ldr	r3, [pc, #348]	; (80078d0 <main+0x4a8>)
 8007774:	edd3 7a00 	vldr	s15, [r3]
 8007778:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800789c <main+0x474>
 800777c:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(msg,"iD:%lu iC:%lu iSP:%lu Cap:%lu D:%lu V1:%lu V2:%lu V3:%lu V4:%lu V5:%lu V6:%lu vO:%lu vSP:%lu vI:%lu T1:%lu T2:%lu T3:%lu T4:%lu bstEn:%lu chgEn:%lu blEn:%lu blCpl:%lu E1:%lu E2:%lu E3:%lu E4:%lu E5:%lu E6:%lu E7:%lu E8:%lu \r\n",
 8007780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007784:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8007788:	4b52      	ldr	r3, [pc, #328]	; (80078d4 <main+0x4ac>)
 800778a:	edd3 7a00 	vldr	s15, [r3]
 800778e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007792:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8007796:	4b50      	ldr	r3, [pc, #320]	; (80078d8 <main+0x4b0>)
 8007798:	edd3 7a00 	vldr	s15, [r3]
 800779c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a0:	edc7 7a08 	vstr	s15, [r7, #32]
 80077a4:	4b4d      	ldr	r3, [pc, #308]	; (80078dc <main+0x4b4>)
 80077a6:	edd3 7a00 	vldr	s15, [r3]
 80077aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ae:	edc7 7a07 	vstr	s15, [r7, #28]
 80077b2:	4b4b      	ldr	r3, [pc, #300]	; (80078e0 <main+0x4b8>)
 80077b4:	edd3 7a00 	vldr	s15, [r3]
 80077b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077bc:	edc7 7a06 	vstr	s15, [r7, #24]
 80077c0:	4b48      	ldr	r3, [pc, #288]	; (80078e4 <main+0x4bc>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	4b48      	ldr	r3, [pc, #288]	; (80078e8 <main+0x4c0>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	4b47      	ldr	r3, [pc, #284]	; (80078ec <main+0x4c4>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	4b47      	ldr	r3, [pc, #284]	; (80078f0 <main+0x4c8>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	60bb      	str	r3, [r7, #8]
 80077d8:	4b46      	ldr	r3, [pc, #280]	; (80078f4 <main+0x4cc>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	607b      	str	r3, [r7, #4]
 80077de:	4b46      	ldr	r3, [pc, #280]	; (80078f8 <main+0x4d0>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	461e      	mov	r6, r3
 80077e4:	4b45      	ldr	r3, [pc, #276]	; (80078fc <main+0x4d4>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	461d      	mov	r5, r3
 80077ea:	4b45      	ldr	r3, [pc, #276]	; (8007900 <main+0x4d8>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	461c      	mov	r4, r3
 80077f0:	4b44      	ldr	r3, [pc, #272]	; (8007904 <main+0x4dc>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	4b44      	ldr	r3, [pc, #272]	; (8007908 <main+0x4e0>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	4619      	mov	r1, r3
 80077fc:	4b43      	ldr	r3, [pc, #268]	; (800790c <main+0x4e4>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	4b43      	ldr	r3, [pc, #268]	; (8007910 <main+0x4e8>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	931b      	str	r3, [sp, #108]	; 0x6c
 8007808:	921a      	str	r2, [sp, #104]	; 0x68
 800780a:	9119      	str	r1, [sp, #100]	; 0x64
 800780c:	9018      	str	r0, [sp, #96]	; 0x60
 800780e:	9417      	str	r4, [sp, #92]	; 0x5c
 8007810:	9516      	str	r5, [sp, #88]	; 0x58
 8007812:	9615      	str	r6, [sp, #84]	; 0x54
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	9214      	str	r2, [sp, #80]	; 0x50
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	9213      	str	r2, [sp, #76]	; 0x4c
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	9212      	str	r2, [sp, #72]	; 0x48
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	9211      	str	r2, [sp, #68]	; 0x44
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	9210      	str	r2, [sp, #64]	; 0x40
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	920f      	str	r2, [sp, #60]	; 0x3c
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	920e      	str	r2, [sp, #56]	; 0x38
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	920d      	str	r2, [sp, #52]	; 0x34
 8007834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007836:	920c      	str	r2, [sp, #48]	; 0x30
 8007838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783a:	920b      	str	r2, [sp, #44]	; 0x2c
 800783c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800783e:	920a      	str	r2, [sp, #40]	; 0x28
 8007840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007842:	9209      	str	r2, [sp, #36]	; 0x24
 8007844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007846:	9208      	str	r2, [sp, #32]
 8007848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800784a:	9207      	str	r2, [sp, #28]
 800784c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800784e:	9206      	str	r2, [sp, #24]
 8007850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007852:	9205      	str	r2, [sp, #20]
 8007854:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007856:	9204      	str	r2, [sp, #16]
 8007858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800785a:	9203      	str	r2, [sp, #12]
 800785c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800785e:	9302      	str	r3, [sp, #8]
 8007860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007862:	9301      	str	r3, [sp, #4]
 8007864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	ee18 3a90 	vmov	r3, s17
 800786c:	ee18 2a10 	vmov	r2, s16
 8007870:	4928      	ldr	r1, [pc, #160]	; (8007914 <main+0x4ec>)
 8007872:	4829      	ldr	r0, [pc, #164]	; (8007918 <main+0x4f0>)
 8007874:	f004 f978 	bl	800bb68 <siprintf>
			   boostEnable,chargerEnable,balanceEnable,balancingComplete,battOverTempTrip,battUnderTempTrip,battOverVoltTrip,battUnderVoltTrip,battOverCurrTrip,battRegenCurrTrip,chgrOverTempTrip,chgrUnderTempTrip);
	  HAL_UART_Transmit(&huart3,msg, strlen(msg), HAL_MAX_DELAY);
 8007878:	4827      	ldr	r0, [pc, #156]	; (8007918 <main+0x4f0>)
 800787a:	f7f8 fcbb 	bl	80001f4 <strlen>
 800787e:	4603      	mov	r3, r0
 8007880:	b29a      	uxth	r2, r3
 8007882:	f04f 33ff 	mov.w	r3, #4294967295
 8007886:	4924      	ldr	r1, [pc, #144]	; (8007918 <main+0x4f0>)
 8007888:	4824      	ldr	r0, [pc, #144]	; (800791c <main+0x4f4>)
 800788a:	f7fe feac 	bl	80065e6 <HAL_UART_Transmit>
			   (uint32_t)(IOutDchg*1000),(uint32_t)(IOutChg*1000),(uint32_t)currentLimit,(uint32_t)batteryCharge,MOSFET,(uint32_t)(vCell1*1000),(uint32_t)(vCell2*1000),(uint32_t)(vCell3*1000),(uint32_t)(vCell4*1000),(uint32_t)(vCell5*1000),(uint32_t)(vCell6*1000),(uint32_t)(VC6*1000),(uint32_t)(setpoint_V*1000),(uint32_t)(vIn*1000),(uint32_t)temp1,(uint32_t)temp2,(uint32_t)temp3,(uint32_t)temp4,
			   boostEnable,chargerEnable,balanceEnable,balancingComplete,battOverTempTrip,battUnderTempTrip,battOverVoltTrip,battUnderVoltTrip,battOverCurrTrip,battRegenCurrTrip,chgrOverTempTrip,chgrUnderTempTrip);
	  HAL_UART_Transmit(&huart3,msg, strlen(msg), HAL_MAX_DELAY);
	  */

	  HAL_Delay(200);
 800788e:	20c8      	movs	r0, #200	; 0xc8
 8007890:	f7f9 fa50 	bl	8000d34 <HAL_Delay>
	  if(goToSleepFlag == 1){goToSleep();goto sleepReset;} //allows correct exiting of sleep from CAN induced sleep
 8007894:	e6b3      	b.n	80075fe <main+0x1d6>
 8007896:	bf00      	nop
 8007898:	200003f8 	.word	0x200003f8
 800789c:	447a0000 	.word	0x447a0000
 80078a0:	200003f4 	.word	0x200003f4
 80078a4:	20000098 	.word	0x20000098
 80078a8:	20000030 	.word	0x20000030
 80078ac:	200000b0 	.word	0x200000b0
 80078b0:	200003d8 	.word	0x200003d8
 80078b4:	200003dc 	.word	0x200003dc
 80078b8:	200003e0 	.word	0x200003e0
 80078bc:	200003e4 	.word	0x200003e4
 80078c0:	200003e8 	.word	0x200003e8
 80078c4:	200003ec 	.word	0x200003ec
 80078c8:	200003d4 	.word	0x200003d4
 80078cc:	2000009c 	.word	0x2000009c
 80078d0:	200003f0 	.word	0x200003f0
 80078d4:	20000358 	.word	0x20000358
 80078d8:	2000035c 	.word	0x2000035c
 80078dc:	20000360 	.word	0x20000360
 80078e0:	20000364 	.word	0x20000364
 80078e4:	2000030c 	.word	0x2000030c
 80078e8:	2000030d 	.word	0x2000030d
 80078ec:	2000030f 	.word	0x2000030f
 80078f0:	2000030e 	.word	0x2000030e
 80078f4:	20000317 	.word	0x20000317
 80078f8:	20000318 	.word	0x20000318
 80078fc:	20000315 	.word	0x20000315
 8007900:	20000316 	.word	0x20000316
 8007904:	20000314 	.word	0x20000314
 8007908:	2000031b 	.word	0x2000031b
 800790c:	20000319 	.word	0x20000319
 8007910:	2000031a 	.word	0x2000031a
 8007914:	0800da30 	.word	0x0800da30
 8007918:	200005b0 	.word	0x200005b0
 800791c:	200004a8 	.word	0x200004a8

08007920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b0a6      	sub	sp, #152	; 0x98
 8007924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007926:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800792a:	2228      	movs	r2, #40	; 0x28
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f004 f912 	bl	800bb58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007934:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	605a      	str	r2, [r3, #4]
 800793e:	609a      	str	r2, [r3, #8]
 8007940:	60da      	str	r2, [r3, #12]
 8007942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007944:	1d3b      	adds	r3, r7, #4
 8007946:	2258      	movs	r2, #88	; 0x58
 8007948:	2100      	movs	r1, #0
 800794a:	4618      	mov	r0, r3
 800794c:	f004 f904 	bl	800bb58 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007950:	2302      	movs	r3, #2
 8007952:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007954:	2301      	movs	r3, #1
 8007956:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007958:	2310      	movs	r3, #16
 800795a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800795e:	2302      	movs	r3, #2
 8007960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007968:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800796c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007970:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8007974:	2300      	movs	r3, #0
 8007976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800797a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800797e:	4618      	mov	r0, r3
 8007980:	f7fc f862 	bl	8003a48 <HAL_RCC_OscConfig>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800798a:	f003 fc73 	bl	800b274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800798e:	230f      	movs	r3, #15
 8007990:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007992:	2302      	movs	r3, #2
 8007994:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007996:	2300      	movs	r3, #0
 8007998:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800799a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800799e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80079a0:	2300      	movs	r3, #0
 80079a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80079a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80079a8:	2102      	movs	r1, #2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fc ff36 	bl	800481c <HAL_RCC_ClockConfig>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80079b6:	f003 fc5d 	bl	800b274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_TIM1
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <SystemClock_Config+0xc8>)
 80079bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80079c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079c6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079cc:	1d3b      	adds	r3, r7, #4
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fd f97e 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80079da:	f003 fc4b 	bl	800b274 <Error_Handler>
  }
}
 80079de:	bf00      	nop
 80079e0:	3798      	adds	r7, #152	; 0x98
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	00101004 	.word	0x00101004

080079ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	; 0x28
 80079f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80079f2:	f107 031c 	add.w	r3, r7, #28
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	605a      	str	r2, [r3, #4]
 80079fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80079fe:	1d3b      	adds	r3, r7, #4
 8007a00:	2200      	movs	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	605a      	str	r2, [r3, #4]
 8007a06:	609a      	str	r2, [r3, #8]
 8007a08:	60da      	str	r2, [r3, #12]
 8007a0a:	611a      	str	r2, [r3, #16]
 8007a0c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007a0e:	4b57      	ldr	r3, [pc, #348]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007a16:	4b55      	ldr	r3, [pc, #340]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007a1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007a1e:	4b53      	ldr	r3, [pc, #332]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007a24:	4b51      	ldr	r3, [pc, #324]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a26:	2201      	movs	r2, #1
 8007a28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007a2a:	4b50      	ldr	r3, [pc, #320]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007a30:	4b4e      	ldr	r3, [pc, #312]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007a36:	4b4d      	ldr	r3, [pc, #308]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007a3c:	4b4b      	ldr	r3, [pc, #300]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007a42:	4b4a      	ldr	r3, [pc, #296]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8007a48:	4b48      	ldr	r3, [pc, #288]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a4a:	2207      	movs	r2, #7
 8007a4c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007a4e:	4b47      	ldr	r3, [pc, #284]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007a54:	4b45      	ldr	r3, [pc, #276]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a56:	2208      	movs	r2, #8
 8007a58:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007a5a:	4b44      	ldr	r3, [pc, #272]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007a60:	4b42      	ldr	r3, [pc, #264]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007a66:	4841      	ldr	r0, [pc, #260]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a68:	f7f9 f9ba 	bl	8000de0 <HAL_ADC_Init>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8007a72:	f003 fbff 	bl	800b274 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007a76:	2300      	movs	r3, #0
 8007a78:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007a7a:	f107 031c 	add.w	r3, r7, #28
 8007a7e:	4619      	mov	r1, r3
 8007a80:	483a      	ldr	r0, [pc, #232]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007a82:	f7fa f875 	bl	8001b70 <HAL_ADCEx_MultiModeConfigChannel>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8007a8c:	f003 fbf2 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007a90:	2304      	movs	r3, #4
 8007a92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007a94:	2301      	movs	r3, #1
 8007a96:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007aa8:	1d3b      	adds	r3, r7, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	482f      	ldr	r0, [pc, #188]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007aae:	f7f9 fd73 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8007ab8:	f003 fbdc 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007abc:	2301      	movs	r3, #1
 8007abe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ac4:	1d3b      	adds	r3, r7, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4828      	ldr	r0, [pc, #160]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007aca:	f7f9 fd65 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8007ad4:	f003 fbce 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007ad8:	2304      	movs	r3, #4
 8007ada:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007adc:	2303      	movs	r3, #3
 8007ade:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ae0:	1d3b      	adds	r3, r7, #4
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4821      	ldr	r0, [pc, #132]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007ae6:	f7f9 fd57 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8007af0:	f003 fbc0 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007af4:	2302      	movs	r3, #2
 8007af6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007af8:	2304      	movs	r3, #4
 8007afa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007afc:	1d3b      	adds	r3, r7, #4
 8007afe:	4619      	mov	r1, r3
 8007b00:	481a      	ldr	r0, [pc, #104]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007b02:	f7f9 fd49 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8007b0c:	f003 fbb2 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007b10:	2304      	movs	r3, #4
 8007b12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007b14:	2305      	movs	r3, #5
 8007b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b18:	1d3b      	adds	r3, r7, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4813      	ldr	r0, [pc, #76]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007b1e:	f7f9 fd3b 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8007b28:	f003 fba4 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007b30:	2306      	movs	r3, #6
 8007b32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b34:	1d3b      	adds	r3, r7, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	480c      	ldr	r0, [pc, #48]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007b3a:	f7f9 fd2d 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8007b44:	f003 fb96 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007b48:	2304      	movs	r3, #4
 8007b4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8007b4c:	2307      	movs	r3, #7
 8007b4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007b50:	1d3b      	adds	r3, r7, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	4805      	ldr	r0, [pc, #20]	; (8007b6c <MX_ADC1_Init+0x180>)
 8007b56:	f7f9 fd1f 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8007b60:	f003 fb88 	bl	800b274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007b64:	bf00      	nop
 8007b66:	3728      	adds	r7, #40	; 0x28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	200007f4 	.word	0x200007f4

08007b70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007b76:	463b      	mov	r3, r7
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	605a      	str	r2, [r3, #4]
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	60da      	str	r2, [r3, #12]
 8007b82:	611a      	str	r2, [r3, #16]
 8007b84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8007b86:	4b42      	ldr	r3, [pc, #264]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007b88:	4a42      	ldr	r2, [pc, #264]	; (8007c94 <MX_ADC2_Init+0x124>)
 8007b8a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007b8c:	4b40      	ldr	r3, [pc, #256]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007b92:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007b94:	4b3e      	ldr	r3, [pc, #248]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007b9a:	4b3d      	ldr	r3, [pc, #244]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8007ba0:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007ba6:	4b3a      	ldr	r3, [pc, #232]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007bac:	4b38      	ldr	r3, [pc, #224]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007bb2:	4b37      	ldr	r3, [pc, #220]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007bb8:	4b35      	ldr	r3, [pc, #212]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8007bbe:	4b34      	ldr	r3, [pc, #208]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8007bc4:	4b32      	ldr	r3, [pc, #200]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007bca:	4b31      	ldr	r3, [pc, #196]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007bcc:	2208      	movs	r2, #8
 8007bce:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8007bd0:	4b2f      	ldr	r3, [pc, #188]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	619a      	str	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007bd6:	4b2e      	ldr	r3, [pc, #184]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007bdc:	482c      	ldr	r0, [pc, #176]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007bde:	f7f9 f8ff 	bl	8000de0 <HAL_ADC_Init>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <MX_ADC2_Init+0x7c>
  {
    Error_Handler();
 8007be8:	f003 fb44 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007bec:	2301      	movs	r3, #1
 8007bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007c04:	463b      	mov	r3, r7
 8007c06:	4619      	mov	r1, r3
 8007c08:	4821      	ldr	r0, [pc, #132]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007c0a:	f7f9 fcc5 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 8007c14:	f003 fb2e 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007c20:	463b      	mov	r3, r7
 8007c22:	4619      	mov	r1, r3
 8007c24:	481a      	ldr	r0, [pc, #104]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007c26:	f7f9 fcb7 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <MX_ADC2_Init+0xc4>
  {
    Error_Handler();
 8007c30:	f003 fb20 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007c34:	2303      	movs	r3, #3
 8007c36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007c3c:	463b      	mov	r3, r7
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4813      	ldr	r0, [pc, #76]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007c42:	f7f9 fca9 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <MX_ADC2_Init+0xe0>
  {
    Error_Handler();
 8007c4c:	f003 fb12 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007c50:	2304      	movs	r3, #4
 8007c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007c54:	2304      	movs	r3, #4
 8007c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007c58:	463b      	mov	r3, r7
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	480c      	ldr	r0, [pc, #48]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007c5e:	f7f9 fc9b 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <MX_ADC2_Init+0xfc>
  {
    Error_Handler();
 8007c68:	f003 fb04 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8007c6c:	2305      	movs	r3, #5
 8007c6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007c70:	2305      	movs	r3, #5
 8007c72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007c74:	463b      	mov	r3, r7
 8007c76:	4619      	mov	r1, r3
 8007c78:	4805      	ldr	r0, [pc, #20]	; (8007c90 <MX_ADC2_Init+0x120>)
 8007c7a:	f7f9 fc8d 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <MX_ADC2_Init+0x118>
  {
    Error_Handler();
 8007c84:	f003 faf6 	bl	800b274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8007c88:	bf00      	nop
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000518 	.word	0x20000518
 8007c94:	50000100 	.word	0x50000100

08007c98 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08a      	sub	sp, #40	; 0x28
 8007c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007c9e:	f107 031c 	add.w	r3, r7, #28
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	605a      	str	r2, [r3, #4]
 8007ca8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007caa:	1d3b      	adds	r3, r7, #4
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	605a      	str	r2, [r3, #4]
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	60da      	str	r2, [r3, #12]
 8007cb6:	611a      	str	r2, [r3, #16]
 8007cb8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8007cba:	4b46      	ldr	r3, [pc, #280]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007cbc:	4a46      	ldr	r2, [pc, #280]	; (8007dd8 <MX_ADC3_Init+0x140>)
 8007cbe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007cc0:	4b44      	ldr	r3, [pc, #272]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007cc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007cc6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8007cc8:	4b42      	ldr	r3, [pc, #264]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007cce:	4b41      	ldr	r3, [pc, #260]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8007cd4:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007cda:	4b3e      	ldr	r3, [pc, #248]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007ce0:	4b3c      	ldr	r3, [pc, #240]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007ce6:	4b3b      	ldr	r3, [pc, #236]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007ce8:	2201      	movs	r2, #1
 8007cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007cec:	4b39      	ldr	r3, [pc, #228]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 8007cf2:	4b38      	ldr	r3, [pc, #224]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007cf4:	2205      	movs	r2, #5
 8007cf6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8007cf8:	4b36      	ldr	r3, [pc, #216]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007cfe:	4b35      	ldr	r3, [pc, #212]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007d00:	2208      	movs	r2, #8
 8007d02:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8007d04:	4b33      	ldr	r3, [pc, #204]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	619a      	str	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007d0a:	4b32      	ldr	r3, [pc, #200]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007d10:	4830      	ldr	r0, [pc, #192]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007d12:	f7f9 f865 	bl	8000de0 <HAL_ADC_Init>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8007d1c:	f003 faaa 	bl	800b274 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007d20:	2300      	movs	r3, #0
 8007d22:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8007d24:	f107 031c 	add.w	r3, r7, #28
 8007d28:	4619      	mov	r1, r3
 8007d2a:	482a      	ldr	r0, [pc, #168]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007d2c:	f7f9 ff20 	bl	8001b70 <HAL_ADCEx_MultiModeConfigChannel>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <MX_ADC3_Init+0xa2>
  {
    Error_Handler();
 8007d36:	f003 fa9d 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007d42:	2300      	movs	r3, #0
 8007d44:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007d52:	1d3b      	adds	r3, r7, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	481f      	ldr	r0, [pc, #124]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007d58:	f7f9 fc1e 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8007d62:	f003 fa87 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8007d66:	2305      	movs	r3, #5
 8007d68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007d6e:	1d3b      	adds	r3, r7, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	4818      	ldr	r0, [pc, #96]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007d74:	f7f9 fc10 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8007d7e:	f003 fa79 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007d82:	2303      	movs	r3, #3
 8007d84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007d86:	1d3b      	adds	r3, r7, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4812      	ldr	r0, [pc, #72]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007d8c:	f7f9 fc04 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <MX_ADC3_Init+0x102>
  {
    Error_Handler();
 8007d96:	f003 fa6d 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007d9a:	2304      	movs	r3, #4
 8007d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007d9e:	1d3b      	adds	r3, r7, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	480c      	ldr	r0, [pc, #48]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007da4:	f7f9 fbf8 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8007dae:	f003 fa61 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007db2:	2305      	movs	r3, #5
 8007db4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007db6:	1d3b      	adds	r3, r7, #4
 8007db8:	4619      	mov	r1, r3
 8007dba:	4806      	ldr	r0, [pc, #24]	; (8007dd4 <MX_ADC3_Init+0x13c>)
 8007dbc:	f7f9 fbec 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8007dc6:	f003 fa55 	bl	800b274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8007dca:	bf00      	nop
 8007dcc:	3728      	adds	r7, #40	; 0x28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20000848 	.word	0x20000848
 8007dd8:	50000400 	.word	0x50000400

08007ddc <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007de2:	463b      	mov	r3, r7
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	60da      	str	r2, [r3, #12]
 8007dee:	611a      	str	r2, [r3, #16]
 8007df0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config 
  */
  hadc4.Instance = ADC4;
 8007df2:	4b47      	ldr	r3, [pc, #284]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007df4:	4a47      	ldr	r2, [pc, #284]	; (8007f14 <MX_ADC4_Init+0x138>)
 8007df6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007df8:	4b45      	ldr	r3, [pc, #276]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007dfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007dfe:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8007e00:	4b43      	ldr	r3, [pc, #268]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007e06:	4b42      	ldr	r3, [pc, #264]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8007e0c:	4b40      	ldr	r3, [pc, #256]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	61da      	str	r2, [r3, #28]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8007e12:	4b3f      	ldr	r3, [pc, #252]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	625a      	str	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007e18:	4b3d      	ldr	r3, [pc, #244]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007e1e:	4b3c      	ldr	r3, [pc, #240]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007e24:	4b3a      	ldr	r3, [pc, #232]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 6;
 8007e2a:	4b39      	ldr	r3, [pc, #228]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e2c:	2206      	movs	r2, #6
 8007e2e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8007e30:	4b37      	ldr	r3, [pc, #220]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007e36:	4b36      	ldr	r3, [pc, #216]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e38:	2208      	movs	r2, #8
 8007e3a:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8007e3c:	4b34      	ldr	r3, [pc, #208]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	619a      	str	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007e42:	4b33      	ldr	r3, [pc, #204]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8007e48:	4831      	ldr	r0, [pc, #196]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e4a:	f7f8 ffc9 	bl	8000de0 <HAL_ADC_Init>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <MX_ADC4_Init+0x7c>
  {
    Error_Handler();
 8007e54:	f003 fa0e 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8007e70:	463b      	mov	r3, r7
 8007e72:	4619      	mov	r1, r3
 8007e74:	4826      	ldr	r0, [pc, #152]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e76:	f7f9 fb8f 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <MX_ADC4_Init+0xa8>
  {
    Error_Handler();
 8007e80:	f003 f9f8 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8007e84:	2305      	movs	r3, #5
 8007e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	4619      	mov	r1, r3
 8007e90:	481f      	ldr	r0, [pc, #124]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007e92:	f7f9 fb81 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <MX_ADC4_Init+0xc4>
  {
    Error_Handler();
 8007e9c:	f003 f9ea 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4819      	ldr	r0, [pc, #100]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007eaa:	f7f9 fb75 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8007eb4:	f003 f9de 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007eb8:	2304      	movs	r3, #4
 8007eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007ebc:	2304      	movs	r3, #4
 8007ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4812      	ldr	r0, [pc, #72]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007ec6:	f7f9 fb67 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <MX_ADC4_Init+0xf8>
  {
    Error_Handler();
 8007ed0:	f003 f9d0 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8007ed4:	2305      	movs	r3, #5
 8007ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007ed8:	2305      	movs	r3, #5
 8007eda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8007edc:	463b      	mov	r3, r7
 8007ede:	4619      	mov	r1, r3
 8007ee0:	480b      	ldr	r0, [pc, #44]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007ee2:	f7f9 fb59 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <MX_ADC4_Init+0x114>
  {
    Error_Handler();
 8007eec:	f003 f9c2 	bl	800b274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007ef0:	2306      	movs	r3, #6
 8007ef2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8007ef4:	463b      	mov	r3, r7
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4805      	ldr	r0, [pc, #20]	; (8007f10 <MX_ADC4_Init+0x134>)
 8007efa:	f7f9 fb4d 	bl	8001598 <HAL_ADC_ConfigChannel>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <MX_ADC4_Init+0x12c>
  {
    Error_Handler();
 8007f04:	f003 f9b6 	bl	800b274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8007f08:	bf00      	nop
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20002fec 	.word	0x20002fec
 8007f14:	50000500 	.word	0x50000500

08007f18 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */
	  hcan.Instance = CAN;               // Register base address
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f1e:	4a1b      	ldr	r2, [pc, #108]	; (8007f8c <MX_CAN_Init+0x74>)
 8007f20:	601a      	str	r2, [r3, #0]
	  hcan.Init.Prescaler = 16;           //Specifies the length of a time quantum.
 8007f22:	4b19      	ldr	r3, [pc, #100]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f24:	2210      	movs	r2, #16
 8007f26:	605a      	str	r2, [r3, #4]
	  hcan.pTxMsg = &myTxMessage;         //Pointer to transmit structure
 8007f28:	4b17      	ldr	r3, [pc, #92]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f2a:	4a19      	ldr	r2, [pc, #100]	; (8007f90 <MX_CAN_Init+0x78>)
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30
	  hcan.pRxMsg = &myRxMessage;		  //Pointer to reception structure for RX FIFO0 msg
 8007f2e:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f30:	4a18      	ldr	r2, [pc, #96]	; (8007f94 <MX_CAN_Init+0x7c>)
 8007f32:	635a      	str	r2, [r3, #52]	; 0x34
	  hcan.Init.Mode = CAN_MODE_NORMAL;	  //Specifies the CAN operating mode : Normal mode
 8007f34:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	609a      	str	r2, [r3, #8]
	  hcan.Init.SJW = CAN_SJW_1TQ;        //Specifies the maximum number of time quanta the CAN hardware is allowed to lengthen or shorten a bit to perform resynchronization
 8007f3a:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	60da      	str	r2, [r3, #12]
	  hcan.Init.BS1 = CAN_BS1_11TQ;		  //Specifies the number of time quanta in Bit Segment 1
 8007f40:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f42:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8007f46:	611a      	str	r2, [r3, #16]
	  hcan.Init.BS2 = CAN_BS2_5TQ;		  //Specifies the number of time quanta in Bit Segment 2
 8007f48:	4b0f      	ldr	r3, [pc, #60]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f4a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007f4e:	615a      	str	r2, [r3, #20]
	  hcan.Init.TTCM = DISABLE;			  //Enable or disable the time triggered communication mode
 8007f50:	4b0d      	ldr	r3, [pc, #52]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	619a      	str	r2, [r3, #24]
	  hcan.Init.ABOM = ENABLE;			  //Enable or disable the automatic bus-off management
 8007f56:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f58:	2201      	movs	r2, #1
 8007f5a:	61da      	str	r2, [r3, #28]
	  hcan.Init.AWUM = ENABLE;			  //Enable or disable the automatic wake-up mode
 8007f5c:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	621a      	str	r2, [r3, #32]
	  hcan.Init.NART = DISABLE;			  //Enable or disable the non-automatic retransmission mode
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	625a      	str	r2, [r3, #36]	; 0x24
	  hcan.Init.RFLM = DISABLE;		      //Enable or disable the receive FIFO Locked mode
 8007f68:	4b07      	ldr	r3, [pc, #28]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	629a      	str	r2, [r3, #40]	; 0x28
	  hcan.Init.TXFP = DISABLE;           //Enable or disable the transmit FIFO priority
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007f74:	4804      	ldr	r0, [pc, #16]	; (8007f88 <MX_CAN_Init+0x70>)
 8007f76:	f7fa f8bd 	bl	80020f4 <HAL_CAN_Init>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <MX_CAN_Init+0x6c>
	  {
		  Error_Handler();
 8007f80:	f003 f978 	bl	800b274 <Error_Handler>

  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8007f84:	bf00      	nop
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	2000056c 	.word	0x2000056c
 8007f8c:	40006400 	.word	0x40006400
 8007f90:	200002c4 	.word	0x200002c4
 8007f94:	200002e0 	.word	0x200002e0

08007f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b09a      	sub	sp, #104	; 0x68
 8007f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	605a      	str	r2, [r3, #4]
 8007fa8:	609a      	str	r2, [r3, #8]
 8007faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	605a      	str	r2, [r3, #4]
 8007fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007fb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	609a      	str	r2, [r3, #8]
 8007fc4:	60da      	str	r2, [r3, #12]
 8007fc6:	611a      	str	r2, [r3, #16]
 8007fc8:	615a      	str	r2, [r3, #20]
 8007fca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007fcc:	1d3b      	adds	r3, r7, #4
 8007fce:	222c      	movs	r2, #44	; 0x2c
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f003 fdc0 	bl	800bb58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007fd8:	4b49      	ldr	r3, [pc, #292]	; (8008100 <MX_TIM1_Init+0x168>)
 8007fda:	4a4a      	ldr	r2, [pc, #296]	; (8008104 <MX_TIM1_Init+0x16c>)
 8007fdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007fde:	4b48      	ldr	r3, [pc, #288]	; (8008100 <MX_TIM1_Init+0x168>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fe4:	4b46      	ldr	r3, [pc, #280]	; (8008100 <MX_TIM1_Init+0x168>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8007fea:	4b45      	ldr	r3, [pc, #276]	; (8008100 <MX_TIM1_Init+0x168>)
 8007fec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ff0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ff2:	4b43      	ldr	r3, [pc, #268]	; (8008100 <MX_TIM1_Init+0x168>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007ff8:	4b41      	ldr	r3, [pc, #260]	; (8008100 <MX_TIM1_Init+0x168>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ffe:	4b40      	ldr	r3, [pc, #256]	; (8008100 <MX_TIM1_Init+0x168>)
 8008000:	2200      	movs	r2, #0
 8008002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008004:	483e      	ldr	r0, [pc, #248]	; (8008100 <MX_TIM1_Init+0x168>)
 8008006:	f7fd f87f 	bl	8005108 <HAL_TIM_Base_Init>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8008010:	f003 f930 	bl	800b274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008018:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800801a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800801e:	4619      	mov	r1, r3
 8008020:	4837      	ldr	r0, [pc, #220]	; (8008100 <MX_TIM1_Init+0x168>)
 8008022:	f7fd fad0 	bl	80055c6 <HAL_TIM_ConfigClockSource>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800802c:	f003 f922 	bl	800b274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008030:	4833      	ldr	r0, [pc, #204]	; (8008100 <MX_TIM1_Init+0x168>)
 8008032:	f7fd f8af 	bl	8005194 <HAL_TIM_PWM_Init>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800803c:	f003 f91a 	bl	800b274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008040:	2300      	movs	r3, #0
 8008042:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008044:	2300      	movs	r3, #0
 8008046:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008048:	2300      	movs	r3, #0
 800804a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800804c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008050:	4619      	mov	r1, r3
 8008052:	482b      	ldr	r0, [pc, #172]	; (8008100 <MX_TIM1_Init+0x168>)
 8008054:	f7fe f88e 	bl	8006174 <HAL_TIMEx_MasterConfigSynchronization>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800805e:	f003 f909 	bl	800b274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008062:	2360      	movs	r3, #96	; 0x60
 8008064:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800806a:	2300      	movs	r3, #0
 800806c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800806e:	2300      	movs	r3, #0
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008072:	2300      	movs	r3, #0
 8008074:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008076:	2300      	movs	r3, #0
 8008078:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800807a:	2300      	movs	r3, #0
 800807c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800807e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008082:	2200      	movs	r2, #0
 8008084:	4619      	mov	r1, r3
 8008086:	481e      	ldr	r0, [pc, #120]	; (8008100 <MX_TIM1_Init+0x168>)
 8008088:	f7fd ff5c 	bl	8005f44 <HAL_TIM_PWM_ConfigChannel>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8008092:	f003 f8ef 	bl	800b274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800809a:	2204      	movs	r2, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4818      	ldr	r0, [pc, #96]	; (8008100 <MX_TIM1_Init+0x168>)
 80080a0:	f7fd ff50 	bl	8005f44 <HAL_TIM_PWM_ConfigChannel>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80080aa:	f003 f8e3 	bl	800b274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80080c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80080d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80080da:	2300      	movs	r3, #0
 80080dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80080de:	1d3b      	adds	r3, r7, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	4807      	ldr	r0, [pc, #28]	; (8008100 <MX_TIM1_Init+0x168>)
 80080e4:	f7fe f8a2 	bl	800622c <HAL_TIMEx_ConfigBreakDeadTime>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80080ee:	f003 f8c1 	bl	800b274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80080f2:	4803      	ldr	r0, [pc, #12]	; (8008100 <MX_TIM1_Init+0x168>)
 80080f4:	f003 fb2c 	bl	800b750 <HAL_TIM_MspPostInit>

}
 80080f8:	bf00      	nop
 80080fa:	3768      	adds	r7, #104	; 0x68
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	200012e8 	.word	0x200012e8
 8008104:	40012c00 	.word	0x40012c00

08008108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800810e:	f107 0310 	add.w	r3, r7, #16
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	605a      	str	r2, [r3, #4]
 8008118:	609a      	str	r2, [r3, #8]
 800811a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800811c:	1d3b      	adds	r3, r7, #4
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	605a      	str	r2, [r3, #4]
 8008124:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008126:	4b1e      	ldr	r3, [pc, #120]	; (80081a0 <MX_TIM2_Init+0x98>)
 8008128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800812c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 256;
 800812e:	4b1c      	ldr	r3, [pc, #112]	; (80081a0 <MX_TIM2_Init+0x98>)
 8008130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008134:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008136:	4b1a      	ldr	r3, [pc, #104]	; (80081a0 <MX_TIM2_Init+0x98>)
 8008138:	2200      	movs	r2, #0
 800813a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 562;
 800813c:	4b18      	ldr	r3, [pc, #96]	; (80081a0 <MX_TIM2_Init+0x98>)
 800813e:	f240 2232 	movw	r2, #562	; 0x232
 8008142:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008144:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <MX_TIM2_Init+0x98>)
 8008146:	2200      	movs	r2, #0
 8008148:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800814a:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <MX_TIM2_Init+0x98>)
 800814c:	2200      	movs	r2, #0
 800814e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008150:	4813      	ldr	r0, [pc, #76]	; (80081a0 <MX_TIM2_Init+0x98>)
 8008152:	f7fc ffd9 	bl	8005108 <HAL_TIM_Base_Init>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800815c:	f003 f88a 	bl	800b274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008164:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008166:	f107 0310 	add.w	r3, r7, #16
 800816a:	4619      	mov	r1, r3
 800816c:	480c      	ldr	r0, [pc, #48]	; (80081a0 <MX_TIM2_Init+0x98>)
 800816e:	f7fd fa2a 	bl	80055c6 <HAL_TIM_ConfigClockSource>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8008178:	f003 f87c 	bl	800b274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800817c:	2300      	movs	r3, #0
 800817e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008184:	1d3b      	adds	r3, r7, #4
 8008186:	4619      	mov	r1, r3
 8008188:	4805      	ldr	r0, [pc, #20]	; (80081a0 <MX_TIM2_Init+0x98>)
 800818a:	f7fd fff3 	bl	8006174 <HAL_TIMEx_MasterConfigSynchronization>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8008194:	f003 f86e 	bl	800b274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008198:	bf00      	nop
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20002fac 	.word	0x20002fac

080081a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80081a8:	4b14      	ldr	r3, [pc, #80]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081aa:	4a15      	ldr	r2, [pc, #84]	; (8008200 <MX_USART3_UART_Init+0x5c>)
 80081ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80081ae:	4b13      	ldr	r3, [pc, #76]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081b0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80081b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081be:	2200      	movs	r2, #0
 80081c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80081c2:	4b0e      	ldr	r3, [pc, #56]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80081c8:	4b0c      	ldr	r3, [pc, #48]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081ca:	220c      	movs	r2, #12
 80081cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081ce:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80081d4:	4b09      	ldr	r3, [pc, #36]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80081da:	4b08      	ldr	r3, [pc, #32]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081dc:	2200      	movs	r2, #0
 80081de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80081e0:	4b06      	ldr	r3, [pc, #24]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80081e6:	4805      	ldr	r0, [pc, #20]	; (80081fc <MX_USART3_UART_Init+0x58>)
 80081e8:	f7fe f9ac 	bl	8006544 <HAL_UART_Init>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80081f2:	f003 f83f 	bl	800b274 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80081f6:	bf00      	nop
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	200004a8 	.word	0x200004a8
 8008200:	40004800 	.word	0x40004800

08008204 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800820a:	4b22      	ldr	r3, [pc, #136]	; (8008294 <MX_DMA_Init+0x90>)
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	4a21      	ldr	r2, [pc, #132]	; (8008294 <MX_DMA_Init+0x90>)
 8008210:	f043 0302 	orr.w	r3, r3, #2
 8008214:	6153      	str	r3, [r2, #20]
 8008216:	4b1f      	ldr	r3, [pc, #124]	; (8008294 <MX_DMA_Init+0x90>)
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	607b      	str	r3, [r7, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <MX_DMA_Init+0x90>)
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <MX_DMA_Init+0x90>)
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	6153      	str	r3, [r2, #20]
 800822e:	4b19      	ldr	r3, [pc, #100]	; (8008294 <MX_DMA_Init+0x90>)
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	200b      	movs	r0, #11
 8008240:	f7fa ffb1 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008244:	200b      	movs	r0, #11
 8008246:	f7fa ffca 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	200d      	movs	r0, #13
 8008250:	f7fa ffa9 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008254:	200d      	movs	r0, #13
 8008256:	f7fa ffc2 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800825a:	2200      	movs	r2, #0
 800825c:	2100      	movs	r1, #0
 800825e:	2038      	movs	r0, #56	; 0x38
 8008260:	f7fa ffa1 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8008264:	2038      	movs	r0, #56	; 0x38
 8008266:	f7fa ffba 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800826a:	2200      	movs	r2, #0
 800826c:	2100      	movs	r1, #0
 800826e:	2039      	movs	r0, #57	; 0x39
 8008270:	f7fa ff99 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8008274:	2039      	movs	r0, #57	; 0x39
 8008276:	f7fa ffb2 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800827a:	2200      	movs	r2, #0
 800827c:	2100      	movs	r1, #0
 800827e:	203c      	movs	r0, #60	; 0x3c
 8008280:	f7fa ff91 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8008284:	203c      	movs	r0, #60	; 0x3c
 8008286:	f7fa ffaa 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	40021000 	.word	0x40021000

08008298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800829e:	f107 030c 	add.w	r3, r7, #12
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	605a      	str	r2, [r3, #4]
 80082a8:	609a      	str	r2, [r3, #8]
 80082aa:	60da      	str	r2, [r3, #12]
 80082ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80082ae:	4b3e      	ldr	r3, [pc, #248]	; (80083a8 <MX_GPIO_Init+0x110>)
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	4a3d      	ldr	r2, [pc, #244]	; (80083a8 <MX_GPIO_Init+0x110>)
 80082b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082b8:	6153      	str	r3, [r2, #20]
 80082ba:	4b3b      	ldr	r3, [pc, #236]	; (80083a8 <MX_GPIO_Init+0x110>)
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082c2:	60bb      	str	r3, [r7, #8]
 80082c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082c6:	4b38      	ldr	r3, [pc, #224]	; (80083a8 <MX_GPIO_Init+0x110>)
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	4a37      	ldr	r2, [pc, #220]	; (80083a8 <MX_GPIO_Init+0x110>)
 80082cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082d0:	6153      	str	r3, [r2, #20]
 80082d2:	4b35      	ldr	r3, [pc, #212]	; (80083a8 <MX_GPIO_Init+0x110>)
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082de:	4b32      	ldr	r3, [pc, #200]	; (80083a8 <MX_GPIO_Init+0x110>)
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	4a31      	ldr	r2, [pc, #196]	; (80083a8 <MX_GPIO_Init+0x110>)
 80082e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082e8:	6153      	str	r3, [r2, #20]
 80082ea:	4b2f      	ldr	r3, [pc, #188]	; (80083a8 <MX_GPIO_Init+0x110>)
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Temp_En_Pin|BalC1_Pin|BalC2_Pin|BalC3_Pin 
 80082f6:	2200      	movs	r2, #0
 80082f8:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80082fc:	482b      	ldr	r0, [pc, #172]	; (80083ac <MX_GPIO_Init+0x114>)
 80082fe:	f7fb fb3f 	bl	8003980 <HAL_GPIO_WritePin>
                          |BalC4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CB_En_Pin|VC_En_Pin, GPIO_PIN_RESET);
 8008302:	2200      	movs	r2, #0
 8008304:	2105      	movs	r1, #5
 8008306:	482a      	ldr	r0, [pc, #168]	; (80083b0 <MX_GPIO_Init+0x118>)
 8008308:	f7fb fb3a 	bl	8003980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BalC5_Pin|BalC6_Pin|CANmode_Pin|timingPin_Pin, GPIO_PIN_RESET);
 800830c:	2200      	movs	r2, #0
 800830e:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 8008312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008316:	f7fb fb33 	bl	8003980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PwrBtn_Pin */
  GPIO_InitStruct.Pin = PwrBtn_Pin;
 800831a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800831e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008320:	4b24      	ldr	r3, [pc, #144]	; (80083b4 <MX_GPIO_Init+0x11c>)
 8008322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PwrBtn_GPIO_Port, &GPIO_InitStruct);
 8008328:	f107 030c 	add.w	r3, r7, #12
 800832c:	4619      	mov	r1, r3
 800832e:	481f      	ldr	r0, [pc, #124]	; (80083ac <MX_GPIO_Init+0x114>)
 8008330:	f7fb f998 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pins : Temp_En_Pin BalC1_Pin BalC2_Pin BalC3_Pin 
                           BalC4_Pin */
  GPIO_InitStruct.Pin = Temp_En_Pin|BalC1_Pin|BalC2_Pin|BalC3_Pin 
 8008334:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8008338:	60fb      	str	r3, [r7, #12]
                          |BalC4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800833a:	2301      	movs	r3, #1
 800833c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833e:	2300      	movs	r3, #0
 8008340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008342:	2300      	movs	r3, #0
 8008344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008346:	f107 030c 	add.w	r3, r7, #12
 800834a:	4619      	mov	r1, r3
 800834c:	4817      	ldr	r0, [pc, #92]	; (80083ac <MX_GPIO_Init+0x114>)
 800834e:	f7fb f989 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pins : CB_En_Pin VC_En_Pin */
  GPIO_InitStruct.Pin = CB_En_Pin|VC_En_Pin;
 8008352:	2305      	movs	r3, #5
 8008354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008356:	2301      	movs	r3, #1
 8008358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800835e:	2300      	movs	r3, #0
 8008360:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008362:	f107 030c 	add.w	r3, r7, #12
 8008366:	4619      	mov	r1, r3
 8008368:	4811      	ldr	r0, [pc, #68]	; (80083b0 <MX_GPIO_Init+0x118>)
 800836a:	f7fb f97b 	bl	8003664 <HAL_GPIO_Init>

  /*Configure GPIO pins : BalC5_Pin BalC6_Pin CANmode_Pin timingPin_Pin */
  GPIO_InitStruct.Pin = BalC5_Pin|BalC6_Pin|CANmode_Pin|timingPin_Pin;
 800836e:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8008372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008374:	2301      	movs	r3, #1
 8008376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800837c:	2300      	movs	r3, #0
 800837e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008380:	f107 030c 	add.w	r3, r7, #12
 8008384:	4619      	mov	r1, r3
 8008386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800838a:	f7fb f96b 	bl	8003664 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800838e:	2200      	movs	r2, #0
 8008390:	2100      	movs	r1, #0
 8008392:	2028      	movs	r0, #40	; 0x28
 8008394:	f7fa ff07 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008398:	2028      	movs	r0, #40	; 0x28
 800839a:	f7fa ff20 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 800839e:	bf00      	nop
 80083a0:	3720      	adds	r7, #32
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	40021000 	.word	0x40021000
 80083ac:	48000800 	.word	0x48000800
 80083b0:	48000400 	.word	0x48000400
 80083b4:	10110000 	.word	0x10110000

080083b8 <updateADC3Vars>:
//FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--FUNCTIONS--
//**********************************************************************************************************************************************************

//**********************************************************************************************************************************************************
void updateADC3Vars() //sums and decimates the variables related to ADC3
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
	uint32_t VCell1_Accumulator = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]
	uint32_t VCell4_Accumulator = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	60bb      	str	r3, [r7, #8]

	for(uint16_t i = 0;i < adc3BufferSize;i += 5)
 80083c6:	2300      	movs	r3, #0
 80083c8:	80fb      	strh	r3, [r7, #6]
 80083ca:	e02e      	b.n	800842a <updateADC3Vars+0x72>
	{
		VCell1_Accumulator += adc3Buffer[i];
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	4a21      	ldr	r2, [pc, #132]	; (8008454 <updateADC3Vars+0x9c>)
 80083d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d4:	461a      	mov	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4413      	add	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]

		VCell4_Accumulator += adc3Buffer[i+1];
 80083dc:	88fb      	ldrh	r3, [r7, #6]
 80083de:	3301      	adds	r3, #1
 80083e0:	4a1c      	ldr	r2, [pc, #112]	; (8008454 <updateADC3Vars+0x9c>)
 80083e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e6:	461a      	mov	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4413      	add	r3, r2
 80083ec:	60bb      	str	r3, [r7, #8]
		VCell4_Accumulator += adc3Buffer[i+2];
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	3302      	adds	r3, #2
 80083f2:	4a18      	ldr	r2, [pc, #96]	; (8008454 <updateADC3Vars+0x9c>)
 80083f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f8:	461a      	mov	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4413      	add	r3, r2
 80083fe:	60bb      	str	r3, [r7, #8]
		VCell4_Accumulator += adc3Buffer[i+3];
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	3303      	adds	r3, #3
 8008404:	4a13      	ldr	r2, [pc, #76]	; (8008454 <updateADC3Vars+0x9c>)
 8008406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800840a:	461a      	mov	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	4413      	add	r3, r2
 8008410:	60bb      	str	r3, [r7, #8]
		VCell4_Accumulator += adc3Buffer[i+4];
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	3304      	adds	r3, #4
 8008416:	4a0f      	ldr	r2, [pc, #60]	; (8008454 <updateADC3Vars+0x9c>)
 8008418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800841c:	461a      	mov	r2, r3
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	4413      	add	r3, r2
 8008422:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0;i < adc3BufferSize;i += 5)
 8008424:	88fb      	ldrh	r3, [r7, #6]
 8008426:	3305      	adds	r3, #5
 8008428:	80fb      	strh	r3, [r7, #6]
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008430:	d3cc      	bcc.n	80083cc <updateADC3Vars+0x14>
	}
	VCell4_ADC = VCell4_Accumulator >> 6; // 1024 samples taken
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	099b      	lsrs	r3, r3, #6
 8008436:	b29a      	uxth	r2, r3
 8008438:	4b07      	ldr	r3, [pc, #28]	; (8008458 <updateADC3Vars+0xa0>)
 800843a:	801a      	strh	r2, [r3, #0]
	VCell1_ADC = VCell1_Accumulator >> 6; // 256 samples taken
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	099b      	lsrs	r3, r3, #6
 8008440:	b29a      	uxth	r2, r3
 8008442:	4b06      	ldr	r3, [pc, #24]	; (800845c <updateADC3Vars+0xa4>)
 8008444:	801a      	strh	r2, [r3, #0]
}
 8008446:	bf00      	nop
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	200008e0 	.word	0x200008e0
 8008458:	20000326 	.word	0x20000326
 800845c:	20000320 	.word	0x20000320

08008460 <updateADC2Vars>:

//**********************************************************************************************************************************************************
void updateADC2Vars() //sums and decimates the variables related to ADC2
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
	uint32_t   Vin_Accumulator = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
	uint32_t Temp1_Accumulator = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	613b      	str	r3, [r7, #16]
	uint32_t Temp2_Accumulator = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
	uint32_t Temp3_Accumulator = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	60bb      	str	r3, [r7, #8]
	uint32_t Temp4_Accumulator = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 0;i < adc2BufferSize;i += 5)
 800847a:	2300      	movs	r3, #0
 800847c:	807b      	strh	r3, [r7, #2]
 800847e:	e02e      	b.n	80084de <updateADC2Vars+0x7e>
	{
		Vin_Accumulator   += adc2Buffer[i];
 8008480:	887b      	ldrh	r3, [r7, #2]
 8008482:	4a28      	ldr	r2, [pc, #160]	; (8008524 <updateADC2Vars+0xc4>)
 8008484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008488:	461a      	mov	r2, r3
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	4413      	add	r3, r2
 800848e:	617b      	str	r3, [r7, #20]
		Temp1_Accumulator += adc2Buffer[i+1];
 8008490:	887b      	ldrh	r3, [r7, #2]
 8008492:	3301      	adds	r3, #1
 8008494:	4a23      	ldr	r2, [pc, #140]	; (8008524 <updateADC2Vars+0xc4>)
 8008496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800849a:	461a      	mov	r2, r3
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	4413      	add	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
		Temp2_Accumulator += adc2Buffer[i+2];
 80084a2:	887b      	ldrh	r3, [r7, #2]
 80084a4:	3302      	adds	r3, #2
 80084a6:	4a1f      	ldr	r2, [pc, #124]	; (8008524 <updateADC2Vars+0xc4>)
 80084a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ac:	461a      	mov	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
		Temp3_Accumulator += adc2Buffer[i+3];
 80084b4:	887b      	ldrh	r3, [r7, #2]
 80084b6:	3303      	adds	r3, #3
 80084b8:	4a1a      	ldr	r2, [pc, #104]	; (8008524 <updateADC2Vars+0xc4>)
 80084ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084be:	461a      	mov	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4413      	add	r3, r2
 80084c4:	60bb      	str	r3, [r7, #8]
		Temp4_Accumulator += adc2Buffer[i+4];
 80084c6:	887b      	ldrh	r3, [r7, #2]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4a16      	ldr	r2, [pc, #88]	; (8008524 <updateADC2Vars+0xc4>)
 80084cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d0:	461a      	mov	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4413      	add	r3, r2
 80084d6:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0;i < adc2BufferSize;i += 5)
 80084d8:	887b      	ldrh	r3, [r7, #2]
 80084da:	3305      	adds	r3, #5
 80084dc:	807b      	strh	r3, [r7, #2]
 80084de:	887b      	ldrh	r3, [r7, #2]
 80084e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80084e4:	d3cc      	bcc.n	8008480 <updateADC2Vars+0x20>
	}

	VinADC    = Vin_Accumulator   >> 6;	// 64 samples taken
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	099b      	lsrs	r3, r3, #6
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	4b0e      	ldr	r3, [pc, #56]	; (8008528 <updateADC2Vars+0xc8>)
 80084ee:	801a      	strh	r2, [r3, #0]
	temp1_ADC = Temp1_Accumulator >> 6; // 64 samples taken
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	099b      	lsrs	r3, r3, #6
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <updateADC2Vars+0xcc>)
 80084f8:	801a      	strh	r2, [r3, #0]
	temp2_ADC = Temp2_Accumulator >> 6; // 64 samples taken
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	099b      	lsrs	r3, r3, #6
 80084fe:	b29a      	uxth	r2, r3
 8008500:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <updateADC2Vars+0xd0>)
 8008502:	801a      	strh	r2, [r3, #0]
	temp3_ADC = Temp3_Accumulator >> 6; // 64 samples taken
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	099b      	lsrs	r3, r3, #6
 8008508:	b29a      	uxth	r2, r3
 800850a:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <updateADC2Vars+0xd4>)
 800850c:	801a      	strh	r2, [r3, #0]
	temp4_ADC = Temp4_Accumulator >> 6; // 64 samples taken
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	099b      	lsrs	r3, r3, #6
 8008512:	b29a      	uxth	r2, r3
 8008514:	4b08      	ldr	r3, [pc, #32]	; (8008538 <updateADC2Vars+0xd8>)
 8008516:	801a      	strh	r2, [r3, #0]
}
 8008518:	bf00      	nop
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	2000212c 	.word	0x2000212c
 8008528:	2000031c 	.word	0x2000031c
 800852c:	20000330 	.word	0x20000330
 8008530:	20000332 	.word	0x20000332
 8008534:	20000334 	.word	0x20000334
 8008538:	20000336 	.word	0x20000336

0800853c <updateADC1Vars>:

//**********************************************************************************************************************************************************
void updateADC1Vars() //sums and decimates the variables related to ADC1
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
	uint32_t VCell3_Accumulator = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]
	uint32_t VCell6_Accumulator = 0;
 8008546:	2300      	movs	r3, #0
 8008548:	613b      	str	r3, [r7, #16]
	uint32_t IOutChg_Accumulator = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]
	uint32_t IOutDschg_Accumulator = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	60bb      	str	r3, [r7, #8]

	for(uint16_t i = 0;i < adc1BufferSize;i += 7)
 8008552:	2300      	movs	r3, #0
 8008554:	80fb      	strh	r3, [r7, #6]
 8008556:	e040      	b.n	80085da <updateADC1Vars+0x9e>
	{
		VCell6_Accumulator += adc1Buffer[i];
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	4a2f      	ldr	r2, [pc, #188]	; (8008618 <updateADC1Vars+0xdc>)
 800855c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008560:	461a      	mov	r2, r3
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	4413      	add	r3, r2
 8008566:	613b      	str	r3, [r7, #16]
		VCell6_Accumulator += adc1Buffer[i+2];
 8008568:	88fb      	ldrh	r3, [r7, #6]
 800856a:	3302      	adds	r3, #2
 800856c:	4a2a      	ldr	r2, [pc, #168]	; (8008618 <updateADC1Vars+0xdc>)
 800856e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008572:	461a      	mov	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4413      	add	r3, r2
 8008578:	613b      	str	r3, [r7, #16]
		VCell6_Accumulator += adc1Buffer[i+4];
 800857a:	88fb      	ldrh	r3, [r7, #6]
 800857c:	3304      	adds	r3, #4
 800857e:	4a26      	ldr	r2, [pc, #152]	; (8008618 <updateADC1Vars+0xdc>)
 8008580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008584:	461a      	mov	r2, r3
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	4413      	add	r3, r2
 800858a:	613b      	str	r3, [r7, #16]
		VCell6_Accumulator += adc1Buffer[i+6];
 800858c:	88fb      	ldrh	r3, [r7, #6]
 800858e:	3306      	adds	r3, #6
 8008590:	4a21      	ldr	r2, [pc, #132]	; (8008618 <updateADC1Vars+0xdc>)
 8008592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008596:	461a      	mov	r2, r3
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4413      	add	r3, r2
 800859c:	613b      	str	r3, [r7, #16]

		VCell3_Accumulator += adc1Buffer[i+1];
 800859e:	88fb      	ldrh	r3, [r7, #6]
 80085a0:	3301      	adds	r3, #1
 80085a2:	4a1d      	ldr	r2, [pc, #116]	; (8008618 <updateADC1Vars+0xdc>)
 80085a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085a8:	461a      	mov	r2, r3
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	4413      	add	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]

		IOutChg_Accumulator  += adc1Buffer[i+3];
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	3303      	adds	r3, #3
 80085b4:	4a18      	ldr	r2, [pc, #96]	; (8008618 <updateADC1Vars+0xdc>)
 80085b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ba:	461a      	mov	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4413      	add	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
		IOutDschg_Accumulator  += adc1Buffer[i+5];
 80085c2:	88fb      	ldrh	r3, [r7, #6]
 80085c4:	3305      	adds	r3, #5
 80085c6:	4a14      	ldr	r2, [pc, #80]	; (8008618 <updateADC1Vars+0xdc>)
 80085c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085cc:	461a      	mov	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4413      	add	r3, r2
 80085d2:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0;i < adc1BufferSize;i += 7)
 80085d4:	88fb      	ldrh	r3, [r7, #6]
 80085d6:	3307      	adds	r3, #7
 80085d8:	80fb      	strh	r3, [r7, #6]
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085e0:	d3ba      	bcc.n	8008558 <updateADC1Vars+0x1c>
	}

	VCell3_ADC = VCell3_Accumulator >> 6; // 256 samples taken
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	099b      	lsrs	r3, r3, #6
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	4b0c      	ldr	r3, [pc, #48]	; (800861c <updateADC1Vars+0xe0>)
 80085ea:	801a      	strh	r2, [r3, #0]
	VCell6_ADC = VCell6_Accumulator >> 6; // 1024 samples taken
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	099b      	lsrs	r3, r3, #6
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <updateADC1Vars+0xe4>)
 80085f4:	801a      	strh	r2, [r3, #0]

	IOutChg_ADC = IOutChg_Accumulator >> 6; // 256 samples taken
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	099b      	lsrs	r3, r3, #6
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	4b09      	ldr	r3, [pc, #36]	; (8008624 <updateADC1Vars+0xe8>)
 80085fe:	801a      	strh	r2, [r3, #0]
	IOutDschg_ADC = IOutDschg_Accumulator >> 6; // 256 samples taken
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	099b      	lsrs	r3, r3, #6
 8008604:	b29a      	uxth	r2, r3
 8008606:	4b08      	ldr	r3, [pc, #32]	; (8008628 <updateADC1Vars+0xec>)
 8008608:	801a      	strh	r2, [r3, #0]

}
 800860a:	bf00      	nop
 800860c:	371c      	adds	r7, #28
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20001328 	.word	0x20001328
 800861c:	20000324 	.word	0x20000324
 8008620:	2000032a 	.word	0x2000032a
 8008624:	2000032c 	.word	0x2000032c
 8008628:	2000032e 	.word	0x2000032e

0800862c <updateADC4Vars>:

//**********************************************************************************************************************************************************
void updateADC4Vars() //sums and decimates the variables related to ADC4
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0

	uint32_t VCell0_Accumulator = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	60fb      	str	r3, [r7, #12]
	uint32_t VCell2_Accumulator = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	60bb      	str	r3, [r7, #8]
	uint32_t VCell5_Accumulator = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 0;i < adc4BufferSize;i += 6)
 800863e:	2300      	movs	r3, #0
 8008640:	807b      	strh	r3, [r7, #2]
 8008642:	e037      	b.n	80086b4 <updateADC4Vars+0x88>
	{
		VCell5_Accumulator += adc4Buffer[i+1];
 8008644:	887b      	ldrh	r3, [r7, #2]
 8008646:	3301      	adds	r3, #1
 8008648:	4a27      	ldr	r2, [pc, #156]	; (80086e8 <updateADC4Vars+0xbc>)
 800864a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4413      	add	r3, r2
 8008654:	607b      	str	r3, [r7, #4]
		VCell5_Accumulator += adc4Buffer[i+2];
 8008656:	887b      	ldrh	r3, [r7, #2]
 8008658:	3302      	adds	r3, #2
 800865a:	4a23      	ldr	r2, [pc, #140]	; (80086e8 <updateADC4Vars+0xbc>)
 800865c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008660:	461a      	mov	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4413      	add	r3, r2
 8008666:	607b      	str	r3, [r7, #4]
		VCell5_Accumulator += adc4Buffer[i+4];
 8008668:	887b      	ldrh	r3, [r7, #2]
 800866a:	3304      	adds	r3, #4
 800866c:	4a1e      	ldr	r2, [pc, #120]	; (80086e8 <updateADC4Vars+0xbc>)
 800866e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008672:	461a      	mov	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4413      	add	r3, r2
 8008678:	607b      	str	r3, [r7, #4]
		VCell5_Accumulator += adc4Buffer[i+5];
 800867a:	887b      	ldrh	r3, [r7, #2]
 800867c:	3305      	adds	r3, #5
 800867e:	4a1a      	ldr	r2, [pc, #104]	; (80086e8 <updateADC4Vars+0xbc>)
 8008680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4413      	add	r3, r2
 800868a:	607b      	str	r3, [r7, #4]

		VCell0_Accumulator += adc4Buffer[i];
 800868c:	887b      	ldrh	r3, [r7, #2]
 800868e:	4a16      	ldr	r2, [pc, #88]	; (80086e8 <updateADC4Vars+0xbc>)
 8008690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008694:	461a      	mov	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4413      	add	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]

		VCell2_Accumulator  += adc4Buffer[i+3];
 800869c:	887b      	ldrh	r3, [r7, #2]
 800869e:	3303      	adds	r3, #3
 80086a0:	4a11      	ldr	r2, [pc, #68]	; (80086e8 <updateADC4Vars+0xbc>)
 80086a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a6:	461a      	mov	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4413      	add	r3, r2
 80086ac:	60bb      	str	r3, [r7, #8]
	for(uint16_t i = 0;i < adc4BufferSize;i += 6)
 80086ae:	887b      	ldrh	r3, [r7, #2]
 80086b0:	3306      	adds	r3, #6
 80086b2:	807b      	strh	r3, [r7, #2]
 80086b4:	887b      	ldrh	r3, [r7, #2]
 80086b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80086ba:	d3c3      	bcc.n	8008644 <updateADC4Vars+0x18>
	}

	VCell0_ADC = VCell0_Accumulator >> 6; // 256 samples taken
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	099b      	lsrs	r3, r3, #6
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <updateADC4Vars+0xc0>)
 80086c4:	801a      	strh	r2, [r3, #0]
	VCell2_ADC = VCell2_Accumulator >> 6; // 256 samples taken
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	099b      	lsrs	r3, r3, #6
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	4b08      	ldr	r3, [pc, #32]	; (80086f0 <updateADC4Vars+0xc4>)
 80086ce:	801a      	strh	r2, [r3, #0]
	VCell5_ADC = VCell5_Accumulator >> 6; // 1024 samples taken
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	099b      	lsrs	r3, r3, #6
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	4b07      	ldr	r3, [pc, #28]	; (80086f4 <updateADC4Vars+0xc8>)
 80086d8:	801a      	strh	r2, [r3, #0]

}
 80086da:	bf00      	nop
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	200023ac 	.word	0x200023ac
 80086ec:	2000031e 	.word	0x2000031e
 80086f0:	20000322 	.word	0x20000322
 80086f4:	20000328 	.word	0x20000328

080086f8 <calculateActualValues>:

//**********************************************************************************************************************************************************
void calculateActualValues() //translates ADC readings into real world quantities 500 times a second using MS Excel lines of best fit
{
 80086f8:	b5b0      	push	{r4, r5, r7, lr}
 80086fa:	af00      	add	r7, sp, #0
	//current is in Amps voltages are in Volts
	//battery charge is in mAh
   if(blockCellVoltageUpdating == 0) //updates tap voltages only when we are not balance charging, otherwise voltages remain frozen
 80086fc:	4bd4      	ldr	r3, [pc, #848]	; (8008a50 <calculateActualValues+0x358>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	f083 0301 	eor.w	r3, r3, #1
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 80c4 	beq.w	8008894 <calculateActualValues+0x19c>
   {
	VC6 = 0.0003949414 * VCell6_ADC	+ 0.0108149390;
 800870c:	4bd1      	ldr	r3, [pc, #836]	; (8008a54 <calculateActualValues+0x35c>)
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	4618      	mov	r0, r3
 8008712:	f7f7 ff1f 	bl	8000554 <__aeabi_i2d>
 8008716:	a3a4      	add	r3, pc, #656	; (adr r3, 80089a8 <calculateActualValues+0x2b0>)
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f7f7 ff84 	bl	8000628 <__aeabi_dmul>
 8008720:	4603      	mov	r3, r0
 8008722:	460c      	mov	r4, r1
 8008724:	4618      	mov	r0, r3
 8008726:	4621      	mov	r1, r4
 8008728:	a3a1      	add	r3, pc, #644	; (adr r3, 80089b0 <calculateActualValues+0x2b8>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	f7f7 fdc5 	bl	80002bc <__adddf3>
 8008732:	4603      	mov	r3, r0
 8008734:	460c      	mov	r4, r1
 8008736:	4618      	mov	r0, r3
 8008738:	4621      	mov	r1, r4
 800873a:	f7f8 fa45 	bl	8000bc8 <__aeabi_d2f>
 800873e:	4602      	mov	r2, r0
 8008740:	4bc5      	ldr	r3, [pc, #788]	; (8008a58 <calculateActualValues+0x360>)
 8008742:	601a      	str	r2, [r3, #0]
	VC5 = 0.0003353593 * VCell5_ADC	+ 0.0001946072;
 8008744:	4bc5      	ldr	r3, [pc, #788]	; (8008a5c <calculateActualValues+0x364>)
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	4618      	mov	r0, r3
 800874a:	f7f7 ff03 	bl	8000554 <__aeabi_i2d>
 800874e:	a39a      	add	r3, pc, #616	; (adr r3, 80089b8 <calculateActualValues+0x2c0>)
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f7f7 ff68 	bl	8000628 <__aeabi_dmul>
 8008758:	4603      	mov	r3, r0
 800875a:	460c      	mov	r4, r1
 800875c:	4618      	mov	r0, r3
 800875e:	4621      	mov	r1, r4
 8008760:	a397      	add	r3, pc, #604	; (adr r3, 80089c0 <calculateActualValues+0x2c8>)
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f7f7 fda9 	bl	80002bc <__adddf3>
 800876a:	4603      	mov	r3, r0
 800876c:	460c      	mov	r4, r1
 800876e:	4618      	mov	r0, r3
 8008770:	4621      	mov	r1, r4
 8008772:	f7f8 fa29 	bl	8000bc8 <__aeabi_d2f>
 8008776:	4602      	mov	r2, r0
 8008778:	4bb9      	ldr	r3, [pc, #740]	; (8008a60 <calculateActualValues+0x368>)
 800877a:	601a      	str	r2, [r3, #0]
	VC4 = 0.0002777437 * VCell4_ADC	+ 0.0037047450;
 800877c:	4bb9      	ldr	r3, [pc, #740]	; (8008a64 <calculateActualValues+0x36c>)
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	f7f7 fee7 	bl	8000554 <__aeabi_i2d>
 8008786:	a390      	add	r3, pc, #576	; (adr r3, 80089c8 <calculateActualValues+0x2d0>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f7 ff4c 	bl	8000628 <__aeabi_dmul>
 8008790:	4603      	mov	r3, r0
 8008792:	460c      	mov	r4, r1
 8008794:	4618      	mov	r0, r3
 8008796:	4621      	mov	r1, r4
 8008798:	a38d      	add	r3, pc, #564	; (adr r3, 80089d0 <calculateActualValues+0x2d8>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	f7f7 fd8d 	bl	80002bc <__adddf3>
 80087a2:	4603      	mov	r3, r0
 80087a4:	460c      	mov	r4, r1
 80087a6:	4618      	mov	r0, r3
 80087a8:	4621      	mov	r1, r4
 80087aa:	f7f8 fa0d 	bl	8000bc8 <__aeabi_d2f>
 80087ae:	4602      	mov	r2, r0
 80087b0:	4bad      	ldr	r3, [pc, #692]	; (8008a68 <calculateActualValues+0x370>)
 80087b2:	601a      	str	r2, [r3, #0]
	VC3 = 0.0008159491 * VCell3_ADC	+ 0.0025696922;
 80087b4:	4bad      	ldr	r3, [pc, #692]	; (8008a6c <calculateActualValues+0x374>)
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7f7 fecb 	bl	8000554 <__aeabi_i2d>
 80087be:	a386      	add	r3, pc, #536	; (adr r3, 80089d8 <calculateActualValues+0x2e0>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f7f7 ff30 	bl	8000628 <__aeabi_dmul>
 80087c8:	4603      	mov	r3, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	4618      	mov	r0, r3
 80087ce:	4621      	mov	r1, r4
 80087d0:	a383      	add	r3, pc, #524	; (adr r3, 80089e0 <calculateActualValues+0x2e8>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 fd71 	bl	80002bc <__adddf3>
 80087da:	4603      	mov	r3, r0
 80087dc:	460c      	mov	r4, r1
 80087de:	4618      	mov	r0, r3
 80087e0:	4621      	mov	r1, r4
 80087e2:	f7f8 f9f1 	bl	8000bc8 <__aeabi_d2f>
 80087e6:	4602      	mov	r2, r0
 80087e8:	4ba1      	ldr	r3, [pc, #644]	; (8008a70 <calculateActualValues+0x378>)
 80087ea:	601a      	str	r2, [r3, #0]
	VC2 = 0.0005180698 * VCell2_ADC	+ 0.0031440949;
 80087ec:	4ba1      	ldr	r3, [pc, #644]	; (8008a74 <calculateActualValues+0x37c>)
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f7 feaf 	bl	8000554 <__aeabi_i2d>
 80087f6:	a37c      	add	r3, pc, #496	; (adr r3, 80089e8 <calculateActualValues+0x2f0>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f7f7 ff14 	bl	8000628 <__aeabi_dmul>
 8008800:	4603      	mov	r3, r0
 8008802:	460c      	mov	r4, r1
 8008804:	4618      	mov	r0, r3
 8008806:	4621      	mov	r1, r4
 8008808:	a379      	add	r3, pc, #484	; (adr r3, 80089f0 <calculateActualValues+0x2f8>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	f7f7 fd55 	bl	80002bc <__adddf3>
 8008812:	4603      	mov	r3, r0
 8008814:	460c      	mov	r4, r1
 8008816:	4618      	mov	r0, r3
 8008818:	4621      	mov	r1, r4
 800881a:	f7f8 f9d5 	bl	8000bc8 <__aeabi_d2f>
 800881e:	4602      	mov	r2, r0
 8008820:	4b95      	ldr	r3, [pc, #596]	; (8008a78 <calculateActualValues+0x380>)
 8008822:	601a      	str	r2, [r3, #0]
	VC1 = 0.0002572566 * VCell1_ADC	+ 0.0009649199;
 8008824:	4b95      	ldr	r3, [pc, #596]	; (8008a7c <calculateActualValues+0x384>)
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	4618      	mov	r0, r3
 800882a:	f7f7 fe93 	bl	8000554 <__aeabi_i2d>
 800882e:	a372      	add	r3, pc, #456	; (adr r3, 80089f8 <calculateActualValues+0x300>)
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f7f7 fef8 	bl	8000628 <__aeabi_dmul>
 8008838:	4603      	mov	r3, r0
 800883a:	460c      	mov	r4, r1
 800883c:	4618      	mov	r0, r3
 800883e:	4621      	mov	r1, r4
 8008840:	a36f      	add	r3, pc, #444	; (adr r3, 8008a00 <calculateActualValues+0x308>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f7f7 fd39 	bl	80002bc <__adddf3>
 800884a:	4603      	mov	r3, r0
 800884c:	460c      	mov	r4, r1
 800884e:	4618      	mov	r0, r3
 8008850:	4621      	mov	r1, r4
 8008852:	f7f8 f9b9 	bl	8000bc8 <__aeabi_d2f>
 8008856:	4602      	mov	r2, r0
 8008858:	4b89      	ldr	r3, [pc, #548]	; (8008a80 <calculateActualValues+0x388>)
 800885a:	601a      	str	r2, [r3, #0]
	VC0 = 0.0000523515 * VCell0_ADC	- 0.0008254950;
 800885c:	4b89      	ldr	r3, [pc, #548]	; (8008a84 <calculateActualValues+0x38c>)
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	f7f7 fe77 	bl	8000554 <__aeabi_i2d>
 8008866:	a368      	add	r3, pc, #416	; (adr r3, 8008a08 <calculateActualValues+0x310>)
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f7f7 fedc 	bl	8000628 <__aeabi_dmul>
 8008870:	4603      	mov	r3, r0
 8008872:	460c      	mov	r4, r1
 8008874:	4618      	mov	r0, r3
 8008876:	4621      	mov	r1, r4
 8008878:	a365      	add	r3, pc, #404	; (adr r3, 8008a10 <calculateActualValues+0x318>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f7f7 fd1b 	bl	80002b8 <__aeabi_dsub>
 8008882:	4603      	mov	r3, r0
 8008884:	460c      	mov	r4, r1
 8008886:	4618      	mov	r0, r3
 8008888:	4621      	mov	r1, r4
 800888a:	f7f8 f99d 	bl	8000bc8 <__aeabi_d2f>
 800888e:	4602      	mov	r2, r0
 8008890:	4b7d      	ldr	r3, [pc, #500]	; (8008a88 <calculateActualValues+0x390>)
 8008892:	601a      	str	r2, [r3, #0]
   }

	IOutChg  = 0.0005065846 * IOutChg_ADC	-   0.0018371205 - 0.03;
 8008894:	4b7d      	ldr	r3, [pc, #500]	; (8008a8c <calculateActualValues+0x394>)
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	4618      	mov	r0, r3
 800889a:	f7f7 fe5b 	bl	8000554 <__aeabi_i2d>
 800889e:	a35e      	add	r3, pc, #376	; (adr r3, 8008a18 <calculateActualValues+0x320>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f7f7 fec0 	bl	8000628 <__aeabi_dmul>
 80088a8:	4603      	mov	r3, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	4618      	mov	r0, r3
 80088ae:	4621      	mov	r1, r4
 80088b0:	a35b      	add	r3, pc, #364	; (adr r3, 8008a20 <calculateActualValues+0x328>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fcff 	bl	80002b8 <__aeabi_dsub>
 80088ba:	4603      	mov	r3, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	4618      	mov	r0, r3
 80088c0:	4621      	mov	r1, r4
 80088c2:	a359      	add	r3, pc, #356	; (adr r3, 8008a28 <calculateActualValues+0x330>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	f7f7 fcf6 	bl	80002b8 <__aeabi_dsub>
 80088cc:	4603      	mov	r3, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	4618      	mov	r0, r3
 80088d2:	4621      	mov	r1, r4
 80088d4:	f7f8 f978 	bl	8000bc8 <__aeabi_d2f>
 80088d8:	4602      	mov	r2, r0
 80088da:	4b6d      	ldr	r3, [pc, #436]	; (8008a90 <calculateActualValues+0x398>)
 80088dc:	601a      	str	r2, [r3, #0]
	IOutDchg = 0.0020342438 * IOutDschg_ADC	-  0.0633905546 + 0.03;
 80088de:	4b6d      	ldr	r3, [pc, #436]	; (8008a94 <calculateActualValues+0x39c>)
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7f7 fe36 	bl	8000554 <__aeabi_i2d>
 80088e8:	a351      	add	r3, pc, #324	; (adr r3, 8008a30 <calculateActualValues+0x338>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f7f7 fe9b 	bl	8000628 <__aeabi_dmul>
 80088f2:	4603      	mov	r3, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	4618      	mov	r0, r3
 80088f8:	4621      	mov	r1, r4
 80088fa:	a34f      	add	r3, pc, #316	; (adr r3, 8008a38 <calculateActualValues+0x340>)
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f7f7 fcda 	bl	80002b8 <__aeabi_dsub>
 8008904:	4603      	mov	r3, r0
 8008906:	460c      	mov	r4, r1
 8008908:	4618      	mov	r0, r3
 800890a:	4621      	mov	r1, r4
 800890c:	a346      	add	r3, pc, #280	; (adr r3, 8008a28 <calculateActualValues+0x330>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 fcd3 	bl	80002bc <__adddf3>
 8008916:	4603      	mov	r3, r0
 8008918:	460c      	mov	r4, r1
 800891a:	4618      	mov	r0, r3
 800891c:	4621      	mov	r1, r4
 800891e:	f7f8 f953 	bl	8000bc8 <__aeabi_d2f>
 8008922:	4602      	mov	r2, r0
 8008924:	4b5c      	ldr	r3, [pc, #368]	; (8008a98 <calculateActualValues+0x3a0>)
 8008926:	601a      	str	r2, [r3, #0]
	vIn      = 0.0061750796 * VinADC   	    -  0.0172273763;
 8008928:	4b5c      	ldr	r3, [pc, #368]	; (8008a9c <calculateActualValues+0x3a4>)
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f7f7 fe11 	bl	8000554 <__aeabi_i2d>
 8008932:	a343      	add	r3, pc, #268	; (adr r3, 8008a40 <calculateActualValues+0x348>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f7f7 fe76 	bl	8000628 <__aeabi_dmul>
 800893c:	4603      	mov	r3, r0
 800893e:	460c      	mov	r4, r1
 8008940:	4618      	mov	r0, r3
 8008942:	4621      	mov	r1, r4
 8008944:	a340      	add	r3, pc, #256	; (adr r3, 8008a48 <calculateActualValues+0x350>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fcb5 	bl	80002b8 <__aeabi_dsub>
 800894e:	4603      	mov	r3, r0
 8008950:	460c      	mov	r4, r1
 8008952:	4618      	mov	r0, r3
 8008954:	4621      	mov	r1, r4
 8008956:	f7f8 f937 	bl	8000bc8 <__aeabi_d2f>
 800895a:	4602      	mov	r2, r0
 800895c:	4b50      	ldr	r3, [pc, #320]	; (8008aa0 <calculateActualValues+0x3a8>)
 800895e:	601a      	str	r2, [r3, #0]

	//accumulates battery capacity
	if (IOutChg >= IOutDchg){batteryCharge = batteryCharge + IOutChg/1800;}
 8008960:	4b4b      	ldr	r3, [pc, #300]	; (8008a90 <calculateActualValues+0x398>)
 8008962:	ed93 7a00 	vldr	s14, [r3]
 8008966:	4b4c      	ldr	r3, [pc, #304]	; (8008a98 <calculateActualValues+0x3a0>)
 8008968:	edd3 7a00 	vldr	s15, [r3]
 800896c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008974:	f2c0 809e 	blt.w	8008ab4 <calculateActualValues+0x3bc>
 8008978:	4b45      	ldr	r3, [pc, #276]	; (8008a90 <calculateActualValues+0x398>)
 800897a:	edd3 7a00 	vldr	s15, [r3]
 800897e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008aa4 <calculateActualValues+0x3ac>
 8008982:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008986:	ee16 0a90 	vmov	r0, s13
 800898a:	f7f7 fdf5 	bl	8000578 <__aeabi_f2d>
 800898e:	4b46      	ldr	r3, [pc, #280]	; (8008aa8 <calculateActualValues+0x3b0>)
 8008990:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008994:	461a      	mov	r2, r3
 8008996:	4623      	mov	r3, r4
 8008998:	f7f7 fc90 	bl	80002bc <__adddf3>
 800899c:	4603      	mov	r3, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	e084      	b.n	8008aac <calculateActualValues+0x3b4>
 80089a2:	bf00      	nop
 80089a4:	f3af 8000 	nop.w
 80089a8:	659712ea 	.word	0x659712ea
 80089ac:	3f39e204 	.word	0x3f39e204
 80089b0:	8a818153 	.word	0x8a818153
 80089b4:	3f862624 	.word	0x3f862624
 80089b8:	39d533b0 	.word	0x39d533b0
 80089bc:	3f35fa65 	.word	0x3f35fa65
 80089c0:	1e7f73b3 	.word	0x1e7f73b3
 80089c4:	3f2981ef 	.word	0x3f2981ef
 80089c8:	1bb1080c 	.word	0x1bb1080c
 80089cc:	3f3233c4 	.word	0x3f3233c4
 80089d0:	d3ae3d6b 	.word	0xd3ae3d6b
 80089d4:	3f6e5969 	.word	0x3f6e5969
 80089d8:	598fca55 	.word	0x598fca55
 80089dc:	3f4abcad 	.word	0x3f4abcad
 80089e0:	feb691bd 	.word	0xfeb691bd
 80089e4:	3f650d08 	.word	0x3f650d08
 80089e8:	6c8cbf42 	.word	0x6c8cbf42
 80089ec:	3f40f9e2 	.word	0x3f40f9e2
 80089f0:	18ac32f4 	.word	0x18ac32f4
 80089f4:	3f69c1a5 	.word	0x3f69c1a5
 80089f8:	af05a99d 	.word	0xaf05a99d
 80089fc:	3f30dc0c 	.word	0x3f30dc0c
 8008a00:	b4f61303 	.word	0xb4f61303
 8008a04:	3f4f9e55 	.word	0x3f4f9e55
 8008a08:	d7da24ad 	.word	0xd7da24ad
 8008a0c:	3f0b727f 	.word	0x3f0b727f
 8008a10:	0395e1a9 	.word	0x0395e1a9
 8008a14:	3f4b0cc1 	.word	0x3f4b0cc1
 8008a18:	25137d0e 	.word	0x25137d0e
 8008a1c:	3f40998a 	.word	0x3f40998a
 8008a20:	1dd80acc 	.word	0x1dd80acc
 8008a24:	3f5e1971 	.word	0x3f5e1971
 8008a28:	eb851eb8 	.word	0xeb851eb8
 8008a2c:	3f9eb851 	.word	0x3f9eb851
 8008a30:	52fa997c 	.word	0x52fa997c
 8008a34:	3f60aa1e 	.word	0x3f60aa1e
 8008a38:	06e1de91 	.word	0x06e1de91
 8008a3c:	3fb03a5d 	.word	0x3fb03a5d
 8008a40:	4eea4727 	.word	0x4eea4727
 8008a44:	3f794b0a 	.word	0x3f794b0a
 8008a48:	a737b0d4 	.word	0xa737b0d4
 8008a4c:	3f91a40d 	.word	0x3f91a40d
 8008a50:	20000310 	.word	0x20000310
 8008a54:	2000032a 	.word	0x2000032a
 8008a58:	200003d4 	.word	0x200003d4
 8008a5c:	20000328 	.word	0x20000328
 8008a60:	200003d0 	.word	0x200003d0
 8008a64:	20000326 	.word	0x20000326
 8008a68:	200003cc 	.word	0x200003cc
 8008a6c:	20000324 	.word	0x20000324
 8008a70:	200003c8 	.word	0x200003c8
 8008a74:	20000322 	.word	0x20000322
 8008a78:	200003c4 	.word	0x200003c4
 8008a7c:	20000320 	.word	0x20000320
 8008a80:	200003c0 	.word	0x200003c0
 8008a84:	2000031e 	.word	0x2000031e
 8008a88:	200003bc 	.word	0x200003bc
 8008a8c:	2000032c 	.word	0x2000032c
 8008a90:	200003f4 	.word	0x200003f4
 8008a94:	2000032e 	.word	0x2000032e
 8008a98:	200003f8 	.word	0x200003f8
 8008a9c:	2000031c 	.word	0x2000031c
 8008aa0:	200003f0 	.word	0x200003f0
 8008aa4:	44e10000 	.word	0x44e10000
 8008aa8:	20000030 	.word	0x20000030
 8008aac:	4a30      	ldr	r2, [pc, #192]	; (8008b70 <calculateActualValues+0x478>)
 8008aae:	e9c2 3400 	strd	r3, r4, [r2]
 8008ab2:	e018      	b.n	8008ae6 <calculateActualValues+0x3ee>
	else					{batteryCharge = batteryCharge - IOutDchg/1800;}
 8008ab4:	4b2e      	ldr	r3, [pc, #184]	; (8008b70 <calculateActualValues+0x478>)
 8008ab6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008aba:	4b2e      	ldr	r3, [pc, #184]	; (8008b74 <calculateActualValues+0x47c>)
 8008abc:	edd3 7a00 	vldr	s15, [r3]
 8008ac0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8008b78 <calculateActualValues+0x480>
 8008ac4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ac8:	ee16 0a90 	vmov	r0, s13
 8008acc:	f7f7 fd54 	bl	8000578 <__aeabi_f2d>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fbee 	bl	80002b8 <__aeabi_dsub>
 8008adc:	4603      	mov	r3, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	4a23      	ldr	r2, [pc, #140]	; (8008b70 <calculateActualValues+0x478>)
 8008ae2:	e9c2 3400 	strd	r3, r4, [r2]

	//calculated cell voltages
	vCell1 = VC1 - VC0;
 8008ae6:	4b25      	ldr	r3, [pc, #148]	; (8008b7c <calculateActualValues+0x484>)
 8008ae8:	ed93 7a00 	vldr	s14, [r3]
 8008aec:	4b24      	ldr	r3, [pc, #144]	; (8008b80 <calculateActualValues+0x488>)
 8008aee:	edd3 7a00 	vldr	s15, [r3]
 8008af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008af6:	4b23      	ldr	r3, [pc, #140]	; (8008b84 <calculateActualValues+0x48c>)
 8008af8:	edc3 7a00 	vstr	s15, [r3]
	vCell2 = VC2 - VC1;
 8008afc:	4b22      	ldr	r3, [pc, #136]	; (8008b88 <calculateActualValues+0x490>)
 8008afe:	ed93 7a00 	vldr	s14, [r3]
 8008b02:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <calculateActualValues+0x484>)
 8008b04:	edd3 7a00 	vldr	s15, [r3]
 8008b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b0c:	4b1f      	ldr	r3, [pc, #124]	; (8008b8c <calculateActualValues+0x494>)
 8008b0e:	edc3 7a00 	vstr	s15, [r3]
	vCell3 = VC3 - VC2;
 8008b12:	4b1f      	ldr	r3, [pc, #124]	; (8008b90 <calculateActualValues+0x498>)
 8008b14:	ed93 7a00 	vldr	s14, [r3]
 8008b18:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <calculateActualValues+0x490>)
 8008b1a:	edd3 7a00 	vldr	s15, [r3]
 8008b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b22:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <calculateActualValues+0x49c>)
 8008b24:	edc3 7a00 	vstr	s15, [r3]
	vCell4 = VC4 - VC3;
 8008b28:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <calculateActualValues+0x4a0>)
 8008b2a:	ed93 7a00 	vldr	s14, [r3]
 8008b2e:	4b18      	ldr	r3, [pc, #96]	; (8008b90 <calculateActualValues+0x498>)
 8008b30:	edd3 7a00 	vldr	s15, [r3]
 8008b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b38:	4b18      	ldr	r3, [pc, #96]	; (8008b9c <calculateActualValues+0x4a4>)
 8008b3a:	edc3 7a00 	vstr	s15, [r3]
	vCell5 = VC5 - VC4;
 8008b3e:	4b18      	ldr	r3, [pc, #96]	; (8008ba0 <calculateActualValues+0x4a8>)
 8008b40:	ed93 7a00 	vldr	s14, [r3]
 8008b44:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <calculateActualValues+0x4a0>)
 8008b46:	edd3 7a00 	vldr	s15, [r3]
 8008b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b4e:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <calculateActualValues+0x4ac>)
 8008b50:	edc3 7a00 	vstr	s15, [r3]
	vCell6 = VC6 - VC5;
 8008b54:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <calculateActualValues+0x4b0>)
 8008b56:	ed93 7a00 	vldr	s14, [r3]
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <calculateActualValues+0x4a8>)
 8008b5c:	edd3 7a00 	vldr	s15, [r3]
 8008b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b64:	4b11      	ldr	r3, [pc, #68]	; (8008bac <calculateActualValues+0x4b4>)
 8008b66:	edc3 7a00 	vstr	s15, [r3]
}
 8008b6a:	bf00      	nop
 8008b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20000030 	.word	0x20000030
 8008b74:	200003f8 	.word	0x200003f8
 8008b78:	44e10000 	.word	0x44e10000
 8008b7c:	200003c0 	.word	0x200003c0
 8008b80:	200003bc 	.word	0x200003bc
 8008b84:	200003d8 	.word	0x200003d8
 8008b88:	200003c4 	.word	0x200003c4
 8008b8c:	200003dc 	.word	0x200003dc
 8008b90:	200003c8 	.word	0x200003c8
 8008b94:	200003e0 	.word	0x200003e0
 8008b98:	200003cc 	.word	0x200003cc
 8008b9c:	200003e4 	.word	0x200003e4
 8008ba0:	200003d0 	.word	0x200003d0
 8008ba4:	200003e8 	.word	0x200003e8
 8008ba8:	200003d4 	.word	0x200003d4
 8008bac:	200003ec 	.word	0x200003ec

08008bb0 <calculateTemps>:

//**********************************************************************************************************************************************************
void calculateTemps() //calculates temperatures using the S&H method once a second
{
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
	rTherm1 = (247500 - 60.42480469*temp1_ADC)/(0.0008056640625*temp1_ADC);
 8008bb4:	4bd6      	ldr	r3, [pc, #856]	; (8008f10 <calculateTemps+0x360>)
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7f7 fccb 	bl	8000554 <__aeabi_i2d>
 8008bbe:	a3c6      	add	r3, pc, #792	; (adr r3, 8008ed8 <calculateTemps+0x328>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fd30 	bl	8000628 <__aeabi_dmul>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	461a      	mov	r2, r3
 8008bce:	4623      	mov	r3, r4
 8008bd0:	a1c3      	add	r1, pc, #780	; (adr r1, 8008ee0 <calculateTemps+0x330>)
 8008bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd6:	f7f7 fb6f 	bl	80002b8 <__aeabi_dsub>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	460c      	mov	r4, r1
 8008bde:	4625      	mov	r5, r4
 8008be0:	461c      	mov	r4, r3
 8008be2:	4bcb      	ldr	r3, [pc, #812]	; (8008f10 <calculateTemps+0x360>)
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7f7 fcb4 	bl	8000554 <__aeabi_i2d>
 8008bec:	a3be      	add	r3, pc, #760	; (adr r3, 8008ee8 <calculateTemps+0x338>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f7 fd19 	bl	8000628 <__aeabi_dmul>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	f7f7 fe3d 	bl	800087c <__aeabi_ddiv>
 8008c02:	4603      	mov	r3, r0
 8008c04:	460c      	mov	r4, r1
 8008c06:	4ac3      	ldr	r2, [pc, #780]	; (8008f14 <calculateTemps+0x364>)
 8008c08:	e9c2 3400 	strd	r3, r4, [r2]
	rTherm2 = (247500 - 60.42480469*temp2_ADC)/(0.0008056640625*temp2_ADC);
 8008c0c:	4bc2      	ldr	r3, [pc, #776]	; (8008f18 <calculateTemps+0x368>)
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7f7 fc9f 	bl	8000554 <__aeabi_i2d>
 8008c16:	a3b0      	add	r3, pc, #704	; (adr r3, 8008ed8 <calculateTemps+0x328>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f7f7 fd04 	bl	8000628 <__aeabi_dmul>
 8008c20:	4603      	mov	r3, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	461a      	mov	r2, r3
 8008c26:	4623      	mov	r3, r4
 8008c28:	a1ad      	add	r1, pc, #692	; (adr r1, 8008ee0 <calculateTemps+0x330>)
 8008c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c2e:	f7f7 fb43 	bl	80002b8 <__aeabi_dsub>
 8008c32:	4603      	mov	r3, r0
 8008c34:	460c      	mov	r4, r1
 8008c36:	4625      	mov	r5, r4
 8008c38:	461c      	mov	r4, r3
 8008c3a:	4bb7      	ldr	r3, [pc, #732]	; (8008f18 <calculateTemps+0x368>)
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f7 fc88 	bl	8000554 <__aeabi_i2d>
 8008c44:	a3a8      	add	r3, pc, #672	; (adr r3, 8008ee8 <calculateTemps+0x338>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	f7f7 fced 	bl	8000628 <__aeabi_dmul>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4620      	mov	r0, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7f7 fe11 	bl	800087c <__aeabi_ddiv>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	4aaf      	ldr	r2, [pc, #700]	; (8008f1c <calculateTemps+0x36c>)
 8008c60:	e9c2 3400 	strd	r3, r4, [r2]
	rTherm3 = (495000 - 120.8496094*temp3_ADC)/(0.0008056640625*temp3_ADC);
 8008c64:	4bae      	ldr	r3, [pc, #696]	; (8008f20 <calculateTemps+0x370>)
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7f7 fc73 	bl	8000554 <__aeabi_i2d>
 8008c6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008ef0 <calculateTemps+0x340>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f7f7 fcd8 	bl	8000628 <__aeabi_dmul>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4623      	mov	r3, r4
 8008c80:	a19d      	add	r1, pc, #628	; (adr r1, 8008ef8 <calculateTemps+0x348>)
 8008c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c86:	f7f7 fb17 	bl	80002b8 <__aeabi_dsub>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	4625      	mov	r5, r4
 8008c90:	461c      	mov	r4, r3
 8008c92:	4ba3      	ldr	r3, [pc, #652]	; (8008f20 <calculateTemps+0x370>)
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7f7 fc5c 	bl	8000554 <__aeabi_i2d>
 8008c9c:	a392      	add	r3, pc, #584	; (adr r3, 8008ee8 <calculateTemps+0x338>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fcc1 	bl	8000628 <__aeabi_dmul>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4620      	mov	r0, r4
 8008cac:	4629      	mov	r1, r5
 8008cae:	f7f7 fde5 	bl	800087c <__aeabi_ddiv>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4a9b      	ldr	r2, [pc, #620]	; (8008f24 <calculateTemps+0x374>)
 8008cb8:	e9c2 3400 	strd	r3, r4, [r2]
	rTherm4 = (495000 - 120.8496094*temp4_ADC)/(0.0008056640625*temp4_ADC);
 8008cbc:	4b9a      	ldr	r3, [pc, #616]	; (8008f28 <calculateTemps+0x378>)
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7f7 fc47 	bl	8000554 <__aeabi_i2d>
 8008cc6:	a38a      	add	r3, pc, #552	; (adr r3, 8008ef0 <calculateTemps+0x340>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f7f7 fcac 	bl	8000628 <__aeabi_dmul>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	a187      	add	r1, pc, #540	; (adr r1, 8008ef8 <calculateTemps+0x348>)
 8008cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cde:	f7f7 faeb 	bl	80002b8 <__aeabi_dsub>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	4625      	mov	r5, r4
 8008ce8:	461c      	mov	r4, r3
 8008cea:	4b8f      	ldr	r3, [pc, #572]	; (8008f28 <calculateTemps+0x378>)
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7f7 fc30 	bl	8000554 <__aeabi_i2d>
 8008cf4:	a37c      	add	r3, pc, #496	; (adr r3, 8008ee8 <calculateTemps+0x338>)
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 fc95 	bl	8000628 <__aeabi_dmul>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4620      	mov	r0, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	f7f7 fdb9 	bl	800087c <__aeabi_ddiv>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	4a87      	ldr	r2, [pc, #540]	; (8008f2c <calculateTemps+0x37c>)
 8008d10:	e9c2 3400 	strd	r3, r4, [r2]

	temp1 = (float)(1/(A1 + B1*log(rTherm1) + C1*pow(log(rTherm1),3.0)) - 273.15);
 8008d14:	4b7f      	ldr	r3, [pc, #508]	; (8008f14 <calculateTemps+0x364>)
 8008d16:	ed93 7b00 	vldr	d7, [r3]
 8008d1a:	eeb0 0a47 	vmov.f32	s0, s14
 8008d1e:	eef0 0a67 	vmov.f32	s1, s15
 8008d22:	f003 fbdd 	bl	800c4e0 <log>
 8008d26:	ec51 0b10 	vmov	r0, r1, d0
 8008d2a:	4b81      	ldr	r3, [pc, #516]	; (8008f30 <calculateTemps+0x380>)
 8008d2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d30:	461a      	mov	r2, r3
 8008d32:	4623      	mov	r3, r4
 8008d34:	f7f7 fc78 	bl	8000628 <__aeabi_dmul>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4b7c      	ldr	r3, [pc, #496]	; (8008f34 <calculateTemps+0x384>)
 8008d42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d46:	461a      	mov	r2, r3
 8008d48:	4623      	mov	r3, r4
 8008d4a:	f7f7 fab7 	bl	80002bc <__adddf3>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	460c      	mov	r4, r1
 8008d52:	461d      	mov	r5, r3
 8008d54:	4626      	mov	r6, r4
 8008d56:	4b6f      	ldr	r3, [pc, #444]	; (8008f14 <calculateTemps+0x364>)
 8008d58:	ed93 7b00 	vldr	d7, [r3]
 8008d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8008d60:	eef0 0a67 	vmov.f32	s1, s15
 8008d64:	f003 fbbc 	bl	800c4e0 <log>
 8008d68:	eeb0 7a40 	vmov.f32	s14, s0
 8008d6c:	eef0 7a60 	vmov.f32	s15, s1
 8008d70:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8008f00 <calculateTemps+0x350>
 8008d74:	eeb0 0a47 	vmov.f32	s0, s14
 8008d78:	eef0 0a67 	vmov.f32	s1, s15
 8008d7c:	f003 fc30 	bl	800c5e0 <pow>
 8008d80:	ec51 0b10 	vmov	r0, r1, d0
 8008d84:	4b6c      	ldr	r3, [pc, #432]	; (8008f38 <calculateTemps+0x388>)
 8008d86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	f7f7 fc4b 	bl	8000628 <__aeabi_dmul>
 8008d92:	4603      	mov	r3, r0
 8008d94:	460c      	mov	r4, r1
 8008d96:	461a      	mov	r2, r3
 8008d98:	4623      	mov	r3, r4
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	f7f7 fa8d 	bl	80002bc <__adddf3>
 8008da2:	4603      	mov	r3, r0
 8008da4:	460c      	mov	r4, r1
 8008da6:	461a      	mov	r2, r3
 8008da8:	4623      	mov	r3, r4
 8008daa:	f04f 0000 	mov.w	r0, #0
 8008dae:	4963      	ldr	r1, [pc, #396]	; (8008f3c <calculateTemps+0x38c>)
 8008db0:	f7f7 fd64 	bl	800087c <__aeabi_ddiv>
 8008db4:	4603      	mov	r3, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	4618      	mov	r0, r3
 8008dba:	4621      	mov	r1, r4
 8008dbc:	a352      	add	r3, pc, #328	; (adr r3, 8008f08 <calculateTemps+0x358>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 fa79 	bl	80002b8 <__aeabi_dsub>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	460c      	mov	r4, r1
 8008dca:	4618      	mov	r0, r3
 8008dcc:	4621      	mov	r1, r4
 8008dce:	f7f7 fefb 	bl	8000bc8 <__aeabi_d2f>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	4b5a      	ldr	r3, [pc, #360]	; (8008f40 <calculateTemps+0x390>)
 8008dd6:	601a      	str	r2, [r3, #0]
	temp2 = (float)(1/(A2 + B2*log(rTherm2) + C2*pow(log(rTherm2),3.0)) - 273.15);
 8008dd8:	4b50      	ldr	r3, [pc, #320]	; (8008f1c <calculateTemps+0x36c>)
 8008dda:	ed93 7b00 	vldr	d7, [r3]
 8008dde:	eeb0 0a47 	vmov.f32	s0, s14
 8008de2:	eef0 0a67 	vmov.f32	s1, s15
 8008de6:	f003 fb7b 	bl	800c4e0 <log>
 8008dea:	ec51 0b10 	vmov	r0, r1, d0
 8008dee:	4b55      	ldr	r3, [pc, #340]	; (8008f44 <calculateTemps+0x394>)
 8008df0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008df4:	461a      	mov	r2, r3
 8008df6:	4623      	mov	r3, r4
 8008df8:	f7f7 fc16 	bl	8000628 <__aeabi_dmul>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	4618      	mov	r0, r3
 8008e02:	4621      	mov	r1, r4
 8008e04:	4b50      	ldr	r3, [pc, #320]	; (8008f48 <calculateTemps+0x398>)
 8008e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	4623      	mov	r3, r4
 8008e0e:	f7f7 fa55 	bl	80002bc <__adddf3>
 8008e12:	4603      	mov	r3, r0
 8008e14:	460c      	mov	r4, r1
 8008e16:	461d      	mov	r5, r3
 8008e18:	4626      	mov	r6, r4
 8008e1a:	4b40      	ldr	r3, [pc, #256]	; (8008f1c <calculateTemps+0x36c>)
 8008e1c:	ed93 7b00 	vldr	d7, [r3]
 8008e20:	eeb0 0a47 	vmov.f32	s0, s14
 8008e24:	eef0 0a67 	vmov.f32	s1, s15
 8008e28:	f003 fb5a 	bl	800c4e0 <log>
 8008e2c:	eeb0 7a40 	vmov.f32	s14, s0
 8008e30:	eef0 7a60 	vmov.f32	s15, s1
 8008e34:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8008f00 <calculateTemps+0x350>
 8008e38:	eeb0 0a47 	vmov.f32	s0, s14
 8008e3c:	eef0 0a67 	vmov.f32	s1, s15
 8008e40:	f003 fbce 	bl	800c5e0 <pow>
 8008e44:	ec51 0b10 	vmov	r0, r1, d0
 8008e48:	4b40      	ldr	r3, [pc, #256]	; (8008f4c <calculateTemps+0x39c>)
 8008e4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	4623      	mov	r3, r4
 8008e52:	f7f7 fbe9 	bl	8000628 <__aeabi_dmul>
 8008e56:	4603      	mov	r3, r0
 8008e58:	460c      	mov	r4, r1
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	4623      	mov	r3, r4
 8008e5e:	4628      	mov	r0, r5
 8008e60:	4631      	mov	r1, r6
 8008e62:	f7f7 fa2b 	bl	80002bc <__adddf3>
 8008e66:	4603      	mov	r3, r0
 8008e68:	460c      	mov	r4, r1
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4623      	mov	r3, r4
 8008e6e:	f04f 0000 	mov.w	r0, #0
 8008e72:	4932      	ldr	r1, [pc, #200]	; (8008f3c <calculateTemps+0x38c>)
 8008e74:	f7f7 fd02 	bl	800087c <__aeabi_ddiv>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	4621      	mov	r1, r4
 8008e80:	a321      	add	r3, pc, #132	; (adr r3, 8008f08 <calculateTemps+0x358>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f7f7 fa17 	bl	80002b8 <__aeabi_dsub>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	4618      	mov	r0, r3
 8008e90:	4621      	mov	r1, r4
 8008e92:	f7f7 fe99 	bl	8000bc8 <__aeabi_d2f>
 8008e96:	4602      	mov	r2, r0
 8008e98:	4b2d      	ldr	r3, [pc, #180]	; (8008f50 <calculateTemps+0x3a0>)
 8008e9a:	601a      	str	r2, [r3, #0]
	temp3 = (float)(1/(A3 + B3*log(rTherm3) + C3*pow(log(rTherm3),3.0)) - 273.15);
 8008e9c:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <calculateTemps+0x374>)
 8008e9e:	ed93 7b00 	vldr	d7, [r3]
 8008ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8008ea6:	eef0 0a67 	vmov.f32	s1, s15
 8008eaa:	f003 fb19 	bl	800c4e0 <log>
 8008eae:	ec51 0b10 	vmov	r0, r1, d0
 8008eb2:	4b28      	ldr	r3, [pc, #160]	; (8008f54 <calculateTemps+0x3a4>)
 8008eb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	4623      	mov	r3, r4
 8008ebc:	f7f7 fbb4 	bl	8000628 <__aeabi_dmul>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4b23      	ldr	r3, [pc, #140]	; (8008f58 <calculateTemps+0x3a8>)
 8008eca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	4623      	mov	r3, r4
 8008ed2:	e043      	b.n	8008f5c <calculateTemps+0x3ac>
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	00055e64 	.word	0x00055e64
 8008edc:	404e3660 	.word	0x404e3660
 8008ee0:	00000000 	.word	0x00000000
 8008ee4:	410e3660 	.word	0x410e3660
 8008ee8:	66666666 	.word	0x66666666
 8008eec:	3f4a6666 	.word	0x3f4a6666
 8008ef0:	001ad7f3 	.word	0x001ad7f3
 8008ef4:	405e3660 	.word	0x405e3660
 8008ef8:	00000000 	.word	0x00000000
 8008efc:	411e3660 	.word	0x411e3660
 8008f00:	00000000 	.word	0x00000000
 8008f04:	40080000 	.word	0x40080000
 8008f08:	66666666 	.word	0x66666666
 8008f0c:	40711266 	.word	0x40711266
 8008f10:	20000330 	.word	0x20000330
 8008f14:	20000338 	.word	0x20000338
 8008f18:	20000332 	.word	0x20000332
 8008f1c:	20000340 	.word	0x20000340
 8008f20:	20000334 	.word	0x20000334
 8008f24:	20000348 	.word	0x20000348
 8008f28:	20000336 	.word	0x20000336
 8008f2c:	20000350 	.word	0x20000350
 8008f30:	20000040 	.word	0x20000040
 8008f34:	20000038 	.word	0x20000038
 8008f38:	20000048 	.word	0x20000048
 8008f3c:	3ff00000 	.word	0x3ff00000
 8008f40:	20000358 	.word	0x20000358
 8008f44:	20000058 	.word	0x20000058
 8008f48:	20000050 	.word	0x20000050
 8008f4c:	20000060 	.word	0x20000060
 8008f50:	2000035c 	.word	0x2000035c
 8008f54:	20000070 	.word	0x20000070
 8008f58:	20000068 	.word	0x20000068
 8008f5c:	f7f7 f9ae 	bl	80002bc <__adddf3>
 8008f60:	4603      	mov	r3, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	461d      	mov	r5, r3
 8008f66:	4626      	mov	r6, r4
 8008f68:	4b57      	ldr	r3, [pc, #348]	; (80090c8 <calculateTemps+0x518>)
 8008f6a:	ed93 7b00 	vldr	d7, [r3]
 8008f6e:	eeb0 0a47 	vmov.f32	s0, s14
 8008f72:	eef0 0a67 	vmov.f32	s1, s15
 8008f76:	f003 fab3 	bl	800c4e0 <log>
 8008f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8008f7e:	eef0 7a60 	vmov.f32	s15, s1
 8008f82:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 80090b8 <calculateTemps+0x508>
 8008f86:	eeb0 0a47 	vmov.f32	s0, s14
 8008f8a:	eef0 0a67 	vmov.f32	s1, s15
 8008f8e:	f003 fb27 	bl	800c5e0 <pow>
 8008f92:	ec51 0b10 	vmov	r0, r1, d0
 8008f96:	4b4d      	ldr	r3, [pc, #308]	; (80090cc <calculateTemps+0x51c>)
 8008f98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4623      	mov	r3, r4
 8008fa0:	f7f7 fb42 	bl	8000628 <__aeabi_dmul>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4623      	mov	r3, r4
 8008fac:	4628      	mov	r0, r5
 8008fae:	4631      	mov	r1, r6
 8008fb0:	f7f7 f984 	bl	80002bc <__adddf3>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4623      	mov	r3, r4
 8008fbc:	f04f 0000 	mov.w	r0, #0
 8008fc0:	4943      	ldr	r1, [pc, #268]	; (80090d0 <calculateTemps+0x520>)
 8008fc2:	f7f7 fc5b 	bl	800087c <__aeabi_ddiv>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	460c      	mov	r4, r1
 8008fca:	4618      	mov	r0, r3
 8008fcc:	4621      	mov	r1, r4
 8008fce:	a33c      	add	r3, pc, #240	; (adr r3, 80090c0 <calculateTemps+0x510>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 f970 	bl	80002b8 <__aeabi_dsub>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	4618      	mov	r0, r3
 8008fde:	4621      	mov	r1, r4
 8008fe0:	f7f7 fdf2 	bl	8000bc8 <__aeabi_d2f>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	4b3b      	ldr	r3, [pc, #236]	; (80090d4 <calculateTemps+0x524>)
 8008fe8:	601a      	str	r2, [r3, #0]
	temp4 = (float)(1/(A4 + B4*log(rTherm4) + C4*pow(log(rTherm4),3.0)) - 273.15);
 8008fea:	4b3b      	ldr	r3, [pc, #236]	; (80090d8 <calculateTemps+0x528>)
 8008fec:	ed93 7b00 	vldr	d7, [r3]
 8008ff0:	eeb0 0a47 	vmov.f32	s0, s14
 8008ff4:	eef0 0a67 	vmov.f32	s1, s15
 8008ff8:	f003 fa72 	bl	800c4e0 <log>
 8008ffc:	ec51 0b10 	vmov	r0, r1, d0
 8009000:	4b36      	ldr	r3, [pc, #216]	; (80090dc <calculateTemps+0x52c>)
 8009002:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009006:	461a      	mov	r2, r3
 8009008:	4623      	mov	r3, r4
 800900a:	f7f7 fb0d 	bl	8000628 <__aeabi_dmul>
 800900e:	4603      	mov	r3, r0
 8009010:	460c      	mov	r4, r1
 8009012:	4618      	mov	r0, r3
 8009014:	4621      	mov	r1, r4
 8009016:	4b32      	ldr	r3, [pc, #200]	; (80090e0 <calculateTemps+0x530>)
 8009018:	e9d3 3400 	ldrd	r3, r4, [r3]
 800901c:	461a      	mov	r2, r3
 800901e:	4623      	mov	r3, r4
 8009020:	f7f7 f94c 	bl	80002bc <__adddf3>
 8009024:	4603      	mov	r3, r0
 8009026:	460c      	mov	r4, r1
 8009028:	461d      	mov	r5, r3
 800902a:	4626      	mov	r6, r4
 800902c:	4b2a      	ldr	r3, [pc, #168]	; (80090d8 <calculateTemps+0x528>)
 800902e:	ed93 7b00 	vldr	d7, [r3]
 8009032:	eeb0 0a47 	vmov.f32	s0, s14
 8009036:	eef0 0a67 	vmov.f32	s1, s15
 800903a:	f003 fa51 	bl	800c4e0 <log>
 800903e:	eeb0 7a40 	vmov.f32	s14, s0
 8009042:	eef0 7a60 	vmov.f32	s15, s1
 8009046:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80090b8 <calculateTemps+0x508>
 800904a:	eeb0 0a47 	vmov.f32	s0, s14
 800904e:	eef0 0a67 	vmov.f32	s1, s15
 8009052:	f003 fac5 	bl	800c5e0 <pow>
 8009056:	ec51 0b10 	vmov	r0, r1, d0
 800905a:	4b22      	ldr	r3, [pc, #136]	; (80090e4 <calculateTemps+0x534>)
 800905c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009060:	461a      	mov	r2, r3
 8009062:	4623      	mov	r3, r4
 8009064:	f7f7 fae0 	bl	8000628 <__aeabi_dmul>
 8009068:	4603      	mov	r3, r0
 800906a:	460c      	mov	r4, r1
 800906c:	461a      	mov	r2, r3
 800906e:	4623      	mov	r3, r4
 8009070:	4628      	mov	r0, r5
 8009072:	4631      	mov	r1, r6
 8009074:	f7f7 f922 	bl	80002bc <__adddf3>
 8009078:	4603      	mov	r3, r0
 800907a:	460c      	mov	r4, r1
 800907c:	461a      	mov	r2, r3
 800907e:	4623      	mov	r3, r4
 8009080:	f04f 0000 	mov.w	r0, #0
 8009084:	4912      	ldr	r1, [pc, #72]	; (80090d0 <calculateTemps+0x520>)
 8009086:	f7f7 fbf9 	bl	800087c <__aeabi_ddiv>
 800908a:	4603      	mov	r3, r0
 800908c:	460c      	mov	r4, r1
 800908e:	4618      	mov	r0, r3
 8009090:	4621      	mov	r1, r4
 8009092:	a30b      	add	r3, pc, #44	; (adr r3, 80090c0 <calculateTemps+0x510>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f7f7 f90e 	bl	80002b8 <__aeabi_dsub>
 800909c:	4603      	mov	r3, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	4618      	mov	r0, r3
 80090a2:	4621      	mov	r1, r4
 80090a4:	f7f7 fd90 	bl	8000bc8 <__aeabi_d2f>
 80090a8:	4602      	mov	r2, r0
 80090aa:	4b0f      	ldr	r3, [pc, #60]	; (80090e8 <calculateTemps+0x538>)
 80090ac:	601a      	str	r2, [r3, #0]
}
 80090ae:	bf00      	nop
 80090b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090b2:	bf00      	nop
 80090b4:	f3af 8000 	nop.w
 80090b8:	00000000 	.word	0x00000000
 80090bc:	40080000 	.word	0x40080000
 80090c0:	66666666 	.word	0x66666666
 80090c4:	40711266 	.word	0x40711266
 80090c8:	20000348 	.word	0x20000348
 80090cc:	20000078 	.word	0x20000078
 80090d0:	3ff00000 	.word	0x3ff00000
 80090d4:	20000360 	.word	0x20000360
 80090d8:	20000350 	.word	0x20000350
 80090dc:	20000088 	.word	0x20000088
 80090e0:	20000080 	.word	0x20000080
 80090e4:	20000090 	.word	0x20000090
 80090e8:	20000364 	.word	0x20000364

080090ec <initialisePIDController>:

//**********************************************************************************************************************************************************
void initialisePIDController() //initialises the PID controller
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
	boostEnable = 0;
 80090f0:	4b23      	ldr	r3, [pc, #140]	; (8009180 <initialisePIDController+0x94>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]
	boostEnableOld = 0;
 80090f6:	4b23      	ldr	r3, [pc, #140]	; (8009184 <initialisePIDController+0x98>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	701a      	strb	r2, [r3, #0]
    error_V = 0.0;
 80090fc:	4b22      	ldr	r3, [pc, #136]	; (8009188 <initialisePIDController+0x9c>)
 80090fe:	f04f 0200 	mov.w	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
	prevError_V = 0.0;
 8009104:	4b21      	ldr	r3, [pc, #132]	; (800918c <initialisePIDController+0xa0>)
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	601a      	str	r2, [r3, #0]
	proportional_V = 0.0;
 800910c:	4b20      	ldr	r3, [pc, #128]	; (8009190 <initialisePIDController+0xa4>)
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
	integral_V = 0.0;
 8009114:	4b1f      	ldr	r3, [pc, #124]	; (8009194 <initialisePIDController+0xa8>)
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	601a      	str	r2, [r3, #0]
	derivative_V = 0.0;
 800911c:	4b1e      	ldr	r3, [pc, #120]	; (8009198 <initialisePIDController+0xac>)
 800911e:	f04f 0200 	mov.w	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
	presentValue_V = 0.0;
 8009124:	4b1d      	ldr	r3, [pc, #116]	; (800919c <initialisePIDController+0xb0>)
 8009126:	f04f 0200 	mov.w	r2, #0
 800912a:	601a      	str	r2, [r3, #0]
	pidOutput_V = 0.0;
 800912c:	4b1c      	ldr	r3, [pc, #112]	; (80091a0 <initialisePIDController+0xb4>)
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	601a      	str	r2, [r3, #0]

	error_I = 0.0;
 8009134:	4b1b      	ldr	r3, [pc, #108]	; (80091a4 <initialisePIDController+0xb8>)
 8009136:	f04f 0200 	mov.w	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
	prevError_I = 0.0;
 800913c:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <initialisePIDController+0xbc>)
 800913e:	f04f 0200 	mov.w	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
	proportional_I = 0.0;
 8009144:	4b19      	ldr	r3, [pc, #100]	; (80091ac <initialisePIDController+0xc0>)
 8009146:	f04f 0200 	mov.w	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
	integral_I = 0.0;
 800914c:	4b18      	ldr	r3, [pc, #96]	; (80091b0 <initialisePIDController+0xc4>)
 800914e:	f04f 0200 	mov.w	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
	derivative_I = 0.0;
 8009154:	4b17      	ldr	r3, [pc, #92]	; (80091b4 <initialisePIDController+0xc8>)
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
	presentValue_I = 0.0;
 800915c:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <initialisePIDController+0xcc>)
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
	setpoint_I = 0.0;
 8009164:	4b15      	ldr	r3, [pc, #84]	; (80091bc <initialisePIDController+0xd0>)
 8009166:	f04f 0200 	mov.w	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
	pidOutput_I = 0.0;
 800916c:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <initialisePIDController+0xd4>)
 800916e:	f04f 0200 	mov.w	r2, #0
 8009172:	601a      	str	r2, [r3, #0]
}
 8009174:	bf00      	nop
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	2000030c 	.word	0x2000030c
 8009184:	20000312 	.word	0x20000312
 8009188:	20000374 	.word	0x20000374
 800918c:	20000378 	.word	0x20000378
 8009190:	2000037c 	.word	0x2000037c
 8009194:	20000380 	.word	0x20000380
 8009198:	20000384 	.word	0x20000384
 800919c:	20000388 	.word	0x20000388
 80091a0:	2000038c 	.word	0x2000038c
 80091a4:	2000039c 	.word	0x2000039c
 80091a8:	200003a0 	.word	0x200003a0
 80091ac:	200003a4 	.word	0x200003a4
 80091b0:	200003a8 	.word	0x200003a8
 80091b4:	200003ac 	.word	0x200003ac
 80091b8:	200003b0 	.word	0x200003b0
 80091bc:	200003b4 	.word	0x200003b4
 80091c0:	200003b8 	.word	0x200003b8

080091c4 <executeOperation>:

//**********************************************************************************************************************************************************
void executeOperation() //CAN bus and UART parser
{
 80091c4:	b590      	push	{r4, r7, lr}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
	//? = don't care as long as a character is there, $ = integer

	//change main constant current and constant voltage parameters in mA and mV respectively
	if 		(strcmp(opCode, "SCC") == 0){ currentLimit = (float)operand;  sprintf(TxRx_data,"SCC->ACK");}   // Set Charging Current: SCC?$$$$ in mA
 80091ca:	49b4      	ldr	r1, [pc, #720]	; (800949c <executeOperation+0x2d8>)
 80091cc:	48b4      	ldr	r0, [pc, #720]	; (80094a0 <executeOperation+0x2dc>)
 80091ce:	f7f7 f807 	bl	80001e0 <strcmp>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d111      	bne.n	80091fc <executeOperation+0x38>
 80091d8:	4bb2      	ldr	r3, [pc, #712]	; (80094a4 <executeOperation+0x2e0>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e4:	4bb0      	ldr	r3, [pc, #704]	; (80094a8 <executeOperation+0x2e4>)
 80091e6:	edc3 7a00 	vstr	s15, [r3]
 80091ea:	4ab0      	ldr	r2, [pc, #704]	; (80094ac <executeOperation+0x2e8>)
 80091ec:	4bb0      	ldr	r3, [pc, #704]	; (80094b0 <executeOperation+0x2ec>)
 80091ee:	cb03      	ldmia	r3!, {r0, r1}
 80091f0:	6010      	str	r0, [r2, #0]
 80091f2:	6051      	str	r1, [r2, #4]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	7213      	strb	r3, [r2, #8]
 80091f8:	f000 bc15 	b.w	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "SCV") == 0){ setpoint_V = (float)operand/1000; sprintf(TxRx_data,"SCV->ACK");} // Set Charging Voltage: SCV$$$$$ in mV
 80091fc:	49ad      	ldr	r1, [pc, #692]	; (80094b4 <executeOperation+0x2f0>)
 80091fe:	48a8      	ldr	r0, [pc, #672]	; (80094a0 <executeOperation+0x2dc>)
 8009200:	f7f6 ffee 	bl	80001e0 <strcmp>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d114      	bne.n	8009234 <executeOperation+0x70>
 800920a:	4ba6      	ldr	r3, [pc, #664]	; (80094a4 <executeOperation+0x2e0>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009216:	eddf 6aa8 	vldr	s13, [pc, #672]	; 80094b8 <executeOperation+0x2f4>
 800921a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800921e:	4ba7      	ldr	r3, [pc, #668]	; (80094bc <executeOperation+0x2f8>)
 8009220:	edc3 7a00 	vstr	s15, [r3]
 8009224:	4aa1      	ldr	r2, [pc, #644]	; (80094ac <executeOperation+0x2e8>)
 8009226:	4ba6      	ldr	r3, [pc, #664]	; (80094c0 <executeOperation+0x2fc>)
 8009228:	cb03      	ldmia	r3!, {r0, r1}
 800922a:	6010      	str	r0, [r2, #0]
 800922c:	6051      	str	r1, [r2, #4]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	7213      	strb	r3, [r2, #8]
 8009232:	e3f8      	b.n	8009a26 <executeOperation+0x862>

	//changing PID constants for buck and boost, boost = stepup(converter), buck = buck (converter) in the form $$.$$$
	else if (strcmp(opCode, "PCS") == 0){ KP_I_boost = (float)operand/100; sprintf(TxRx_data,"PCS->ACK"); } // Proportional Current Stepup: PCS$$$$$
 8009234:	49a3      	ldr	r1, [pc, #652]	; (80094c4 <executeOperation+0x300>)
 8009236:	489a      	ldr	r0, [pc, #616]	; (80094a0 <executeOperation+0x2dc>)
 8009238:	f7f6 ffd2 	bl	80001e0 <strcmp>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d114      	bne.n	800926c <executeOperation+0xa8>
 8009242:	4b98      	ldr	r3, [pc, #608]	; (80094a4 <executeOperation+0x2e0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	ee07 3a90 	vmov	s15, r3
 800924a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800924e:	eddf 6a9e 	vldr	s13, [pc, #632]	; 80094c8 <executeOperation+0x304>
 8009252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009256:	4b9d      	ldr	r3, [pc, #628]	; (80094cc <executeOperation+0x308>)
 8009258:	edc3 7a00 	vstr	s15, [r3]
 800925c:	4a93      	ldr	r2, [pc, #588]	; (80094ac <executeOperation+0x2e8>)
 800925e:	4b9c      	ldr	r3, [pc, #624]	; (80094d0 <executeOperation+0x30c>)
 8009260:	cb03      	ldmia	r3!, {r0, r1}
 8009262:	6010      	str	r0, [r2, #0]
 8009264:	6051      	str	r1, [r2, #4]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	7213      	strb	r3, [r2, #8]
 800926a:	e3dc      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "ICS") == 0){ KI_I_boost = (float)operand/100; sprintf(TxRx_data,"ICS->ACK"); } // Integral 	  Current Stepup: ICS$$$$$
 800926c:	4999      	ldr	r1, [pc, #612]	; (80094d4 <executeOperation+0x310>)
 800926e:	488c      	ldr	r0, [pc, #560]	; (80094a0 <executeOperation+0x2dc>)
 8009270:	f7f6 ffb6 	bl	80001e0 <strcmp>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d114      	bne.n	80092a4 <executeOperation+0xe0>
 800927a:	4b8a      	ldr	r3, [pc, #552]	; (80094a4 <executeOperation+0x2e0>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009286:	eddf 6a90 	vldr	s13, [pc, #576]	; 80094c8 <executeOperation+0x304>
 800928a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800928e:	4b92      	ldr	r3, [pc, #584]	; (80094d8 <executeOperation+0x314>)
 8009290:	edc3 7a00 	vstr	s15, [r3]
 8009294:	4a85      	ldr	r2, [pc, #532]	; (80094ac <executeOperation+0x2e8>)
 8009296:	4b91      	ldr	r3, [pc, #580]	; (80094dc <executeOperation+0x318>)
 8009298:	cb03      	ldmia	r3!, {r0, r1}
 800929a:	6010      	str	r0, [r2, #0]
 800929c:	6051      	str	r1, [r2, #4]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	7213      	strb	r3, [r2, #8]
 80092a2:	e3c0      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "DCS") == 0){ KD_I_boost = (float)operand/100; sprintf(TxRx_data,"DCS->ACK"); } // Derivative   Current Stepup: DCS$$$$$
 80092a4:	498e      	ldr	r1, [pc, #568]	; (80094e0 <executeOperation+0x31c>)
 80092a6:	487e      	ldr	r0, [pc, #504]	; (80094a0 <executeOperation+0x2dc>)
 80092a8:	f7f6 ff9a 	bl	80001e0 <strcmp>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d114      	bne.n	80092dc <executeOperation+0x118>
 80092b2:	4b7c      	ldr	r3, [pc, #496]	; (80094a4 <executeOperation+0x2e0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	ee07 3a90 	vmov	s15, r3
 80092ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092be:	eddf 6a82 	vldr	s13, [pc, #520]	; 80094c8 <executeOperation+0x304>
 80092c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092c6:	4b87      	ldr	r3, [pc, #540]	; (80094e4 <executeOperation+0x320>)
 80092c8:	edc3 7a00 	vstr	s15, [r3]
 80092cc:	4a77      	ldr	r2, [pc, #476]	; (80094ac <executeOperation+0x2e8>)
 80092ce:	4b86      	ldr	r3, [pc, #536]	; (80094e8 <executeOperation+0x324>)
 80092d0:	cb03      	ldmia	r3!, {r0, r1}
 80092d2:	6010      	str	r0, [r2, #0]
 80092d4:	6051      	str	r1, [r2, #4]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	7213      	strb	r3, [r2, #8]
 80092da:	e3a4      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "PVS") == 0){ KP_V_boost = (float)operand/100; sprintf(TxRx_data,"PVS->ACK"); } // Proportional Current Stepup: PVS$$$$$
 80092dc:	4983      	ldr	r1, [pc, #524]	; (80094ec <executeOperation+0x328>)
 80092de:	4870      	ldr	r0, [pc, #448]	; (80094a0 <executeOperation+0x2dc>)
 80092e0:	f7f6 ff7e 	bl	80001e0 <strcmp>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d114      	bne.n	8009314 <executeOperation+0x150>
 80092ea:	4b6e      	ldr	r3, [pc, #440]	; (80094a4 <executeOperation+0x2e0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092f6:	eddf 6a74 	vldr	s13, [pc, #464]	; 80094c8 <executeOperation+0x304>
 80092fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092fe:	4b7c      	ldr	r3, [pc, #496]	; (80094f0 <executeOperation+0x32c>)
 8009300:	edc3 7a00 	vstr	s15, [r3]
 8009304:	4a69      	ldr	r2, [pc, #420]	; (80094ac <executeOperation+0x2e8>)
 8009306:	4b7b      	ldr	r3, [pc, #492]	; (80094f4 <executeOperation+0x330>)
 8009308:	cb03      	ldmia	r3!, {r0, r1}
 800930a:	6010      	str	r0, [r2, #0]
 800930c:	6051      	str	r1, [r2, #4]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	7213      	strb	r3, [r2, #8]
 8009312:	e388      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "IVS") == 0){ KI_V_boost = (float)operand/100; sprintf(TxRx_data,"IVS->ACK"); } // Integral 	  Current Stepup: IVS$$$$$
 8009314:	4978      	ldr	r1, [pc, #480]	; (80094f8 <executeOperation+0x334>)
 8009316:	4862      	ldr	r0, [pc, #392]	; (80094a0 <executeOperation+0x2dc>)
 8009318:	f7f6 ff62 	bl	80001e0 <strcmp>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d114      	bne.n	800934c <executeOperation+0x188>
 8009322:	4b60      	ldr	r3, [pc, #384]	; (80094a4 <executeOperation+0x2e0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800932e:	eddf 6a66 	vldr	s13, [pc, #408]	; 80094c8 <executeOperation+0x304>
 8009332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009336:	4b71      	ldr	r3, [pc, #452]	; (80094fc <executeOperation+0x338>)
 8009338:	edc3 7a00 	vstr	s15, [r3]
 800933c:	4a5b      	ldr	r2, [pc, #364]	; (80094ac <executeOperation+0x2e8>)
 800933e:	4b70      	ldr	r3, [pc, #448]	; (8009500 <executeOperation+0x33c>)
 8009340:	cb03      	ldmia	r3!, {r0, r1}
 8009342:	6010      	str	r0, [r2, #0]
 8009344:	6051      	str	r1, [r2, #4]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	7213      	strb	r3, [r2, #8]
 800934a:	e36c      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "DVS") == 0){ KD_V_boost = (float)operand/100; sprintf(TxRx_data,"DVS->ACK"); } // Derivative   Current Stepup: DVS$$$$$
 800934c:	496d      	ldr	r1, [pc, #436]	; (8009504 <executeOperation+0x340>)
 800934e:	4854      	ldr	r0, [pc, #336]	; (80094a0 <executeOperation+0x2dc>)
 8009350:	f7f6 ff46 	bl	80001e0 <strcmp>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d114      	bne.n	8009384 <executeOperation+0x1c0>
 800935a:	4b52      	ldr	r3, [pc, #328]	; (80094a4 <executeOperation+0x2e0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009366:	eddf 6a58 	vldr	s13, [pc, #352]	; 80094c8 <executeOperation+0x304>
 800936a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800936e:	4b66      	ldr	r3, [pc, #408]	; (8009508 <executeOperation+0x344>)
 8009370:	edc3 7a00 	vstr	s15, [r3]
 8009374:	4a4d      	ldr	r2, [pc, #308]	; (80094ac <executeOperation+0x2e8>)
 8009376:	4b65      	ldr	r3, [pc, #404]	; (800950c <executeOperation+0x348>)
 8009378:	cb03      	ldmia	r3!, {r0, r1}
 800937a:	6010      	str	r0, [r2, #0]
 800937c:	6051      	str	r1, [r2, #4]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	7213      	strb	r3, [r2, #8]
 8009382:	e350      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "PCB") == 0){ KP_I_buck  = (float)operand/100; sprintf(TxRx_data,"PCB->ACK"); } // Proportional Current Buck  : PCB$$$$$
 8009384:	4962      	ldr	r1, [pc, #392]	; (8009510 <executeOperation+0x34c>)
 8009386:	4846      	ldr	r0, [pc, #280]	; (80094a0 <executeOperation+0x2dc>)
 8009388:	f7f6 ff2a 	bl	80001e0 <strcmp>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d114      	bne.n	80093bc <executeOperation+0x1f8>
 8009392:	4b44      	ldr	r3, [pc, #272]	; (80094a4 <executeOperation+0x2e0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800939e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80094c8 <executeOperation+0x304>
 80093a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80093a6:	4b5b      	ldr	r3, [pc, #364]	; (8009514 <executeOperation+0x350>)
 80093a8:	edc3 7a00 	vstr	s15, [r3]
 80093ac:	4a3f      	ldr	r2, [pc, #252]	; (80094ac <executeOperation+0x2e8>)
 80093ae:	4b5a      	ldr	r3, [pc, #360]	; (8009518 <executeOperation+0x354>)
 80093b0:	cb03      	ldmia	r3!, {r0, r1}
 80093b2:	6010      	str	r0, [r2, #0]
 80093b4:	6051      	str	r1, [r2, #4]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	7213      	strb	r3, [r2, #8]
 80093ba:	e334      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "ICB") == 0){ KI_I_buck  = (float)operand/100; sprintf(TxRx_data,"ICB->ACK"); } // Integral 	  Current Buck  : ICB$$$$$
 80093bc:	4957      	ldr	r1, [pc, #348]	; (800951c <executeOperation+0x358>)
 80093be:	4838      	ldr	r0, [pc, #224]	; (80094a0 <executeOperation+0x2dc>)
 80093c0:	f7f6 ff0e 	bl	80001e0 <strcmp>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d114      	bne.n	80093f4 <executeOperation+0x230>
 80093ca:	4b36      	ldr	r3, [pc, #216]	; (80094a4 <executeOperation+0x2e0>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093d6:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80094c8 <executeOperation+0x304>
 80093da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80093de:	4b50      	ldr	r3, [pc, #320]	; (8009520 <executeOperation+0x35c>)
 80093e0:	edc3 7a00 	vstr	s15, [r3]
 80093e4:	4a31      	ldr	r2, [pc, #196]	; (80094ac <executeOperation+0x2e8>)
 80093e6:	4b4f      	ldr	r3, [pc, #316]	; (8009524 <executeOperation+0x360>)
 80093e8:	cb03      	ldmia	r3!, {r0, r1}
 80093ea:	6010      	str	r0, [r2, #0]
 80093ec:	6051      	str	r1, [r2, #4]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	7213      	strb	r3, [r2, #8]
 80093f2:	e318      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "DCB") == 0){ KD_I_buck  = (float)operand/100; sprintf(TxRx_data,"DCB->ACK"); } // Derivative   Current Buck  : DCB$$$$$
 80093f4:	494c      	ldr	r1, [pc, #304]	; (8009528 <executeOperation+0x364>)
 80093f6:	482a      	ldr	r0, [pc, #168]	; (80094a0 <executeOperation+0x2dc>)
 80093f8:	f7f6 fef2 	bl	80001e0 <strcmp>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d114      	bne.n	800942c <executeOperation+0x268>
 8009402:	4b28      	ldr	r3, [pc, #160]	; (80094a4 <executeOperation+0x2e0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800940e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80094c8 <executeOperation+0x304>
 8009412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009416:	4b45      	ldr	r3, [pc, #276]	; (800952c <executeOperation+0x368>)
 8009418:	edc3 7a00 	vstr	s15, [r3]
 800941c:	4a23      	ldr	r2, [pc, #140]	; (80094ac <executeOperation+0x2e8>)
 800941e:	4b44      	ldr	r3, [pc, #272]	; (8009530 <executeOperation+0x36c>)
 8009420:	cb03      	ldmia	r3!, {r0, r1}
 8009422:	6010      	str	r0, [r2, #0]
 8009424:	6051      	str	r1, [r2, #4]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	7213      	strb	r3, [r2, #8]
 800942a:	e2fc      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "PVB") == 0){ KP_V_buck  = (float)operand/100; sprintf(TxRx_data,"PVB->ACK"); } // Proportional Current Buck  : PVB$$$$$
 800942c:	4941      	ldr	r1, [pc, #260]	; (8009534 <executeOperation+0x370>)
 800942e:	481c      	ldr	r0, [pc, #112]	; (80094a0 <executeOperation+0x2dc>)
 8009430:	f7f6 fed6 	bl	80001e0 <strcmp>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d114      	bne.n	8009464 <executeOperation+0x2a0>
 800943a:	4b1a      	ldr	r3, [pc, #104]	; (80094a4 <executeOperation+0x2e0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009446:	eddf 6a20 	vldr	s13, [pc, #128]	; 80094c8 <executeOperation+0x304>
 800944a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800944e:	4b3a      	ldr	r3, [pc, #232]	; (8009538 <executeOperation+0x374>)
 8009450:	edc3 7a00 	vstr	s15, [r3]
 8009454:	4a15      	ldr	r2, [pc, #84]	; (80094ac <executeOperation+0x2e8>)
 8009456:	4b39      	ldr	r3, [pc, #228]	; (800953c <executeOperation+0x378>)
 8009458:	cb03      	ldmia	r3!, {r0, r1}
 800945a:	6010      	str	r0, [r2, #0]
 800945c:	6051      	str	r1, [r2, #4]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	7213      	strb	r3, [r2, #8]
 8009462:	e2e0      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "IVB") == 0){ KI_V_buck  = (float)operand/100; sprintf(TxRx_data,"IVB->ACK"); } // Integral 	  Current Buck  : IVB$$$$$
 8009464:	4936      	ldr	r1, [pc, #216]	; (8009540 <executeOperation+0x37c>)
 8009466:	480e      	ldr	r0, [pc, #56]	; (80094a0 <executeOperation+0x2dc>)
 8009468:	f7f6 feba 	bl	80001e0 <strcmp>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d16c      	bne.n	800954c <executeOperation+0x388>
 8009472:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <executeOperation+0x2e0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800947e:	eddf 6a12 	vldr	s13, [pc, #72]	; 80094c8 <executeOperation+0x304>
 8009482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009486:	4b2f      	ldr	r3, [pc, #188]	; (8009544 <executeOperation+0x380>)
 8009488:	edc3 7a00 	vstr	s15, [r3]
 800948c:	4a07      	ldr	r2, [pc, #28]	; (80094ac <executeOperation+0x2e8>)
 800948e:	4b2e      	ldr	r3, [pc, #184]	; (8009548 <executeOperation+0x384>)
 8009490:	cb03      	ldmia	r3!, {r0, r1}
 8009492:	6010      	str	r0, [r2, #0]
 8009494:	6051      	str	r1, [r2, #4]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	7213      	strb	r3, [r2, #8]
 800949a:	e2c4      	b.n	8009a26 <executeOperation+0x862>
 800949c:	0800db14 	.word	0x0800db14
 80094a0:	20002128 	.word	0x20002128
 80094a4:	200002c0 	.word	0x200002c0
 80094a8:	20000098 	.word	0x20000098
 80094ac:	200012e0 	.word	0x200012e0
 80094b0:	0800db18 	.word	0x0800db18
 80094b4:	0800db24 	.word	0x0800db24
 80094b8:	447a0000 	.word	0x447a0000
 80094bc:	2000009c 	.word	0x2000009c
 80094c0:	0800db28 	.word	0x0800db28
 80094c4:	0800db34 	.word	0x0800db34
 80094c8:	42c80000 	.word	0x42c80000
 80094cc:	2000001c 	.word	0x2000001c
 80094d0:	0800db38 	.word	0x0800db38
 80094d4:	0800db44 	.word	0x0800db44
 80094d8:	20000020 	.word	0x20000020
 80094dc:	0800db48 	.word	0x0800db48
 80094e0:	0800db54 	.word	0x0800db54
 80094e4:	200002b0 	.word	0x200002b0
 80094e8:	0800db58 	.word	0x0800db58
 80094ec:	0800db64 	.word	0x0800db64
 80094f0:	20000024 	.word	0x20000024
 80094f4:	0800db68 	.word	0x0800db68
 80094f8:	0800db74 	.word	0x0800db74
 80094fc:	20000028 	.word	0x20000028
 8009500:	0800db78 	.word	0x0800db78
 8009504:	0800db84 	.word	0x0800db84
 8009508:	200002b4 	.word	0x200002b4
 800950c:	0800db88 	.word	0x0800db88
 8009510:	0800db94 	.word	0x0800db94
 8009514:	20000008 	.word	0x20000008
 8009518:	0800db98 	.word	0x0800db98
 800951c:	0800dba4 	.word	0x0800dba4
 8009520:	2000000c 	.word	0x2000000c
 8009524:	0800dba8 	.word	0x0800dba8
 8009528:	0800dbb4 	.word	0x0800dbb4
 800952c:	200002ac 	.word	0x200002ac
 8009530:	0800dbb8 	.word	0x0800dbb8
 8009534:	0800dbc4 	.word	0x0800dbc4
 8009538:	20000010 	.word	0x20000010
 800953c:	0800dbc8 	.word	0x0800dbc8
 8009540:	0800dbd4 	.word	0x0800dbd4
 8009544:	20000014 	.word	0x20000014
 8009548:	0800dbd8 	.word	0x0800dbd8
	else if (strcmp(opCode, "DVB") == 0){ KD_V_buck  = (float)operand/100; sprintf(TxRx_data,"DVB->ACK"); } // Derivative   Current Buck  : DVB$$$$$
 800954c:	49b5      	ldr	r1, [pc, #724]	; (8009824 <executeOperation+0x660>)
 800954e:	48b6      	ldr	r0, [pc, #728]	; (8009828 <executeOperation+0x664>)
 8009550:	f7f6 fe46 	bl	80001e0 <strcmp>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d114      	bne.n	8009584 <executeOperation+0x3c0>
 800955a:	4bb4      	ldr	r3, [pc, #720]	; (800982c <executeOperation+0x668>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009566:	eddf 6ab2 	vldr	s13, [pc, #712]	; 8009830 <executeOperation+0x66c>
 800956a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800956e:	4bb1      	ldr	r3, [pc, #708]	; (8009834 <executeOperation+0x670>)
 8009570:	edc3 7a00 	vstr	s15, [r3]
 8009574:	4ab0      	ldr	r2, [pc, #704]	; (8009838 <executeOperation+0x674>)
 8009576:	4bb1      	ldr	r3, [pc, #708]	; (800983c <executeOperation+0x678>)
 8009578:	cb03      	ldmia	r3!, {r0, r1}
 800957a:	6010      	str	r0, [r2, #0]
 800957c:	6051      	str	r1, [r2, #4]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	7213      	strb	r3, [r2, #8]
 8009582:	e250      	b.n	8009a26 <executeOperation+0x862>


	else if (strcmp(opCode, "GTS") == 0){sprintf(TxRx_data,"GTS->ACK");goToSleepFlag = 1;}   // Go To Sleep
 8009584:	49ae      	ldr	r1, [pc, #696]	; (8009840 <executeOperation+0x67c>)
 8009586:	48a8      	ldr	r0, [pc, #672]	; (8009828 <executeOperation+0x664>)
 8009588:	f7f6 fe2a 	bl	80001e0 <strcmp>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <executeOperation+0x3e4>
 8009592:	4aa9      	ldr	r2, [pc, #676]	; (8009838 <executeOperation+0x674>)
 8009594:	4bab      	ldr	r3, [pc, #684]	; (8009844 <executeOperation+0x680>)
 8009596:	cb03      	ldmia	r3!, {r0, r1}
 8009598:	6010      	str	r0, [r2, #0]
 800959a:	6051      	str	r1, [r2, #4]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	7213      	strb	r3, [r2, #8]
 80095a0:	4ba9      	ldr	r3, [pc, #676]	; (8009848 <executeOperation+0x684>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	e23e      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "BCB") == 0){sprintf(TxRx_data,"BCB->ACK");initialisePIDController(); chargerEnable = 1; balancingComplete = 0;}   // Begin Charging Battery
 80095a8:	49a8      	ldr	r1, [pc, #672]	; (800984c <executeOperation+0x688>)
 80095aa:	489f      	ldr	r0, [pc, #636]	; (8009828 <executeOperation+0x664>)
 80095ac:	f7f6 fe18 	bl	80001e0 <strcmp>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10f      	bne.n	80095d6 <executeOperation+0x412>
 80095b6:	4aa0      	ldr	r2, [pc, #640]	; (8009838 <executeOperation+0x674>)
 80095b8:	4ba5      	ldr	r3, [pc, #660]	; (8009850 <executeOperation+0x68c>)
 80095ba:	cb03      	ldmia	r3!, {r0, r1}
 80095bc:	6010      	str	r0, [r2, #0]
 80095be:	6051      	str	r1, [r2, #4]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	7213      	strb	r3, [r2, #8]
 80095c4:	f7ff fd92 	bl	80090ec <initialisePIDController>
 80095c8:	4ba2      	ldr	r3, [pc, #648]	; (8009854 <executeOperation+0x690>)
 80095ca:	2201      	movs	r2, #1
 80095cc:	701a      	strb	r2, [r3, #0]
 80095ce:	4ba2      	ldr	r3, [pc, #648]	; (8009858 <executeOperation+0x694>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	701a      	strb	r2, [r3, #0]
 80095d4:	e227      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "SCB") == 0){sprintf(TxRx_data,"SCB->ACK");chargerEnable = 0;} // Stop Charging Battery
 80095d6:	49a1      	ldr	r1, [pc, #644]	; (800985c <executeOperation+0x698>)
 80095d8:	4893      	ldr	r0, [pc, #588]	; (8009828 <executeOperation+0x664>)
 80095da:	f7f6 fe01 	bl	80001e0 <strcmp>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <executeOperation+0x436>
 80095e4:	4a94      	ldr	r2, [pc, #592]	; (8009838 <executeOperation+0x674>)
 80095e6:	4b9e      	ldr	r3, [pc, #632]	; (8009860 <executeOperation+0x69c>)
 80095e8:	cb03      	ldmia	r3!, {r0, r1}
 80095ea:	6010      	str	r0, [r2, #0]
 80095ec:	6051      	str	r1, [r2, #4]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	7213      	strb	r3, [r2, #8]
 80095f2:	4b98      	ldr	r3, [pc, #608]	; (8009854 <executeOperation+0x690>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	e215      	b.n	8009a26 <executeOperation+0x862>

	else if (strcmp(opCode, "TC1") == 0){sprintf(TxRx_data,"%lu K",(uint32_t)(temp1+273.15f));} // Temperature Charger 1 : TC1?????
 80095fa:	499a      	ldr	r1, [pc, #616]	; (8009864 <executeOperation+0x6a0>)
 80095fc:	488a      	ldr	r0, [pc, #552]	; (8009828 <executeOperation+0x664>)
 80095fe:	f7f6 fdef 	bl	80001e0 <strcmp>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10f      	bne.n	8009628 <executeOperation+0x464>
 8009608:	4b97      	ldr	r3, [pc, #604]	; (8009868 <executeOperation+0x6a4>)
 800960a:	edd3 7a00 	vldr	s15, [r3]
 800960e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800986c <executeOperation+0x6a8>
 8009612:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800961a:	ee17 2a90 	vmov	r2, s15
 800961e:	4994      	ldr	r1, [pc, #592]	; (8009870 <executeOperation+0x6ac>)
 8009620:	4885      	ldr	r0, [pc, #532]	; (8009838 <executeOperation+0x674>)
 8009622:	f002 faa1 	bl	800bb68 <siprintf>
 8009626:	e1fe      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "TC2") == 0){sprintf(TxRx_data,"%lu K",(uint32_t)(temp2+273.15f));} // Temperature Charger 2 : TC2?????
 8009628:	4992      	ldr	r1, [pc, #584]	; (8009874 <executeOperation+0x6b0>)
 800962a:	487f      	ldr	r0, [pc, #508]	; (8009828 <executeOperation+0x664>)
 800962c:	f7f6 fdd8 	bl	80001e0 <strcmp>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10f      	bne.n	8009656 <executeOperation+0x492>
 8009636:	4b90      	ldr	r3, [pc, #576]	; (8009878 <executeOperation+0x6b4>)
 8009638:	edd3 7a00 	vldr	s15, [r3]
 800963c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800986c <executeOperation+0x6a8>
 8009640:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009648:	ee17 2a90 	vmov	r2, s15
 800964c:	4988      	ldr	r1, [pc, #544]	; (8009870 <executeOperation+0x6ac>)
 800964e:	487a      	ldr	r0, [pc, #488]	; (8009838 <executeOperation+0x674>)
 8009650:	f002 fa8a 	bl	800bb68 <siprintf>
 8009654:	e1e7      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "TB1") == 0){sprintf(TxRx_data,"%lu K",(uint32_t)(temp3+273.15f));} // Temperature Battery 1 : TB1?????
 8009656:	4989      	ldr	r1, [pc, #548]	; (800987c <executeOperation+0x6b8>)
 8009658:	4873      	ldr	r0, [pc, #460]	; (8009828 <executeOperation+0x664>)
 800965a:	f7f6 fdc1 	bl	80001e0 <strcmp>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10f      	bne.n	8009684 <executeOperation+0x4c0>
 8009664:	4b86      	ldr	r3, [pc, #536]	; (8009880 <executeOperation+0x6bc>)
 8009666:	edd3 7a00 	vldr	s15, [r3]
 800966a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800986c <executeOperation+0x6a8>
 800966e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009676:	ee17 2a90 	vmov	r2, s15
 800967a:	497d      	ldr	r1, [pc, #500]	; (8009870 <executeOperation+0x6ac>)
 800967c:	486e      	ldr	r0, [pc, #440]	; (8009838 <executeOperation+0x674>)
 800967e:	f002 fa73 	bl	800bb68 <siprintf>
 8009682:	e1d0      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "TB2") == 0){sprintf(TxRx_data,"%lu K",(uint32_t)(temp4+273.15f));} // Temperature Battery 2 : TB2?????
 8009684:	497f      	ldr	r1, [pc, #508]	; (8009884 <executeOperation+0x6c0>)
 8009686:	4868      	ldr	r0, [pc, #416]	; (8009828 <executeOperation+0x664>)
 8009688:	f7f6 fdaa 	bl	80001e0 <strcmp>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10f      	bne.n	80096b2 <executeOperation+0x4ee>
 8009692:	4b7d      	ldr	r3, [pc, #500]	; (8009888 <executeOperation+0x6c4>)
 8009694:	edd3 7a00 	vldr	s15, [r3]
 8009698:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800986c <executeOperation+0x6a8>
 800969c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096a4:	ee17 2a90 	vmov	r2, s15
 80096a8:	4971      	ldr	r1, [pc, #452]	; (8009870 <executeOperation+0x6ac>)
 80096aa:	4863      	ldr	r0, [pc, #396]	; (8009838 <executeOperation+0x674>)
 80096ac:	f002 fa5c 	bl	800bb68 <siprintf>
 80096b0:	e1b9      	b.n	8009a26 <executeOperation+0x862>

	else if (strcmp(opCode, "VC1") == 0){sprintf(TxRx_data,"%lu mV",(uint32_t)((vCell1)*1000));} // Voltage Cell 1: VC1?????
 80096b2:	4976      	ldr	r1, [pc, #472]	; (800988c <executeOperation+0x6c8>)
 80096b4:	485c      	ldr	r0, [pc, #368]	; (8009828 <executeOperation+0x664>)
 80096b6:	f7f6 fd93 	bl	80001e0 <strcmp>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10f      	bne.n	80096e0 <executeOperation+0x51c>
 80096c0:	4b73      	ldr	r3, [pc, #460]	; (8009890 <executeOperation+0x6cc>)
 80096c2:	edd3 7a00 	vldr	s15, [r3]
 80096c6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009894 <executeOperation+0x6d0>
 80096ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096d2:	ee17 2a90 	vmov	r2, s15
 80096d6:	4970      	ldr	r1, [pc, #448]	; (8009898 <executeOperation+0x6d4>)
 80096d8:	4857      	ldr	r0, [pc, #348]	; (8009838 <executeOperation+0x674>)
 80096da:	f002 fa45 	bl	800bb68 <siprintf>
 80096de:	e1a2      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "VC2") == 0){sprintf(TxRx_data,"%lu mV",(uint32_t)((vCell2)*1000));} // Voltage Cell 2: VC2?????
 80096e0:	496e      	ldr	r1, [pc, #440]	; (800989c <executeOperation+0x6d8>)
 80096e2:	4851      	ldr	r0, [pc, #324]	; (8009828 <executeOperation+0x664>)
 80096e4:	f7f6 fd7c 	bl	80001e0 <strcmp>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10f      	bne.n	800970e <executeOperation+0x54a>
 80096ee:	4b6c      	ldr	r3, [pc, #432]	; (80098a0 <executeOperation+0x6dc>)
 80096f0:	edd3 7a00 	vldr	s15, [r3]
 80096f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009894 <executeOperation+0x6d0>
 80096f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009700:	ee17 2a90 	vmov	r2, s15
 8009704:	4964      	ldr	r1, [pc, #400]	; (8009898 <executeOperation+0x6d4>)
 8009706:	484c      	ldr	r0, [pc, #304]	; (8009838 <executeOperation+0x674>)
 8009708:	f002 fa2e 	bl	800bb68 <siprintf>
 800970c:	e18b      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "VC3") == 0){sprintf(TxRx_data,"%lu mV",(uint32_t)((vCell3)*1000));} // Voltage Cell 3: VC3?????
 800970e:	4965      	ldr	r1, [pc, #404]	; (80098a4 <executeOperation+0x6e0>)
 8009710:	4845      	ldr	r0, [pc, #276]	; (8009828 <executeOperation+0x664>)
 8009712:	f7f6 fd65 	bl	80001e0 <strcmp>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10f      	bne.n	800973c <executeOperation+0x578>
 800971c:	4b62      	ldr	r3, [pc, #392]	; (80098a8 <executeOperation+0x6e4>)
 800971e:	edd3 7a00 	vldr	s15, [r3]
 8009722:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8009894 <executeOperation+0x6d0>
 8009726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800972a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800972e:	ee17 2a90 	vmov	r2, s15
 8009732:	4959      	ldr	r1, [pc, #356]	; (8009898 <executeOperation+0x6d4>)
 8009734:	4840      	ldr	r0, [pc, #256]	; (8009838 <executeOperation+0x674>)
 8009736:	f002 fa17 	bl	800bb68 <siprintf>
 800973a:	e174      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "VC4") == 0){sprintf(TxRx_data,"%lu mV",(uint32_t)((vCell4)*1000));} // Voltage Cell 4: VC4?????
 800973c:	495b      	ldr	r1, [pc, #364]	; (80098ac <executeOperation+0x6e8>)
 800973e:	483a      	ldr	r0, [pc, #232]	; (8009828 <executeOperation+0x664>)
 8009740:	f7f6 fd4e 	bl	80001e0 <strcmp>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10f      	bne.n	800976a <executeOperation+0x5a6>
 800974a:	4b59      	ldr	r3, [pc, #356]	; (80098b0 <executeOperation+0x6ec>)
 800974c:	edd3 7a00 	vldr	s15, [r3]
 8009750:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8009894 <executeOperation+0x6d0>
 8009754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800975c:	ee17 2a90 	vmov	r2, s15
 8009760:	494d      	ldr	r1, [pc, #308]	; (8009898 <executeOperation+0x6d4>)
 8009762:	4835      	ldr	r0, [pc, #212]	; (8009838 <executeOperation+0x674>)
 8009764:	f002 fa00 	bl	800bb68 <siprintf>
 8009768:	e15d      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "VC5") == 0){sprintf(TxRx_data,"%lu mV",(uint32_t)((vCell5)*1000));} // Voltage Cell 5: VC5?????
 800976a:	4952      	ldr	r1, [pc, #328]	; (80098b4 <executeOperation+0x6f0>)
 800976c:	482e      	ldr	r0, [pc, #184]	; (8009828 <executeOperation+0x664>)
 800976e:	f7f6 fd37 	bl	80001e0 <strcmp>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10f      	bne.n	8009798 <executeOperation+0x5d4>
 8009778:	4b4f      	ldr	r3, [pc, #316]	; (80098b8 <executeOperation+0x6f4>)
 800977a:	edd3 7a00 	vldr	s15, [r3]
 800977e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8009894 <executeOperation+0x6d0>
 8009782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800978a:	ee17 2a90 	vmov	r2, s15
 800978e:	4942      	ldr	r1, [pc, #264]	; (8009898 <executeOperation+0x6d4>)
 8009790:	4829      	ldr	r0, [pc, #164]	; (8009838 <executeOperation+0x674>)
 8009792:	f002 f9e9 	bl	800bb68 <siprintf>
 8009796:	e146      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "VC6") == 0){sprintf(TxRx_data,"%lu mV",(uint32_t)((vCell6)*1000));} // Voltage Cell 6: VC6?????
 8009798:	4948      	ldr	r1, [pc, #288]	; (80098bc <executeOperation+0x6f8>)
 800979a:	4823      	ldr	r0, [pc, #140]	; (8009828 <executeOperation+0x664>)
 800979c:	f7f6 fd20 	bl	80001e0 <strcmp>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10f      	bne.n	80097c6 <executeOperation+0x602>
 80097a6:	4b46      	ldr	r3, [pc, #280]	; (80098c0 <executeOperation+0x6fc>)
 80097a8:	edd3 7a00 	vldr	s15, [r3]
 80097ac:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8009894 <executeOperation+0x6d0>
 80097b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b8:	ee17 2a90 	vmov	r2, s15
 80097bc:	4936      	ldr	r1, [pc, #216]	; (8009898 <executeOperation+0x6d4>)
 80097be:	481e      	ldr	r0, [pc, #120]	; (8009838 <executeOperation+0x674>)
 80097c0:	f002 f9d2 	bl	800bb68 <siprintf>
 80097c4:	e12f      	b.n	8009a26 <executeOperation+0x862>

	else if (strcmp(opCode, "BTV") == 0){sprintf(TxRx_data,"%lu mV",(uint32_t)(VC6*1000));}      // Battery Terminal Voltage : BTV?????
 80097c6:	493f      	ldr	r1, [pc, #252]	; (80098c4 <executeOperation+0x700>)
 80097c8:	4817      	ldr	r0, [pc, #92]	; (8009828 <executeOperation+0x664>)
 80097ca:	f7f6 fd09 	bl	80001e0 <strcmp>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10f      	bne.n	80097f4 <executeOperation+0x630>
 80097d4:	4b3c      	ldr	r3, [pc, #240]	; (80098c8 <executeOperation+0x704>)
 80097d6:	edd3 7a00 	vldr	s15, [r3]
 80097da:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8009894 <executeOperation+0x6d0>
 80097de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e6:	ee17 2a90 	vmov	r2, s15
 80097ea:	492b      	ldr	r1, [pc, #172]	; (8009898 <executeOperation+0x6d4>)
 80097ec:	4812      	ldr	r0, [pc, #72]	; (8009838 <executeOperation+0x674>)
 80097ee:	f002 f9bb 	bl	800bb68 <siprintf>
 80097f2:	e118      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "BCC") == 0){sprintf(TxRx_data,"%lu mA",(uint32_t)(IOutChg*1000));}  // Battery Charging Current : BCC?????
 80097f4:	4935      	ldr	r1, [pc, #212]	; (80098cc <executeOperation+0x708>)
 80097f6:	480c      	ldr	r0, [pc, #48]	; (8009828 <executeOperation+0x664>)
 80097f8:	f7f6 fcf2 	bl	80001e0 <strcmp>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d16a      	bne.n	80098d8 <executeOperation+0x714>
 8009802:	4b33      	ldr	r3, [pc, #204]	; (80098d0 <executeOperation+0x70c>)
 8009804:	edd3 7a00 	vldr	s15, [r3]
 8009808:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009894 <executeOperation+0x6d0>
 800980c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009814:	ee17 2a90 	vmov	r2, s15
 8009818:	492e      	ldr	r1, [pc, #184]	; (80098d4 <executeOperation+0x710>)
 800981a:	4807      	ldr	r0, [pc, #28]	; (8009838 <executeOperation+0x674>)
 800981c:	f002 f9a4 	bl	800bb68 <siprintf>
 8009820:	e101      	b.n	8009a26 <executeOperation+0x862>
 8009822:	bf00      	nop
 8009824:	0800dbe4 	.word	0x0800dbe4
 8009828:	20002128 	.word	0x20002128
 800982c:	200002c0 	.word	0x200002c0
 8009830:	42c80000 	.word	0x42c80000
 8009834:	20000018 	.word	0x20000018
 8009838:	200012e0 	.word	0x200012e0
 800983c:	0800dbe8 	.word	0x0800dbe8
 8009840:	0800dbf4 	.word	0x0800dbf4
 8009844:	0800dbf8 	.word	0x0800dbf8
 8009848:	20000311 	.word	0x20000311
 800984c:	0800dc04 	.word	0x0800dc04
 8009850:	0800dc08 	.word	0x0800dc08
 8009854:	2000030d 	.word	0x2000030d
 8009858:	2000030e 	.word	0x2000030e
 800985c:	0800dc14 	.word	0x0800dc14
 8009860:	0800dc18 	.word	0x0800dc18
 8009864:	0800dc24 	.word	0x0800dc24
 8009868:	20000358 	.word	0x20000358
 800986c:	43889333 	.word	0x43889333
 8009870:	0800dc28 	.word	0x0800dc28
 8009874:	0800dc30 	.word	0x0800dc30
 8009878:	2000035c 	.word	0x2000035c
 800987c:	0800dc34 	.word	0x0800dc34
 8009880:	20000360 	.word	0x20000360
 8009884:	0800dc38 	.word	0x0800dc38
 8009888:	20000364 	.word	0x20000364
 800988c:	0800dc3c 	.word	0x0800dc3c
 8009890:	200003d8 	.word	0x200003d8
 8009894:	447a0000 	.word	0x447a0000
 8009898:	0800dc40 	.word	0x0800dc40
 800989c:	0800dc48 	.word	0x0800dc48
 80098a0:	200003dc 	.word	0x200003dc
 80098a4:	0800dc4c 	.word	0x0800dc4c
 80098a8:	200003e0 	.word	0x200003e0
 80098ac:	0800dc50 	.word	0x0800dc50
 80098b0:	200003e4 	.word	0x200003e4
 80098b4:	0800dc54 	.word	0x0800dc54
 80098b8:	200003e8 	.word	0x200003e8
 80098bc:	0800dc58 	.word	0x0800dc58
 80098c0:	200003ec 	.word	0x200003ec
 80098c4:	0800dc5c 	.word	0x0800dc5c
 80098c8:	200003d4 	.word	0x200003d4
 80098cc:	0800dc60 	.word	0x0800dc60
 80098d0:	200003f4 	.word	0x200003f4
 80098d4:	0800dc64 	.word	0x0800dc64
	else if (strcmp(opCode, "BDC") == 0){sprintf(TxRx_data,"%lu mA",(uint32_t)(IOutDchg*1000));} // Battery Discharging Current : BDC?????
 80098d8:	4969      	ldr	r1, [pc, #420]	; (8009a80 <executeOperation+0x8bc>)
 80098da:	486a      	ldr	r0, [pc, #424]	; (8009a84 <executeOperation+0x8c0>)
 80098dc:	f7f6 fc80 	bl	80001e0 <strcmp>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10f      	bne.n	8009906 <executeOperation+0x742>
 80098e6:	4b68      	ldr	r3, [pc, #416]	; (8009a88 <executeOperation+0x8c4>)
 80098e8:	edd3 7a00 	vldr	s15, [r3]
 80098ec:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009a8c <executeOperation+0x8c8>
 80098f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098f8:	ee17 2a90 	vmov	r2, s15
 80098fc:	4964      	ldr	r1, [pc, #400]	; (8009a90 <executeOperation+0x8cc>)
 80098fe:	4865      	ldr	r0, [pc, #404]	; (8009a94 <executeOperation+0x8d0>)
 8009900:	f002 f932 	bl	800bb68 <siprintf>
 8009904:	e08f      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "CIV") == 0){sprintf(TxRx_data,"%lu mV",(uint32_t)(vIn*1000));}      // Charger Input Voltage : CIV?????
 8009906:	4964      	ldr	r1, [pc, #400]	; (8009a98 <executeOperation+0x8d4>)
 8009908:	485e      	ldr	r0, [pc, #376]	; (8009a84 <executeOperation+0x8c0>)
 800990a:	f7f6 fc69 	bl	80001e0 <strcmp>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10f      	bne.n	8009934 <executeOperation+0x770>
 8009914:	4b61      	ldr	r3, [pc, #388]	; (8009a9c <executeOperation+0x8d8>)
 8009916:	edd3 7a00 	vldr	s15, [r3]
 800991a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8009a8c <executeOperation+0x8c8>
 800991e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009926:	ee17 2a90 	vmov	r2, s15
 800992a:	495d      	ldr	r1, [pc, #372]	; (8009aa0 <executeOperation+0x8dc>)
 800992c:	4859      	ldr	r0, [pc, #356]	; (8009a94 <executeOperation+0x8d0>)
 800992e:	f002 f91b 	bl	800bb68 <siprintf>
 8009932:	e078      	b.n	8009a26 <executeOperation+0x862>

	else if (strcmp(opCode, "RBC") == 0){sprintf(TxRx_data,"%lumAh",(uint32_t)(batteryCharge));} // Remaining Battery Charge : RBC?????
 8009934:	495b      	ldr	r1, [pc, #364]	; (8009aa4 <executeOperation+0x8e0>)
 8009936:	4853      	ldr	r0, [pc, #332]	; (8009a84 <executeOperation+0x8c0>)
 8009938:	f7f6 fc52 	bl	80001e0 <strcmp>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10d      	bne.n	800995e <executeOperation+0x79a>
 8009942:	4b59      	ldr	r3, [pc, #356]	; (8009aa8 <executeOperation+0x8e4>)
 8009944:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009948:	4618      	mov	r0, r3
 800994a:	4621      	mov	r1, r4
 800994c:	f7f7 f91c 	bl	8000b88 <__aeabi_d2uiz>
 8009950:	4603      	mov	r3, r0
 8009952:	461a      	mov	r2, r3
 8009954:	4955      	ldr	r1, [pc, #340]	; (8009aac <executeOperation+0x8e8>)
 8009956:	484f      	ldr	r0, [pc, #316]	; (8009a94 <executeOperation+0x8d0>)
 8009958:	f002 f906 	bl	800bb68 <siprintf>
 800995c:	e063      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "SBC") == 0){batteryCharge = (float)operand; sprintf(TxRx_data,"SBC->ACK");} // Set Battery Charge: SBCNNNNN
 800995e:	4954      	ldr	r1, [pc, #336]	; (8009ab0 <executeOperation+0x8ec>)
 8009960:	4848      	ldr	r0, [pc, #288]	; (8009a84 <executeOperation+0x8c0>)
 8009962:	f7f6 fc3d 	bl	80001e0 <strcmp>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d116      	bne.n	800999a <executeOperation+0x7d6>
 800996c:	4b51      	ldr	r3, [pc, #324]	; (8009ab4 <executeOperation+0x8f0>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	ee07 3a90 	vmov	s15, r3
 8009974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009978:	ee17 0a90 	vmov	r0, s15
 800997c:	f7f6 fdfc 	bl	8000578 <__aeabi_f2d>
 8009980:	4603      	mov	r3, r0
 8009982:	460c      	mov	r4, r1
 8009984:	4a48      	ldr	r2, [pc, #288]	; (8009aa8 <executeOperation+0x8e4>)
 8009986:	e9c2 3400 	strd	r3, r4, [r2]
 800998a:	4a42      	ldr	r2, [pc, #264]	; (8009a94 <executeOperation+0x8d0>)
 800998c:	4b4a      	ldr	r3, [pc, #296]	; (8009ab8 <executeOperation+0x8f4>)
 800998e:	cb03      	ldmia	r3!, {r0, r1}
 8009990:	6010      	str	r0, [r2, #0]
 8009992:	6051      	str	r1, [r2, #4]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	7213      	strb	r3, [r2, #8]
 8009998:	e045      	b.n	8009a26 <executeOperation+0x862>

	else if (strcmp(opCode, "REC") == 0){sprintf(TxRx_data,"%lu",errorCode);} // Return Error Code : REC?????
 800999a:	4948      	ldr	r1, [pc, #288]	; (8009abc <executeOperation+0x8f8>)
 800999c:	4839      	ldr	r0, [pc, #228]	; (8009a84 <executeOperation+0x8c0>)
 800999e:	f7f6 fc1f 	bl	80001e0 <strcmp>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d107      	bne.n	80099b8 <executeOperation+0x7f4>
 80099a8:	4b45      	ldr	r3, [pc, #276]	; (8009ac0 <executeOperation+0x8fc>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	4945      	ldr	r1, [pc, #276]	; (8009ac4 <executeOperation+0x900>)
 80099b0:	4838      	ldr	r0, [pc, #224]	; (8009a94 <executeOperation+0x8d0>)
 80099b2:	f002 f8d9 	bl	800bb68 <siprintf>
 80099b6:	e036      	b.n	8009a26 <executeOperation+0x862>
	else if (strcmp(opCode, "CEC") == 0)
 80099b8:	4943      	ldr	r1, [pc, #268]	; (8009ac8 <executeOperation+0x904>)
 80099ba:	4832      	ldr	r0, [pc, #200]	; (8009a84 <executeOperation+0x8c0>)
 80099bc:	f7f6 fc10 	bl	80001e0 <strcmp>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d127      	bne.n	8009a16 <executeOperation+0x852>
	{
		sprintf(TxRx_data,"CEC->ACK");
 80099c6:	4a33      	ldr	r2, [pc, #204]	; (8009a94 <executeOperation+0x8d0>)
 80099c8:	4b40      	ldr	r3, [pc, #256]	; (8009acc <executeOperation+0x908>)
 80099ca:	cb03      	ldmia	r3!, {r0, r1}
 80099cc:	6010      	str	r0, [r2, #0]
 80099ce:	6051      	str	r1, [r2, #4]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	7213      	strb	r3, [r2, #8]
		errorCode = 0;
 80099d4:	4b3a      	ldr	r3, [pc, #232]	; (8009ac0 <executeOperation+0x8fc>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	601a      	str	r2, [r3, #0]
		battOverTempTrip  = 0;
 80099da:	4b3d      	ldr	r3, [pc, #244]	; (8009ad0 <executeOperation+0x90c>)
 80099dc:	2200      	movs	r2, #0
 80099de:	701a      	strb	r2, [r3, #0]
		battUnderTempTrip = 0;
 80099e0:	4b3c      	ldr	r3, [pc, #240]	; (8009ad4 <executeOperation+0x910>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	701a      	strb	r2, [r3, #0]
		chgrOverTempTrip = 0;
 80099e6:	4b3c      	ldr	r3, [pc, #240]	; (8009ad8 <executeOperation+0x914>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	701a      	strb	r2, [r3, #0]
		chgrUnderTempTrip = 0;
 80099ec:	4b3b      	ldr	r3, [pc, #236]	; (8009adc <executeOperation+0x918>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	701a      	strb	r2, [r3, #0]
		battOverVoltTrip = 0;
 80099f2:	4b3b      	ldr	r3, [pc, #236]	; (8009ae0 <executeOperation+0x91c>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	701a      	strb	r2, [r3, #0]
		battUnderVoltTrip = 0;
 80099f8:	4b3a      	ldr	r3, [pc, #232]	; (8009ae4 <executeOperation+0x920>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
		battOverCurrTrip = 0;
 80099fe:	4b3a      	ldr	r3, [pc, #232]	; (8009ae8 <executeOperation+0x924>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]
		battRegenCurrTrip = 0;
 8009a04:	4b39      	ldr	r3, [pc, #228]	; (8009aec <executeOperation+0x928>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CB_En_GPIO_Port,CB_En_Pin, GPIO_PIN_SET); //disconnect load
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	4838      	ldr	r0, [pc, #224]	; (8009af0 <executeOperation+0x92c>)
 8009a10:	f7f9 ffb6 	bl	8003980 <HAL_GPIO_WritePin>
 8009a14:	e007      	b.n	8009a26 <executeOperation+0x862>
	}

	else {sprintf(TxRx_data,"->ERROR");chargerEnable = 0;}
 8009a16:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <executeOperation+0x8d0>)
 8009a18:	4b36      	ldr	r3, [pc, #216]	; (8009af4 <executeOperation+0x930>)
 8009a1a:	cb03      	ldmia	r3!, {r0, r1}
 8009a1c:	6010      	str	r0, [r2, #0]
 8009a1e:	6051      	str	r1, [r2, #4]
 8009a20:	4b35      	ldr	r3, [pc, #212]	; (8009af8 <executeOperation+0x934>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart3,TxRx_data, strlen(TxRx_data), HAL_MAX_DELAY);
 8009a26:	481b      	ldr	r0, [pc, #108]	; (8009a94 <executeOperation+0x8d0>)
 8009a28:	f7f6 fbe4 	bl	80001f4 <strlen>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	f04f 33ff 	mov.w	r3, #4294967295
 8009a34:	4917      	ldr	r1, [pc, #92]	; (8009a94 <executeOperation+0x8d0>)
 8009a36:	4831      	ldr	r0, [pc, #196]	; (8009afc <executeOperation+0x938>)
 8009a38:	f7fc fdd5 	bl	80065e6 <HAL_UART_Transmit>

	//checks whether the command was received from CAN or UART, if from can only then enter IF statement, otherwise the program freezes as it tries to send data
	//over a disconnected CANbus forever
	if(operationFromCan == 1)
 8009a3c:	4b30      	ldr	r3, [pc, #192]	; (8009b00 <executeOperation+0x93c>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d019      	beq.n	8009a78 <executeOperation+0x8b4>
	{
		//transfer data received from UART via DMA to CAN buffer
		for (uint8_t i = 0; i < 8;i++)
 8009a44:	2300      	movs	r3, #0
 8009a46:	71fb      	strb	r3, [r7, #7]
 8009a48:	e00c      	b.n	8009a64 <executeOperation+0x8a0>
		{
			hcan.pTxMsg->Data[i] = TxRx_data[i];
 8009a4a:	79f9      	ldrb	r1, [r7, #7]
 8009a4c:	4b2d      	ldr	r3, [pc, #180]	; (8009b04 <executeOperation+0x940>)
 8009a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	4810      	ldr	r0, [pc, #64]	; (8009a94 <executeOperation+0x8d0>)
 8009a54:	5c41      	ldrb	r1, [r0, r1]
 8009a56:	b2c9      	uxtb	r1, r1
 8009a58:	4413      	add	r3, r2
 8009a5a:	460a      	mov	r2, r1
 8009a5c:	751a      	strb	r2, [r3, #20]
		for (uint8_t i = 0; i < 8;i++)
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	3301      	adds	r3, #1
 8009a62:	71fb      	strb	r3, [r7, #7]
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	2b07      	cmp	r3, #7
 8009a68:	d9ef      	bls.n	8009a4a <executeOperation+0x886>
		}
		HAL_CAN_Transmit(&hcan, 10);
 8009a6a:	210a      	movs	r1, #10
 8009a6c:	4825      	ldr	r0, [pc, #148]	; (8009b04 <executeOperation+0x940>)
 8009a6e:	f7f8 fd33 	bl	80024d8 <HAL_CAN_Transmit>
		operationFromCan = 0; //reset
 8009a72:	4b23      	ldr	r3, [pc, #140]	; (8009b00 <executeOperation+0x93c>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	701a      	strb	r2, [r3, #0]
	}

}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd90      	pop	{r4, r7, pc}
 8009a80:	0800dc6c 	.word	0x0800dc6c
 8009a84:	20002128 	.word	0x20002128
 8009a88:	200003f8 	.word	0x200003f8
 8009a8c:	447a0000 	.word	0x447a0000
 8009a90:	0800dc64 	.word	0x0800dc64
 8009a94:	200012e0 	.word	0x200012e0
 8009a98:	0800dc70 	.word	0x0800dc70
 8009a9c:	200003f0 	.word	0x200003f0
 8009aa0:	0800dc40 	.word	0x0800dc40
 8009aa4:	0800dc74 	.word	0x0800dc74
 8009aa8:	20000030 	.word	0x20000030
 8009aac:	0800dc78 	.word	0x0800dc78
 8009ab0:	0800dc80 	.word	0x0800dc80
 8009ab4:	200002c0 	.word	0x200002c0
 8009ab8:	0800dc84 	.word	0x0800dc84
 8009abc:	0800dc90 	.word	0x0800dc90
 8009ac0:	200003fc 	.word	0x200003fc
 8009ac4:	0800dc94 	.word	0x0800dc94
 8009ac8:	0800dc98 	.word	0x0800dc98
 8009acc:	0800dc9c 	.word	0x0800dc9c
 8009ad0:	20000317 	.word	0x20000317
 8009ad4:	20000318 	.word	0x20000318
 8009ad8:	20000319 	.word	0x20000319
 8009adc:	2000031a 	.word	0x2000031a
 8009ae0:	20000315 	.word	0x20000315
 8009ae4:	20000316 	.word	0x20000316
 8009ae8:	20000314 	.word	0x20000314
 8009aec:	2000031b 	.word	0x2000031b
 8009af0:	48000400 	.word	0x48000400
 8009af4:	0800dca8 	.word	0x0800dca8
 8009af8:	2000030d 	.word	0x2000030d
 8009afc:	200004a8 	.word	0x200004a8
 8009b00:	20000313 	.word	0x20000313
 8009b04:	2000056c 	.word	0x2000056c

08009b08 <applyPID>:


//**********************************************************************************************************************************************************
void applyPID() //calculates and applies cascaded PID control algorithm to MOSFETs of buck-boost converter
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
	//change PIDs according to whether we are boosting or bucking
	if (boostEnable == 1)
 8009b0c:	4ba8      	ldr	r3, [pc, #672]	; (8009db0 <applyPID+0x2a8>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d018      	beq.n	8009b46 <applyPID+0x3e>
	{
	 kP_I = KP_I_boost;
 8009b14:	4ba7      	ldr	r3, [pc, #668]	; (8009db4 <applyPID+0x2ac>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4aa7      	ldr	r2, [pc, #668]	; (8009db8 <applyPID+0x2b0>)
 8009b1a:	6013      	str	r3, [r2, #0]
	 kI_I = KI_I_boost;
 8009b1c:	4ba7      	ldr	r3, [pc, #668]	; (8009dbc <applyPID+0x2b4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4aa7      	ldr	r2, [pc, #668]	; (8009dc0 <applyPID+0x2b8>)
 8009b22:	6013      	str	r3, [r2, #0]
	 kD_I = KD_I_boost;
 8009b24:	4ba7      	ldr	r3, [pc, #668]	; (8009dc4 <applyPID+0x2bc>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4aa7      	ldr	r2, [pc, #668]	; (8009dc8 <applyPID+0x2c0>)
 8009b2a:	6013      	str	r3, [r2, #0]

     kP_V = KP_V_boost;
 8009b2c:	4ba7      	ldr	r3, [pc, #668]	; (8009dcc <applyPID+0x2c4>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4aa7      	ldr	r2, [pc, #668]	; (8009dd0 <applyPID+0x2c8>)
 8009b32:	6013      	str	r3, [r2, #0]
	 kI_V = KI_V_boost;
 8009b34:	4ba7      	ldr	r3, [pc, #668]	; (8009dd4 <applyPID+0x2cc>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4aa7      	ldr	r2, [pc, #668]	; (8009dd8 <applyPID+0x2d0>)
 8009b3a:	6013      	str	r3, [r2, #0]
	 kD_V = KD_V_boost;
 8009b3c:	4ba7      	ldr	r3, [pc, #668]	; (8009ddc <applyPID+0x2d4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4aa7      	ldr	r2, [pc, #668]	; (8009de0 <applyPID+0x2d8>)
 8009b42:	6013      	str	r3, [r2, #0]
 8009b44:	e017      	b.n	8009b76 <applyPID+0x6e>
	}
	else
	{
	 kP_I = KP_I_buck;
 8009b46:	4ba7      	ldr	r3, [pc, #668]	; (8009de4 <applyPID+0x2dc>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a9b      	ldr	r2, [pc, #620]	; (8009db8 <applyPID+0x2b0>)
 8009b4c:	6013      	str	r3, [r2, #0]
	 kI_I = KI_I_buck;
 8009b4e:	4ba6      	ldr	r3, [pc, #664]	; (8009de8 <applyPID+0x2e0>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a9b      	ldr	r2, [pc, #620]	; (8009dc0 <applyPID+0x2b8>)
 8009b54:	6013      	str	r3, [r2, #0]
	 kD_I = KD_I_buck;
 8009b56:	4ba5      	ldr	r3, [pc, #660]	; (8009dec <applyPID+0x2e4>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a9b      	ldr	r2, [pc, #620]	; (8009dc8 <applyPID+0x2c0>)
 8009b5c:	6013      	str	r3, [r2, #0]

	 kP_V = KP_V_buck;
 8009b5e:	4ba4      	ldr	r3, [pc, #656]	; (8009df0 <applyPID+0x2e8>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a9b      	ldr	r2, [pc, #620]	; (8009dd0 <applyPID+0x2c8>)
 8009b64:	6013      	str	r3, [r2, #0]
	 kI_V = KI_V_buck;
 8009b66:	4ba3      	ldr	r3, [pc, #652]	; (8009df4 <applyPID+0x2ec>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a9b      	ldr	r2, [pc, #620]	; (8009dd8 <applyPID+0x2d0>)
 8009b6c:	6013      	str	r3, [r2, #0]
	 kD_V = KD_V_buck;
 8009b6e:	4ba2      	ldr	r3, [pc, #648]	; (8009df8 <applyPID+0x2f0>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a9b      	ldr	r2, [pc, #620]	; (8009de0 <applyPID+0x2d8>)
 8009b74:	6013      	str	r3, [r2, #0]
	}

	//*******************************************************
	//OUTER VOLTAGE PID LOOP
	//*******************************************************
	presentValue_V = VC6 - VC0;
 8009b76:	4ba1      	ldr	r3, [pc, #644]	; (8009dfc <applyPID+0x2f4>)
 8009b78:	ed93 7a00 	vldr	s14, [r3]
 8009b7c:	4ba0      	ldr	r3, [pc, #640]	; (8009e00 <applyPID+0x2f8>)
 8009b7e:	edd3 7a00 	vldr	s15, [r3]
 8009b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b86:	4b9f      	ldr	r3, [pc, #636]	; (8009e04 <applyPID+0x2fc>)
 8009b88:	edc3 7a00 	vstr	s15, [r3]

	error_V = setpoint_V - presentValue_V;
 8009b8c:	4b9e      	ldr	r3, [pc, #632]	; (8009e08 <applyPID+0x300>)
 8009b8e:	ed93 7a00 	vldr	s14, [r3]
 8009b92:	4b9c      	ldr	r3, [pc, #624]	; (8009e04 <applyPID+0x2fc>)
 8009b94:	edd3 7a00 	vldr	s15, [r3]
 8009b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b9c:	4b9b      	ldr	r3, [pc, #620]	; (8009e0c <applyPID+0x304>)
 8009b9e:	edc3 7a00 	vstr	s15, [r3]

	proportional_V = kP_V * error_V;
 8009ba2:	4b8b      	ldr	r3, [pc, #556]	; (8009dd0 <applyPID+0x2c8>)
 8009ba4:	ed93 7a00 	vldr	s14, [r3]
 8009ba8:	4b98      	ldr	r3, [pc, #608]	; (8009e0c <applyPID+0x304>)
 8009baa:	edd3 7a00 	vldr	s15, [r3]
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	4b97      	ldr	r3, [pc, #604]	; (8009e10 <applyPID+0x308>)
 8009bb4:	edc3 7a00 	vstr	s15, [r3]

	integral_V = integral_V + kI_V * error_V;
 8009bb8:	4b87      	ldr	r3, [pc, #540]	; (8009dd8 <applyPID+0x2d0>)
 8009bba:	ed93 7a00 	vldr	s14, [r3]
 8009bbe:	4b93      	ldr	r3, [pc, #588]	; (8009e0c <applyPID+0x304>)
 8009bc0:	edd3 7a00 	vldr	s15, [r3]
 8009bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bc8:	4b92      	ldr	r3, [pc, #584]	; (8009e14 <applyPID+0x30c>)
 8009bca:	edd3 7a00 	vldr	s15, [r3]
 8009bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bd2:	4b90      	ldr	r3, [pc, #576]	; (8009e14 <applyPID+0x30c>)
 8009bd4:	edc3 7a00 	vstr	s15, [r3]
	if (integral_V > currentLimit){integral_V = currentLimit;}
 8009bd8:	4b8e      	ldr	r3, [pc, #568]	; (8009e14 <applyPID+0x30c>)
 8009bda:	ed93 7a00 	vldr	s14, [r3]
 8009bde:	4b8e      	ldr	r3, [pc, #568]	; (8009e18 <applyPID+0x310>)
 8009be0:	edd3 7a00 	vldr	s15, [r3]
 8009be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bec:	dd04      	ble.n	8009bf8 <applyPID+0xf0>
 8009bee:	4b8a      	ldr	r3, [pc, #552]	; (8009e18 <applyPID+0x310>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a88      	ldr	r2, [pc, #544]	; (8009e14 <applyPID+0x30c>)
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	e014      	b.n	8009c22 <applyPID+0x11a>
	else if (integral_V < -currentLimit){integral_V = -currentLimit;}
 8009bf8:	4b87      	ldr	r3, [pc, #540]	; (8009e18 <applyPID+0x310>)
 8009bfa:	edd3 7a00 	vldr	s15, [r3]
 8009bfe:	eeb1 7a67 	vneg.f32	s14, s15
 8009c02:	4b84      	ldr	r3, [pc, #528]	; (8009e14 <applyPID+0x30c>)
 8009c04:	edd3 7a00 	vldr	s15, [r3]
 8009c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c10:	dd07      	ble.n	8009c22 <applyPID+0x11a>
 8009c12:	4b81      	ldr	r3, [pc, #516]	; (8009e18 <applyPID+0x310>)
 8009c14:	edd3 7a00 	vldr	s15, [r3]
 8009c18:	eef1 7a67 	vneg.f32	s15, s15
 8009c1c:	4b7d      	ldr	r3, [pc, #500]	; (8009e14 <applyPID+0x30c>)
 8009c1e:	edc3 7a00 	vstr	s15, [r3]

	derivative_V = kD_V*(error_V - prevError_V);
 8009c22:	4b7a      	ldr	r3, [pc, #488]	; (8009e0c <applyPID+0x304>)
 8009c24:	ed93 7a00 	vldr	s14, [r3]
 8009c28:	4b7c      	ldr	r3, [pc, #496]	; (8009e1c <applyPID+0x314>)
 8009c2a:	edd3 7a00 	vldr	s15, [r3]
 8009c2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c32:	4b6b      	ldr	r3, [pc, #428]	; (8009de0 <applyPID+0x2d8>)
 8009c34:	edd3 7a00 	vldr	s15, [r3]
 8009c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3c:	4b78      	ldr	r3, [pc, #480]	; (8009e20 <applyPID+0x318>)
 8009c3e:	edc3 7a00 	vstr	s15, [r3]
	prevError_V = error_V;
 8009c42:	4b72      	ldr	r3, [pc, #456]	; (8009e0c <applyPID+0x304>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a75      	ldr	r2, [pc, #468]	; (8009e1c <applyPID+0x314>)
 8009c48:	6013      	str	r3, [r2, #0]

	setpoint_I = proportional_V + integral_V + derivative_V;
 8009c4a:	4b71      	ldr	r3, [pc, #452]	; (8009e10 <applyPID+0x308>)
 8009c4c:	ed93 7a00 	vldr	s14, [r3]
 8009c50:	4b70      	ldr	r3, [pc, #448]	; (8009e14 <applyPID+0x30c>)
 8009c52:	edd3 7a00 	vldr	s15, [r3]
 8009c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c5a:	4b71      	ldr	r3, [pc, #452]	; (8009e20 <applyPID+0x318>)
 8009c5c:	edd3 7a00 	vldr	s15, [r3]
 8009c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c64:	4b6f      	ldr	r3, [pc, #444]	; (8009e24 <applyPID+0x31c>)
 8009c66:	edc3 7a00 	vstr	s15, [r3]
	if (setpoint_I <= 0){setpoint_I = 0;}
 8009c6a:	4b6e      	ldr	r3, [pc, #440]	; (8009e24 <applyPID+0x31c>)
 8009c6c:	edd3 7a00 	vldr	s15, [r3]
 8009c70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c78:	d804      	bhi.n	8009c84 <applyPID+0x17c>
 8009c7a:	4b6a      	ldr	r3, [pc, #424]	; (8009e24 <applyPID+0x31c>)
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	e00e      	b.n	8009ca2 <applyPID+0x19a>
	else if (setpoint_I >= currentLimit){setpoint_I = currentLimit;}
 8009c84:	4b67      	ldr	r3, [pc, #412]	; (8009e24 <applyPID+0x31c>)
 8009c86:	ed93 7a00 	vldr	s14, [r3]
 8009c8a:	4b63      	ldr	r3, [pc, #396]	; (8009e18 <applyPID+0x310>)
 8009c8c:	edd3 7a00 	vldr	s15, [r3]
 8009c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c98:	db03      	blt.n	8009ca2 <applyPID+0x19a>
 8009c9a:	4b5f      	ldr	r3, [pc, #380]	; (8009e18 <applyPID+0x310>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a61      	ldr	r2, [pc, #388]	; (8009e24 <applyPID+0x31c>)
 8009ca0:	6013      	str	r3, [r2, #0]

	setpoint_I = setpoint_I/1000;
 8009ca2:	4b60      	ldr	r3, [pc, #384]	; (8009e24 <applyPID+0x31c>)
 8009ca4:	ed93 7a00 	vldr	s14, [r3]
 8009ca8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e28 <applyPID+0x320>
 8009cac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cb0:	4b5c      	ldr	r3, [pc, #368]	; (8009e24 <applyPID+0x31c>)
 8009cb2:	edc3 7a00 	vstr	s15, [r3]

	//*******************************************************
	//INNER CURRENT PID LOOP
	//*******************************************************
	presentValue_I = IOutChg;
 8009cb6:	4b5d      	ldr	r3, [pc, #372]	; (8009e2c <applyPID+0x324>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a5d      	ldr	r2, [pc, #372]	; (8009e30 <applyPID+0x328>)
 8009cbc:	6013      	str	r3, [r2, #0]

	error_I = setpoint_I - presentValue_I;
 8009cbe:	4b59      	ldr	r3, [pc, #356]	; (8009e24 <applyPID+0x31c>)
 8009cc0:	ed93 7a00 	vldr	s14, [r3]
 8009cc4:	4b5a      	ldr	r3, [pc, #360]	; (8009e30 <applyPID+0x328>)
 8009cc6:	edd3 7a00 	vldr	s15, [r3]
 8009cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cce:	4b59      	ldr	r3, [pc, #356]	; (8009e34 <applyPID+0x32c>)
 8009cd0:	edc3 7a00 	vstr	s15, [r3]

	proportional_I = kP_I * error_I;
 8009cd4:	4b38      	ldr	r3, [pc, #224]	; (8009db8 <applyPID+0x2b0>)
 8009cd6:	ed93 7a00 	vldr	s14, [r3]
 8009cda:	4b56      	ldr	r3, [pc, #344]	; (8009e34 <applyPID+0x32c>)
 8009cdc:	edd3 7a00 	vldr	s15, [r3]
 8009ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce4:	4b54      	ldr	r3, [pc, #336]	; (8009e38 <applyPID+0x330>)
 8009ce6:	edc3 7a00 	vstr	s15, [r3]

	integral_I = integral_I + kI_I * error_I;
 8009cea:	4b35      	ldr	r3, [pc, #212]	; (8009dc0 <applyPID+0x2b8>)
 8009cec:	ed93 7a00 	vldr	s14, [r3]
 8009cf0:	4b50      	ldr	r3, [pc, #320]	; (8009e34 <applyPID+0x32c>)
 8009cf2:	edd3 7a00 	vldr	s15, [r3]
 8009cf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cfa:	4b50      	ldr	r3, [pc, #320]	; (8009e3c <applyPID+0x334>)
 8009cfc:	edd3 7a00 	vldr	s15, [r3]
 8009d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d04:	4b4d      	ldr	r3, [pc, #308]	; (8009e3c <applyPID+0x334>)
 8009d06:	edc3 7a00 	vstr	s15, [r3]
	if (integral_I > integralMax_I){integral_I = integralMax_I;}
 8009d0a:	4b4c      	ldr	r3, [pc, #304]	; (8009e3c <applyPID+0x334>)
 8009d0c:	ed93 7a00 	vldr	s14, [r3]
 8009d10:	4b4b      	ldr	r3, [pc, #300]	; (8009e40 <applyPID+0x338>)
 8009d12:	edd3 7a00 	vldr	s15, [r3]
 8009d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1e:	dd04      	ble.n	8009d2a <applyPID+0x222>
 8009d20:	4b47      	ldr	r3, [pc, #284]	; (8009e40 <applyPID+0x338>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a45      	ldr	r2, [pc, #276]	; (8009e3c <applyPID+0x334>)
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	e00e      	b.n	8009d48 <applyPID+0x240>
	else if (integral_I < integralMin_I){integral_I = integralMin_I;}
 8009d2a:	4b44      	ldr	r3, [pc, #272]	; (8009e3c <applyPID+0x334>)
 8009d2c:	ed93 7a00 	vldr	s14, [r3]
 8009d30:	4b44      	ldr	r3, [pc, #272]	; (8009e44 <applyPID+0x33c>)
 8009d32:	edd3 7a00 	vldr	s15, [r3]
 8009d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3e:	d503      	bpl.n	8009d48 <applyPID+0x240>
 8009d40:	4b40      	ldr	r3, [pc, #256]	; (8009e44 <applyPID+0x33c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a3d      	ldr	r2, [pc, #244]	; (8009e3c <applyPID+0x334>)
 8009d46:	6013      	str	r3, [r2, #0]

	derivative_I = kD_I*(error_I - prevError_I);
 8009d48:	4b3a      	ldr	r3, [pc, #232]	; (8009e34 <applyPID+0x32c>)
 8009d4a:	ed93 7a00 	vldr	s14, [r3]
 8009d4e:	4b3e      	ldr	r3, [pc, #248]	; (8009e48 <applyPID+0x340>)
 8009d50:	edd3 7a00 	vldr	s15, [r3]
 8009d54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d58:	4b1b      	ldr	r3, [pc, #108]	; (8009dc8 <applyPID+0x2c0>)
 8009d5a:	edd3 7a00 	vldr	s15, [r3]
 8009d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d62:	4b3a      	ldr	r3, [pc, #232]	; (8009e4c <applyPID+0x344>)
 8009d64:	edc3 7a00 	vstr	s15, [r3]
	prevError_I = error_I;
 8009d68:	4b32      	ldr	r3, [pc, #200]	; (8009e34 <applyPID+0x32c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a36      	ldr	r2, [pc, #216]	; (8009e48 <applyPID+0x340>)
 8009d6e:	6013      	str	r3, [r2, #0]

	pidOutput_I = proportional_I + integral_I + derivative_I;
 8009d70:	4b31      	ldr	r3, [pc, #196]	; (8009e38 <applyPID+0x330>)
 8009d72:	ed93 7a00 	vldr	s14, [r3]
 8009d76:	4b31      	ldr	r3, [pc, #196]	; (8009e3c <applyPID+0x334>)
 8009d78:	edd3 7a00 	vldr	s15, [r3]
 8009d7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d80:	4b32      	ldr	r3, [pc, #200]	; (8009e4c <applyPID+0x344>)
 8009d82:	edd3 7a00 	vldr	s15, [r3]
 8009d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d8a:	4b31      	ldr	r3, [pc, #196]	; (8009e50 <applyPID+0x348>)
 8009d8c:	edc3 7a00 	vstr	s15, [r3]
	if (pidOutput_I <= pidMinLimit_I){pidOutput_I = pidMinLimit_I;}
 8009d90:	4b2f      	ldr	r3, [pc, #188]	; (8009e50 <applyPID+0x348>)
 8009d92:	ed93 7a00 	vldr	s14, [r3]
 8009d96:	4b2f      	ldr	r3, [pc, #188]	; (8009e54 <applyPID+0x34c>)
 8009d98:	edd3 7a00 	vldr	s15, [r3]
 8009d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da4:	d858      	bhi.n	8009e58 <applyPID+0x350>
 8009da6:	4b2b      	ldr	r3, [pc, #172]	; (8009e54 <applyPID+0x34c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a29      	ldr	r2, [pc, #164]	; (8009e50 <applyPID+0x348>)
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	e062      	b.n	8009e76 <applyPID+0x36e>
 8009db0:	2000030c 	.word	0x2000030c
 8009db4:	2000001c 	.word	0x2000001c
 8009db8:	20000390 	.word	0x20000390
 8009dbc:	20000020 	.word	0x20000020
 8009dc0:	20000394 	.word	0x20000394
 8009dc4:	200002b0 	.word	0x200002b0
 8009dc8:	20000398 	.word	0x20000398
 8009dcc:	20000024 	.word	0x20000024
 8009dd0:	20000368 	.word	0x20000368
 8009dd4:	20000028 	.word	0x20000028
 8009dd8:	2000036c 	.word	0x2000036c
 8009ddc:	200002b4 	.word	0x200002b4
 8009de0:	20000370 	.word	0x20000370
 8009de4:	20000008 	.word	0x20000008
 8009de8:	2000000c 	.word	0x2000000c
 8009dec:	200002ac 	.word	0x200002ac
 8009df0:	20000010 	.word	0x20000010
 8009df4:	20000014 	.word	0x20000014
 8009df8:	20000018 	.word	0x20000018
 8009dfc:	200003d4 	.word	0x200003d4
 8009e00:	200003bc 	.word	0x200003bc
 8009e04:	20000388 	.word	0x20000388
 8009e08:	2000009c 	.word	0x2000009c
 8009e0c:	20000374 	.word	0x20000374
 8009e10:	2000037c 	.word	0x2000037c
 8009e14:	20000380 	.word	0x20000380
 8009e18:	20000098 	.word	0x20000098
 8009e1c:	20000378 	.word	0x20000378
 8009e20:	20000384 	.word	0x20000384
 8009e24:	200003b4 	.word	0x200003b4
 8009e28:	447a0000 	.word	0x447a0000
 8009e2c:	200003f4 	.word	0x200003f4
 8009e30:	200003b0 	.word	0x200003b0
 8009e34:	2000039c 	.word	0x2000039c
 8009e38:	200003a4 	.word	0x200003a4
 8009e3c:	200003a8 	.word	0x200003a8
 8009e40:	200000a8 	.word	0x200000a8
 8009e44:	200000ac 	.word	0x200000ac
 8009e48:	200003a0 	.word	0x200003a0
 8009e4c:	200003ac 	.word	0x200003ac
 8009e50:	200003b8 	.word	0x200003b8
 8009e54:	200000a0 	.word	0x200000a0
	else if (pidOutput_I >= pidMaxLimit_I){pidOutput_I = pidMaxLimit_I;}
 8009e58:	4b33      	ldr	r3, [pc, #204]	; (8009f28 <applyPID+0x420>)
 8009e5a:	ed93 7a00 	vldr	s14, [r3]
 8009e5e:	4b33      	ldr	r3, [pc, #204]	; (8009f2c <applyPID+0x424>)
 8009e60:	edd3 7a00 	vldr	s15, [r3]
 8009e64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6c:	db03      	blt.n	8009e76 <applyPID+0x36e>
 8009e6e:	4b2f      	ldr	r3, [pc, #188]	; (8009f2c <applyPID+0x424>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a2d      	ldr	r2, [pc, #180]	; (8009f28 <applyPID+0x420>)
 8009e74:	6013      	str	r3, [r2, #0]

	MOSFET = (uint32_t)pidOutput_I;
 8009e76:	4b2c      	ldr	r3, [pc, #176]	; (8009f28 <applyPID+0x420>)
 8009e78:	edd3 7a00 	vldr	s15, [r3]
 8009e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e80:	ee17 2a90 	vmov	r2, s15
 8009e84:	4b2a      	ldr	r3, [pc, #168]	; (8009f30 <applyPID+0x428>)
 8009e86:	601a      	str	r2, [r3, #0]

	if (boostEnableOld != boostEnable) //if we have changed from boost to buck and vice versa, reset PID variables
 8009e88:	4b2a      	ldr	r3, [pc, #168]	; (8009f34 <applyPID+0x42c>)
 8009e8a:	781a      	ldrb	r2, [r3, #0]
 8009e8c:	4b2a      	ldr	r3, [pc, #168]	; (8009f38 <applyPID+0x430>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d022      	beq.n	8009eda <applyPID+0x3d2>
	{
		 error_I = 0.0;
 8009e94:	4b29      	ldr	r3, [pc, #164]	; (8009f3c <applyPID+0x434>)
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]
		 prevError_I = 0.0;
 8009e9c:	4b28      	ldr	r3, [pc, #160]	; (8009f40 <applyPID+0x438>)
 8009e9e:	f04f 0200 	mov.w	r2, #0
 8009ea2:	601a      	str	r2, [r3, #0]
		 proportional_I = 0.0;
 8009ea4:	4b27      	ldr	r3, [pc, #156]	; (8009f44 <applyPID+0x43c>)
 8009ea6:	f04f 0200 	mov.w	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
		 integral_I = 0.0;
 8009eac:	4b26      	ldr	r3, [pc, #152]	; (8009f48 <applyPID+0x440>)
 8009eae:	f04f 0200 	mov.w	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
		 derivative_I = 0.0;
 8009eb4:	4b25      	ldr	r3, [pc, #148]	; (8009f4c <applyPID+0x444>)
 8009eb6:	f04f 0200 	mov.w	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]
		 presentValue_I = 0.0;
 8009ebc:	4b24      	ldr	r3, [pc, #144]	; (8009f50 <applyPID+0x448>)
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]
		 pidOutput_I = 0.0;
 8009ec4:	4b18      	ldr	r3, [pc, #96]	; (8009f28 <applyPID+0x420>)
 8009ec6:	f04f 0200 	mov.w	r2, #0
 8009eca:	601a      	str	r2, [r3, #0]
		 MOSFET = 0;
 8009ecc:	4b18      	ldr	r3, [pc, #96]	; (8009f30 <applyPID+0x428>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	601a      	str	r2, [r3, #0]
		 boostEnableOld = boostEnable;
 8009ed2:	4b19      	ldr	r3, [pc, #100]	; (8009f38 <applyPID+0x430>)
 8009ed4:	781a      	ldrb	r2, [r3, #0]
 8009ed6:	4b17      	ldr	r3, [pc, #92]	; (8009f34 <applyPID+0x42c>)
 8009ed8:	701a      	strb	r2, [r3, #0]
	}

	if (boostEnable == 1)
 8009eda:	4b17      	ldr	r3, [pc, #92]	; (8009f38 <applyPID+0x430>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d015      	beq.n	8009f0e <applyPID+0x406>
	{
		TIM1->CCR2 = 1001; //turn on PMOS
 8009ee2:	4b1c      	ldr	r3, [pc, #112]	; (8009f54 <applyPID+0x44c>)
 8009ee4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009ee8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = pidMaxLimit_I - MOSFET;
 8009eea:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <applyPID+0x424>)
 8009eec:	ed93 7a00 	vldr	s14, [r3]
 8009ef0:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <applyPID+0x428>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	ee07 3a90 	vmov	s15, r3
 8009ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f00:	4b14      	ldr	r3, [pc, #80]	; (8009f54 <applyPID+0x44c>)
 8009f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f06:	ee17 2a90 	vmov	r2, s15
 8009f0a:	635a      	str	r2, [r3, #52]	; 0x34
	{
		TIM1->CCR1 = 1001; //turn off NMOS
		TIM1->CCR2 = MOSFET;
	}

}
 8009f0c:	e007      	b.n	8009f1e <applyPID+0x416>
		TIM1->CCR1 = 1001; //turn off NMOS
 8009f0e:	4b11      	ldr	r3, [pc, #68]	; (8009f54 <applyPID+0x44c>)
 8009f10:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009f14:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = MOSFET;
 8009f16:	4a0f      	ldr	r2, [pc, #60]	; (8009f54 <applyPID+0x44c>)
 8009f18:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <applyPID+0x428>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009f1e:	bf00      	nop
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	200003b8 	.word	0x200003b8
 8009f2c:	200000a4 	.word	0x200000a4
 8009f30:	200000b0 	.word	0x200000b0
 8009f34:	20000312 	.word	0x20000312
 8009f38:	2000030c 	.word	0x2000030c
 8009f3c:	2000039c 	.word	0x2000039c
 8009f40:	200003a0 	.word	0x200003a0
 8009f44:	200003a4 	.word	0x200003a4
 8009f48:	200003a8 	.word	0x200003a8
 8009f4c:	200003ac 	.word	0x200003ac
 8009f50:	200003b0 	.word	0x200003b0
 8009f54:	40012c00 	.word	0x40012c00

08009f58 <balanceCells>:

//**********************************************************************************************************************************************************
void balanceCells() //balances the 6 cells of the battery
{
 8009f58:	b5b0      	push	{r4, r5, r7, lr}
 8009f5a:	b08a      	sub	sp, #40	; 0x28
 8009f5c:	af00      	add	r7, sp, #0
	float cellVoltageArray[6] = {vCell1,vCell2,vCell3,vCell4,vCell5,vCell6};
 8009f5e:	4bce      	ldr	r3, [pc, #824]	; (800a298 <balanceCells+0x340>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	603b      	str	r3, [r7, #0]
 8009f64:	4bcd      	ldr	r3, [pc, #820]	; (800a29c <balanceCells+0x344>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	4bcd      	ldr	r3, [pc, #820]	; (800a2a0 <balanceCells+0x348>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	60bb      	str	r3, [r7, #8]
 8009f70:	4bcc      	ldr	r3, [pc, #816]	; (800a2a4 <balanceCells+0x34c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	4bcc      	ldr	r3, [pc, #816]	; (800a2a8 <balanceCells+0x350>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	613b      	str	r3, [r7, #16]
 8009f7c:	4bcb      	ldr	r3, [pc, #812]	; (800a2ac <balanceCells+0x354>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	617b      	str	r3, [r7, #20]
	float cellMaxVoltage = 0.0f;
 8009f82:	f04f 0300 	mov.w	r3, #0
 8009f86:	627b      	str	r3, [r7, #36]	; 0x24
	float cellMinVoltage = 5.0f;
 8009f88:	4bc9      	ldr	r3, [pc, #804]	; (800a2b0 <balanceCells+0x358>)
 8009f8a:	623b      	str	r3, [r7, #32]
	uint8_t minVoltageCellNo = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	77fb      	strb	r3, [r7, #31]

	//find cells with lowest and highest voltage along with their number
	for(int i = 0; i < 6;i++)
 8009f90:	2300      	movs	r3, #0
 8009f92:	61bb      	str	r3, [r7, #24]
 8009f94:	e034      	b.n	800a000 <balanceCells+0xa8>
	{
		if (cellVoltageArray[i] < cellMinVoltage)
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009f9e:	4413      	add	r3, r2
 8009fa0:	3b28      	subs	r3, #40	; 0x28
 8009fa2:	edd3 7a00 	vldr	s15, [r3]
 8009fa6:	ed97 7a08 	vldr	s14, [r7, #32]
 8009faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb2:	dd0b      	ble.n	8009fcc <balanceCells+0x74>
		{
			cellMinVoltage = cellVoltageArray[i];
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009fbc:	4413      	add	r3, r2
 8009fbe:	3b28      	subs	r3, #40	; 0x28
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	623b      	str	r3, [r7, #32]
			minVoltageCellNo = i + 1;
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	3301      	adds	r3, #1
 8009fca:	77fb      	strb	r3, [r7, #31]
		}
		if (cellVoltageArray[i] > cellMaxVoltage)
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009fd4:	4413      	add	r3, r2
 8009fd6:	3b28      	subs	r3, #40	; 0x28
 8009fd8:	edd3 7a00 	vldr	s15, [r3]
 8009fdc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe8:	d507      	bpl.n	8009ffa <balanceCells+0xa2>
		{
			cellMaxVoltage = cellVoltageArray[i];
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009ff2:	4413      	add	r3, r2
 8009ff4:	3b28      	subs	r3, #40	; 0x28
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 6;i++)
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	61bb      	str	r3, [r7, #24]
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	2b05      	cmp	r3, #5
 800a004:	ddc7      	ble.n	8009f96 <balanceCells+0x3e>
		}
	}

	//if the difference between the cell voltages is below 10mV then stop balancing
	if(((cellMaxVoltage - cellMinVoltage) < 0.005) && (VC6 > (setpoint_V - 0.01)) && (VC6 < (setpoint_V + 0.01)))
 800a006:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a00a:	edd7 7a08 	vldr	s15, [r7, #32]
 800a00e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a012:	ee17 0a90 	vmov	r0, s15
 800a016:	f7f6 faaf 	bl	8000578 <__aeabi_f2d>
 800a01a:	a39b      	add	r3, pc, #620	; (adr r3, 800a288 <balanceCells+0x330>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 fd74 	bl	8000b0c <__aeabi_dcmplt>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d05e      	beq.n	800a0e8 <balanceCells+0x190>
 800a02a:	4ba2      	ldr	r3, [pc, #648]	; (800a2b4 <balanceCells+0x35c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4618      	mov	r0, r3
 800a030:	f7f6 faa2 	bl	8000578 <__aeabi_f2d>
 800a034:	4604      	mov	r4, r0
 800a036:	460d      	mov	r5, r1
 800a038:	4b9f      	ldr	r3, [pc, #636]	; (800a2b8 <balanceCells+0x360>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7f6 fa9b 	bl	8000578 <__aeabi_f2d>
 800a042:	a393      	add	r3, pc, #588	; (adr r3, 800a290 <balanceCells+0x338>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f7f6 f936 	bl	80002b8 <__aeabi_dsub>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4620      	mov	r0, r4
 800a052:	4629      	mov	r1, r5
 800a054:	f7f6 fd78 	bl	8000b48 <__aeabi_dcmpgt>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d044      	beq.n	800a0e8 <balanceCells+0x190>
 800a05e:	4b95      	ldr	r3, [pc, #596]	; (800a2b4 <balanceCells+0x35c>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4618      	mov	r0, r3
 800a064:	f7f6 fa88 	bl	8000578 <__aeabi_f2d>
 800a068:	4604      	mov	r4, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	4b92      	ldr	r3, [pc, #584]	; (800a2b8 <balanceCells+0x360>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4618      	mov	r0, r3
 800a072:	f7f6 fa81 	bl	8000578 <__aeabi_f2d>
 800a076:	a386      	add	r3, pc, #536	; (adr r3, 800a290 <balanceCells+0x338>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	f7f6 f91e 	bl	80002bc <__adddf3>
 800a080:	4602      	mov	r2, r0
 800a082:	460b      	mov	r3, r1
 800a084:	4620      	mov	r0, r4
 800a086:	4629      	mov	r1, r5
 800a088:	f7f6 fd40 	bl	8000b0c <__aeabi_dcmplt>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d02a      	beq.n	800a0e8 <balanceCells+0x190>
	{
		balancingComplete = 1;
 800a092:	4b8a      	ldr	r3, [pc, #552]	; (800a2bc <balanceCells+0x364>)
 800a094:	2201      	movs	r2, #1
 800a096:	701a      	strb	r2, [r3, #0]
		balanceEnable = 0;
 800a098:	4b89      	ldr	r3, [pc, #548]	; (800a2c0 <balanceCells+0x368>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_RESET);
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2140      	movs	r1, #64	; 0x40
 800a0a2:	4888      	ldr	r0, [pc, #544]	; (800a2c4 <balanceCells+0x36c>)
 800a0a4:	f7f9 fc6c 	bl	8003980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_RESET);
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2180      	movs	r1, #128	; 0x80
 800a0ac:	4885      	ldr	r0, [pc, #532]	; (800a2c4 <balanceCells+0x36c>)
 800a0ae:	f7f9 fc67 	bl	8003980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_RESET);
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a0b8:	4882      	ldr	r0, [pc, #520]	; (800a2c4 <balanceCells+0x36c>)
 800a0ba:	f7f9 fc61 	bl	8003980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_RESET);
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0c4:	487f      	ldr	r0, [pc, #508]	; (800a2c4 <balanceCells+0x36c>)
 800a0c6:	f7f9 fc5b 	bl	8003980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_RESET);
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a0d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0d4:	f7f9 fc54 	bl	8003980 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_RESET);
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0e2:	f7f9 fc4d 	bl	8003980 <HAL_GPIO_WritePin>
 800a0e6:	e114      	b.n	800a312 <balanceCells+0x3ba>
	}
	else
	{
		switch(minVoltageCellNo) //discharge all cells with a voltage higher than the cell with the lowest voltage
 800a0e8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	2b05      	cmp	r3, #5
 800a0ee:	f200 8110 	bhi.w	800a312 <balanceCells+0x3ba>
 800a0f2:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <balanceCells+0x1a0>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a111 	.word	0x0800a111
 800a0fc:	0800a15b 	.word	0x0800a15b
 800a100:	0800a1a5 	.word	0x0800a1a5
 800a104:	0800a1ef 	.word	0x0800a1ef
 800a108:	0800a239 	.word	0x0800a239
 800a10c:	0800a2c9 	.word	0x0800a2c9
		{
			case 1:
				HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_RESET);
 800a110:	2200      	movs	r2, #0
 800a112:	2140      	movs	r1, #64	; 0x40
 800a114:	486b      	ldr	r0, [pc, #428]	; (800a2c4 <balanceCells+0x36c>)
 800a116:	f7f9 fc33 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_SET);
 800a11a:	2201      	movs	r2, #1
 800a11c:	2180      	movs	r1, #128	; 0x80
 800a11e:	4869      	ldr	r0, [pc, #420]	; (800a2c4 <balanceCells+0x36c>)
 800a120:	f7f9 fc2e 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_SET);
 800a124:	2201      	movs	r2, #1
 800a126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a12a:	4866      	ldr	r0, [pc, #408]	; (800a2c4 <balanceCells+0x36c>)
 800a12c:	f7f9 fc28 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_SET);
 800a130:	2201      	movs	r2, #1
 800a132:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a136:	4863      	ldr	r0, [pc, #396]	; (800a2c4 <balanceCells+0x36c>)
 800a138:	f7f9 fc22 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_SET);
 800a13c:	2201      	movs	r2, #1
 800a13e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a146:	f7f9 fc1b 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_SET);
 800a14a:	2201      	movs	r2, #1
 800a14c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a154:	f7f9 fc14 	bl	8003980 <HAL_GPIO_WritePin>
			break;
 800a158:	e0db      	b.n	800a312 <balanceCells+0x3ba>

			case 2:
				HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_SET);
 800a15a:	2201      	movs	r2, #1
 800a15c:	2140      	movs	r1, #64	; 0x40
 800a15e:	4859      	ldr	r0, [pc, #356]	; (800a2c4 <balanceCells+0x36c>)
 800a160:	f7f9 fc0e 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_RESET);
 800a164:	2200      	movs	r2, #0
 800a166:	2180      	movs	r1, #128	; 0x80
 800a168:	4856      	ldr	r0, [pc, #344]	; (800a2c4 <balanceCells+0x36c>)
 800a16a:	f7f9 fc09 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_SET);
 800a16e:	2201      	movs	r2, #1
 800a170:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a174:	4853      	ldr	r0, [pc, #332]	; (800a2c4 <balanceCells+0x36c>)
 800a176:	f7f9 fc03 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_SET);
 800a17a:	2201      	movs	r2, #1
 800a17c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a180:	4850      	ldr	r0, [pc, #320]	; (800a2c4 <balanceCells+0x36c>)
 800a182:	f7f9 fbfd 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_SET);
 800a186:	2201      	movs	r2, #1
 800a188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a18c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a190:	f7f9 fbf6 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_SET);
 800a194:	2201      	movs	r2, #1
 800a196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a19a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a19e:	f7f9 fbef 	bl	8003980 <HAL_GPIO_WritePin>
			break;
 800a1a2:	e0b6      	b.n	800a312 <balanceCells+0x3ba>

			case 3:
				HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_SET);
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	2140      	movs	r1, #64	; 0x40
 800a1a8:	4846      	ldr	r0, [pc, #280]	; (800a2c4 <balanceCells+0x36c>)
 800a1aa:	f7f9 fbe9 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_SET);
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	2180      	movs	r1, #128	; 0x80
 800a1b2:	4844      	ldr	r0, [pc, #272]	; (800a2c4 <balanceCells+0x36c>)
 800a1b4:	f7f9 fbe4 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_RESET);
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1be:	4841      	ldr	r0, [pc, #260]	; (800a2c4 <balanceCells+0x36c>)
 800a1c0:	f7f9 fbde 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_SET);
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1ca:	483e      	ldr	r0, [pc, #248]	; (800a2c4 <balanceCells+0x36c>)
 800a1cc:	f7f9 fbd8 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_SET);
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1da:	f7f9 fbd1 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_SET);
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1e8:	f7f9 fbca 	bl	8003980 <HAL_GPIO_WritePin>
			break;
 800a1ec:	e091      	b.n	800a312 <balanceCells+0x3ba>

			case 4:
				HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_SET);
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	2140      	movs	r1, #64	; 0x40
 800a1f2:	4834      	ldr	r0, [pc, #208]	; (800a2c4 <balanceCells+0x36c>)
 800a1f4:	f7f9 fbc4 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_SET);
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	2180      	movs	r1, #128	; 0x80
 800a1fc:	4831      	ldr	r0, [pc, #196]	; (800a2c4 <balanceCells+0x36c>)
 800a1fe:	f7f9 fbbf 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_SET);
 800a202:	2201      	movs	r2, #1
 800a204:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a208:	482e      	ldr	r0, [pc, #184]	; (800a2c4 <balanceCells+0x36c>)
 800a20a:	f7f9 fbb9 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_RESET);
 800a20e:	2200      	movs	r2, #0
 800a210:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a214:	482b      	ldr	r0, [pc, #172]	; (800a2c4 <balanceCells+0x36c>)
 800a216:	f7f9 fbb3 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_SET);
 800a21a:	2201      	movs	r2, #1
 800a21c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a224:	f7f9 fbac 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_SET);
 800a228:	2201      	movs	r2, #1
 800a22a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a22e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a232:	f7f9 fba5 	bl	8003980 <HAL_GPIO_WritePin>
			break;
 800a236:	e06c      	b.n	800a312 <balanceCells+0x3ba>

			case 5:
				HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_SET);
 800a238:	2201      	movs	r2, #1
 800a23a:	2140      	movs	r1, #64	; 0x40
 800a23c:	4821      	ldr	r0, [pc, #132]	; (800a2c4 <balanceCells+0x36c>)
 800a23e:	f7f9 fb9f 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_SET);
 800a242:	2201      	movs	r2, #1
 800a244:	2180      	movs	r1, #128	; 0x80
 800a246:	481f      	ldr	r0, [pc, #124]	; (800a2c4 <balanceCells+0x36c>)
 800a248:	f7f9 fb9a 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_SET);
 800a24c:	2201      	movs	r2, #1
 800a24e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a252:	481c      	ldr	r0, [pc, #112]	; (800a2c4 <balanceCells+0x36c>)
 800a254:	f7f9 fb94 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_SET);
 800a258:	2201      	movs	r2, #1
 800a25a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a25e:	4819      	ldr	r0, [pc, #100]	; (800a2c4 <balanceCells+0x36c>)
 800a260:	f7f9 fb8e 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_RESET);
 800a264:	2200      	movs	r2, #0
 800a266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a26a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a26e:	f7f9 fb87 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_SET);
 800a272:	2201      	movs	r2, #1
 800a274:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a27c:	f7f9 fb80 	bl	8003980 <HAL_GPIO_WritePin>
			break;
 800a280:	e047      	b.n	800a312 <balanceCells+0x3ba>
 800a282:	bf00      	nop
 800a284:	f3af 8000 	nop.w
 800a288:	47ae147b 	.word	0x47ae147b
 800a28c:	3f747ae1 	.word	0x3f747ae1
 800a290:	47ae147b 	.word	0x47ae147b
 800a294:	3f847ae1 	.word	0x3f847ae1
 800a298:	200003d8 	.word	0x200003d8
 800a29c:	200003dc 	.word	0x200003dc
 800a2a0:	200003e0 	.word	0x200003e0
 800a2a4:	200003e4 	.word	0x200003e4
 800a2a8:	200003e8 	.word	0x200003e8
 800a2ac:	200003ec 	.word	0x200003ec
 800a2b0:	40a00000 	.word	0x40a00000
 800a2b4:	200003d4 	.word	0x200003d4
 800a2b8:	2000009c 	.word	0x2000009c
 800a2bc:	2000030e 	.word	0x2000030e
 800a2c0:	2000030f 	.word	0x2000030f
 800a2c4:	48000800 	.word	0x48000800

			case 6:
				HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_SET);
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	2140      	movs	r1, #64	; 0x40
 800a2cc:	4813      	ldr	r0, [pc, #76]	; (800a31c <balanceCells+0x3c4>)
 800a2ce:	f7f9 fb57 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_SET);
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	2180      	movs	r1, #128	; 0x80
 800a2d6:	4811      	ldr	r0, [pc, #68]	; (800a31c <balanceCells+0x3c4>)
 800a2d8:	f7f9 fb52 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_SET);
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a2e2:	480e      	ldr	r0, [pc, #56]	; (800a31c <balanceCells+0x3c4>)
 800a2e4:	f7f9 fb4c 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_SET);
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a2ee:	480b      	ldr	r0, [pc, #44]	; (800a31c <balanceCells+0x3c4>)
 800a2f0:	f7f9 fb46 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_SET);
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a2fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2fe:	f7f9 fb3f 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_RESET);
 800a302:	2200      	movs	r2, #0
 800a304:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a30c:	f7f9 fb38 	bl	8003980 <HAL_GPIO_WritePin>
			break;
 800a310:	bf00      	nop
		}
	}
}
 800a312:	bf00      	nop
 800a314:	3728      	adds	r7, #40	; 0x28
 800a316:	46bd      	mov	sp, r7
 800a318:	bdb0      	pop	{r4, r5, r7, pc}
 800a31a:	bf00      	nop
 800a31c:	48000800 	.word	0x48000800

0800a320 <healthCheck>:

//**********************************************************************************************************************************************************
void healthCheck()
{
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0
	static bool firstRun = 1;

	if (firstRun == 0) //don't run checks the first time due to false trigger
 800a324:	4bc4      	ldr	r3, [pc, #784]	; (800a638 <healthCheck+0x318>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	f083 0301 	eor.w	r3, r3, #1
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 81e9 	beq.w	800a706 <healthCheck+0x3e6>
	{
		//batt over temp protection
		if ((temp3 > 50)||(temp4 > 50))
 800a334:	4bc1      	ldr	r3, [pc, #772]	; (800a63c <healthCheck+0x31c>)
 800a336:	edd3 7a00 	vldr	s15, [r3]
 800a33a:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 800a640 <healthCheck+0x320>
 800a33e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a346:	dc09      	bgt.n	800a35c <healthCheck+0x3c>
 800a348:	4bbe      	ldr	r3, [pc, #760]	; (800a644 <healthCheck+0x324>)
 800a34a:	edd3 7a00 	vldr	s15, [r3]
 800a34e:	ed9f 7abc 	vldr	s14, [pc, #752]	; 800a640 <healthCheck+0x320>
 800a352:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35a:	dd02      	ble.n	800a362 <healthCheck+0x42>
		{
			battOverTempTrip  = 1;
 800a35c:	4bba      	ldr	r3, [pc, #744]	; (800a648 <healthCheck+0x328>)
 800a35e:	2201      	movs	r2, #1
 800a360:	701a      	strb	r2, [r3, #0]
		}

		//batt under temp protection
		if ((temp3 < 0) || (temp4 < 0))
 800a362:	4bb6      	ldr	r3, [pc, #728]	; (800a63c <healthCheck+0x31c>)
 800a364:	edd3 7a00 	vldr	s15, [r3]
 800a368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a370:	d407      	bmi.n	800a382 <healthCheck+0x62>
 800a372:	4bb4      	ldr	r3, [pc, #720]	; (800a644 <healthCheck+0x324>)
 800a374:	edd3 7a00 	vldr	s15, [r3]
 800a378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a380:	d502      	bpl.n	800a388 <healthCheck+0x68>
		{
			battUnderTempTrip = 1;
 800a382:	4bb2      	ldr	r3, [pc, #712]	; (800a64c <healthCheck+0x32c>)
 800a384:	2201      	movs	r2, #1
 800a386:	701a      	strb	r2, [r3, #0]
		}

		//batt over voltage protection
		if ((vCell1 > 4.22)||(vCell2 > 4.22)||(vCell3 > 4.22)||(vCell4 > 4.22)||(vCell5 > 4.22)||(vCell6 > 4.22)||(VC6 > 25.4))
 800a388:	4bb1      	ldr	r3, [pc, #708]	; (800a650 <healthCheck+0x330>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7f6 f8f3 	bl	8000578 <__aeabi_f2d>
 800a392:	a3a3      	add	r3, pc, #652	; (adr r3, 800a620 <healthCheck+0x300>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f6 fbd6 	bl	8000b48 <__aeabi_dcmpgt>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d14d      	bne.n	800a43e <healthCheck+0x11e>
 800a3a2:	4bac      	ldr	r3, [pc, #688]	; (800a654 <healthCheck+0x334>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7f6 f8e6 	bl	8000578 <__aeabi_f2d>
 800a3ac:	a39c      	add	r3, pc, #624	; (adr r3, 800a620 <healthCheck+0x300>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f6 fbc9 	bl	8000b48 <__aeabi_dcmpgt>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d140      	bne.n	800a43e <healthCheck+0x11e>
 800a3bc:	4ba6      	ldr	r3, [pc, #664]	; (800a658 <healthCheck+0x338>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7f6 f8d9 	bl	8000578 <__aeabi_f2d>
 800a3c6:	a396      	add	r3, pc, #600	; (adr r3, 800a620 <healthCheck+0x300>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f6 fbbc 	bl	8000b48 <__aeabi_dcmpgt>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d133      	bne.n	800a43e <healthCheck+0x11e>
 800a3d6:	4ba1      	ldr	r3, [pc, #644]	; (800a65c <healthCheck+0x33c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7f6 f8cc 	bl	8000578 <__aeabi_f2d>
 800a3e0:	a38f      	add	r3, pc, #572	; (adr r3, 800a620 <healthCheck+0x300>)
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	f7f6 fbaf 	bl	8000b48 <__aeabi_dcmpgt>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d126      	bne.n	800a43e <healthCheck+0x11e>
 800a3f0:	4b9b      	ldr	r3, [pc, #620]	; (800a660 <healthCheck+0x340>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7f6 f8bf 	bl	8000578 <__aeabi_f2d>
 800a3fa:	a389      	add	r3, pc, #548	; (adr r3, 800a620 <healthCheck+0x300>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f6 fba2 	bl	8000b48 <__aeabi_dcmpgt>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d119      	bne.n	800a43e <healthCheck+0x11e>
 800a40a:	4b96      	ldr	r3, [pc, #600]	; (800a664 <healthCheck+0x344>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7f6 f8b2 	bl	8000578 <__aeabi_f2d>
 800a414:	a382      	add	r3, pc, #520	; (adr r3, 800a620 <healthCheck+0x300>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f7f6 fb95 	bl	8000b48 <__aeabi_dcmpgt>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10c      	bne.n	800a43e <healthCheck+0x11e>
 800a424:	4b90      	ldr	r3, [pc, #576]	; (800a668 <healthCheck+0x348>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4618      	mov	r0, r3
 800a42a:	f7f6 f8a5 	bl	8000578 <__aeabi_f2d>
 800a42e:	a37e      	add	r3, pc, #504	; (adr r3, 800a628 <healthCheck+0x308>)
 800a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a434:	f7f6 fb88 	bl	8000b48 <__aeabi_dcmpgt>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d002      	beq.n	800a444 <healthCheck+0x124>
		{
			battOverVoltTrip = 1;
 800a43e:	4b8b      	ldr	r3, [pc, #556]	; (800a66c <healthCheck+0x34c>)
 800a440:	2201      	movs	r2, #1
 800a442:	701a      	strb	r2, [r3, #0]
		}

		//batt under voltage protection
		if ((vCell1 < 2.5)||(vCell2 < 2.5)||(vCell3 < 2.5)||(vCell4 < 2.5)||(vCell5 < 2.5)||(vCell6 < 2.5)||(VC6 < 14.9))
 800a444:	4b82      	ldr	r3, [pc, #520]	; (800a650 <healthCheck+0x330>)
 800a446:	edd3 7a00 	vldr	s15, [r3]
 800a44a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800a44e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a456:	d43e      	bmi.n	800a4d6 <healthCheck+0x1b6>
 800a458:	4b7e      	ldr	r3, [pc, #504]	; (800a654 <healthCheck+0x334>)
 800a45a:	edd3 7a00 	vldr	s15, [r3]
 800a45e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800a462:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a46a:	d434      	bmi.n	800a4d6 <healthCheck+0x1b6>
 800a46c:	4b7a      	ldr	r3, [pc, #488]	; (800a658 <healthCheck+0x338>)
 800a46e:	edd3 7a00 	vldr	s15, [r3]
 800a472:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800a476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a47e:	d42a      	bmi.n	800a4d6 <healthCheck+0x1b6>
 800a480:	4b76      	ldr	r3, [pc, #472]	; (800a65c <healthCheck+0x33c>)
 800a482:	edd3 7a00 	vldr	s15, [r3]
 800a486:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800a48a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a492:	d420      	bmi.n	800a4d6 <healthCheck+0x1b6>
 800a494:	4b72      	ldr	r3, [pc, #456]	; (800a660 <healthCheck+0x340>)
 800a496:	edd3 7a00 	vldr	s15, [r3]
 800a49a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800a49e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a6:	d416      	bmi.n	800a4d6 <healthCheck+0x1b6>
 800a4a8:	4b6e      	ldr	r3, [pc, #440]	; (800a664 <healthCheck+0x344>)
 800a4aa:	edd3 7a00 	vldr	s15, [r3]
 800a4ae:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800a4b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ba:	d40c      	bmi.n	800a4d6 <healthCheck+0x1b6>
 800a4bc:	4b6a      	ldr	r3, [pc, #424]	; (800a668 <healthCheck+0x348>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7f6 f859 	bl	8000578 <__aeabi_f2d>
 800a4c6:	a35a      	add	r3, pc, #360	; (adr r3, 800a630 <healthCheck+0x310>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f7f6 fb1e 	bl	8000b0c <__aeabi_dcmplt>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d002      	beq.n	800a4dc <healthCheck+0x1bc>
		{
			battUnderVoltTrip = 1;
 800a4d6:	4b66      	ldr	r3, [pc, #408]	; (800a670 <healthCheck+0x350>)
 800a4d8:	2201      	movs	r2, #1
 800a4da:	701a      	strb	r2, [r3, #0]
		}

		//batt over discharge current protection
		if (IOutDchg > 30.0)
 800a4dc:	4b65      	ldr	r3, [pc, #404]	; (800a674 <healthCheck+0x354>)
 800a4de:	edd3 7a00 	vldr	s15, [r3]
 800a4e2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800a4e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ee:	dd02      	ble.n	800a4f6 <healthCheck+0x1d6>
		{
			battOverCurrTrip = 1;
 800a4f0:	4b61      	ldr	r3, [pc, #388]	; (800a678 <healthCheck+0x358>)
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	701a      	strb	r2, [r3, #0]
		}

		//batt over regeneration current protection
		if (IOutChg  > 10.0)
 800a4f6:	4b61      	ldr	r3, [pc, #388]	; (800a67c <healthCheck+0x35c>)
 800a4f8:	edd3 7a00 	vldr	s15, [r3]
 800a4fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a500:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a508:	dd02      	ble.n	800a510 <healthCheck+0x1f0>
		{
			battRegenCurrTrip = 1;
 800a50a:	4b5d      	ldr	r3, [pc, #372]	; (800a680 <healthCheck+0x360>)
 800a50c:	2201      	movs	r2, #1
 800a50e:	701a      	strb	r2, [r3, #0]
		}

		//charger over temp protection
		if ((temp1 > 100) || (temp2 > 100))
 800a510:	4b5c      	ldr	r3, [pc, #368]	; (800a684 <healthCheck+0x364>)
 800a512:	edd3 7a00 	vldr	s15, [r3]
 800a516:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800a688 <healthCheck+0x368>
 800a51a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a522:	dc09      	bgt.n	800a538 <healthCheck+0x218>
 800a524:	4b59      	ldr	r3, [pc, #356]	; (800a68c <healthCheck+0x36c>)
 800a526:	edd3 7a00 	vldr	s15, [r3]
 800a52a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800a688 <healthCheck+0x368>
 800a52e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a536:	dd02      	ble.n	800a53e <healthCheck+0x21e>
		{
			chgrOverTempTrip = 1;
 800a538:	4b55      	ldr	r3, [pc, #340]	; (800a690 <healthCheck+0x370>)
 800a53a:	2201      	movs	r2, #1
 800a53c:	701a      	strb	r2, [r3, #0]
		}

		//charger under temp protection
		if ((temp1 < -20) || (temp2 < -20 ))
 800a53e:	4b51      	ldr	r3, [pc, #324]	; (800a684 <healthCheck+0x364>)
 800a540:	edd3 7a00 	vldr	s15, [r3]
 800a544:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a550:	d409      	bmi.n	800a566 <healthCheck+0x246>
 800a552:	4b4e      	ldr	r3, [pc, #312]	; (800a68c <healthCheck+0x36c>)
 800a554:	edd3 7a00 	vldr	s15, [r3]
 800a558:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a55c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a564:	d502      	bpl.n	800a56c <healthCheck+0x24c>
		{
			chgrUnderTempTrip = 1;
 800a566:	4b4b      	ldr	r3, [pc, #300]	; (800a694 <healthCheck+0x374>)
 800a568:	2201      	movs	r2, #1
 800a56a:	701a      	strb	r2, [r3, #0]
		}

		//compile error code into the 8 digit errorCode variable
		errorCode = battOverTempTrip * 10000000 + battUnderTempTrip * 1000000 + battOverVoltTrip * 100000 + battUnderVoltTrip * 10000 + battOverCurrTrip * 1000 + battRegenCurrTrip * 100 + chgrOverTempTrip * 10 + chgrUnderTempTrip * 1;
 800a56c:	4b36      	ldr	r3, [pc, #216]	; (800a648 <healthCheck+0x328>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	4b49      	ldr	r3, [pc, #292]	; (800a698 <healthCheck+0x378>)
 800a574:	fb03 f202 	mul.w	r2, r3, r2
 800a578:	4b34      	ldr	r3, [pc, #208]	; (800a64c <healthCheck+0x32c>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	4619      	mov	r1, r3
 800a57e:	4b47      	ldr	r3, [pc, #284]	; (800a69c <healthCheck+0x37c>)
 800a580:	fb03 f301 	mul.w	r3, r3, r1
 800a584:	441a      	add	r2, r3
 800a586:	4b39      	ldr	r3, [pc, #228]	; (800a66c <healthCheck+0x34c>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	4619      	mov	r1, r3
 800a58c:	4b44      	ldr	r3, [pc, #272]	; (800a6a0 <healthCheck+0x380>)
 800a58e:	fb03 f301 	mul.w	r3, r3, r1
 800a592:	441a      	add	r2, r3
 800a594:	4b36      	ldr	r3, [pc, #216]	; (800a670 <healthCheck+0x350>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	4619      	mov	r1, r3
 800a59a:	f242 7310 	movw	r3, #10000	; 0x2710
 800a59e:	fb03 f301 	mul.w	r3, r3, r1
 800a5a2:	441a      	add	r2, r3
 800a5a4:	4b34      	ldr	r3, [pc, #208]	; (800a678 <healthCheck+0x358>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a5ae:	fb03 f301 	mul.w	r3, r3, r1
 800a5b2:	441a      	add	r2, r3
 800a5b4:	4b32      	ldr	r3, [pc, #200]	; (800a680 <healthCheck+0x360>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	2364      	movs	r3, #100	; 0x64
 800a5bc:	fb03 f301 	mul.w	r3, r3, r1
 800a5c0:	441a      	add	r2, r3
 800a5c2:	4b33      	ldr	r3, [pc, #204]	; (800a690 <healthCheck+0x370>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	440b      	add	r3, r1
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	4413      	add	r3, r2
 800a5d2:	4a30      	ldr	r2, [pc, #192]	; (800a694 <healthCheck+0x374>)
 800a5d4:	7812      	ldrb	r2, [r2, #0]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	461a      	mov	r2, r3
 800a5da:	4b32      	ldr	r3, [pc, #200]	; (800a6a4 <healthCheck+0x384>)
 800a5dc:	601a      	str	r2, [r3, #0]

		//if the error code is not cleared
		if (errorCode != 0)
 800a5de:	4b31      	ldr	r3, [pc, #196]	; (800a6a4 <healthCheck+0x384>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 8092 	beq.w	800a70c <healthCheck+0x3ec>
		{
			chargerEnable = 0; //stop charging
 800a5e8:	4b2f      	ldr	r3, [pc, #188]	; (800a6a8 <healthCheck+0x388>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	701a      	strb	r2, [r3, #0]
			balanceEnable = 0; //stop balancing
 800a5ee:	4b2f      	ldr	r3, [pc, #188]	; (800a6ac <healthCheck+0x38c>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	701a      	strb	r2, [r3, #0]
			blockCellVoltageUpdating = 0; //allow cell voltage updating
 800a5f4:	4b2e      	ldr	r3, [pc, #184]	; (800a6b0 <healthCheck+0x390>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	701a      	strb	r2, [r3, #0]
			boostEnable = 0; //disable boost converter
 800a5fa:	4b2e      	ldr	r3, [pc, #184]	; (800a6b4 <healthCheck+0x394>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(CB_En_GPIO_Port,CB_En_Pin, GPIO_PIN_RESET); //disconnect load
 800a600:	2200      	movs	r2, #0
 800a602:	2101      	movs	r1, #1
 800a604:	482c      	ldr	r0, [pc, #176]	; (800a6b8 <healthCheck+0x398>)
 800a606:	f7f9 f9bb 	bl	8003980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_RESET); //stop discharging Cell 1
 800a60a:	2200      	movs	r2, #0
 800a60c:	2140      	movs	r1, #64	; 0x40
 800a60e:	482b      	ldr	r0, [pc, #172]	; (800a6bc <healthCheck+0x39c>)
 800a610:	f7f9 f9b6 	bl	8003980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_RESET); //stop discharging Cell 2
 800a614:	2200      	movs	r2, #0
 800a616:	2180      	movs	r1, #128	; 0x80
 800a618:	4828      	ldr	r0, [pc, #160]	; (800a6bc <healthCheck+0x39c>)
 800a61a:	f7f9 f9b1 	bl	8003980 <HAL_GPIO_WritePin>
 800a61e:	e04f      	b.n	800a6c0 <healthCheck+0x3a0>
 800a620:	ae147ae1 	.word	0xae147ae1
 800a624:	4010e147 	.word	0x4010e147
 800a628:	66666666 	.word	0x66666666
 800a62c:	40396666 	.word	0x40396666
 800a630:	cccccccd 	.word	0xcccccccd
 800a634:	402dcccc 	.word	0x402dcccc
 800a638:	200000b4 	.word	0x200000b4
 800a63c:	20000360 	.word	0x20000360
 800a640:	42480000 	.word	0x42480000
 800a644:	20000364 	.word	0x20000364
 800a648:	20000317 	.word	0x20000317
 800a64c:	20000318 	.word	0x20000318
 800a650:	200003d8 	.word	0x200003d8
 800a654:	200003dc 	.word	0x200003dc
 800a658:	200003e0 	.word	0x200003e0
 800a65c:	200003e4 	.word	0x200003e4
 800a660:	200003e8 	.word	0x200003e8
 800a664:	200003ec 	.word	0x200003ec
 800a668:	200003d4 	.word	0x200003d4
 800a66c:	20000315 	.word	0x20000315
 800a670:	20000316 	.word	0x20000316
 800a674:	200003f8 	.word	0x200003f8
 800a678:	20000314 	.word	0x20000314
 800a67c:	200003f4 	.word	0x200003f4
 800a680:	2000031b 	.word	0x2000031b
 800a684:	20000358 	.word	0x20000358
 800a688:	42c80000 	.word	0x42c80000
 800a68c:	2000035c 	.word	0x2000035c
 800a690:	20000319 	.word	0x20000319
 800a694:	2000031a 	.word	0x2000031a
 800a698:	00989680 	.word	0x00989680
 800a69c:	000f4240 	.word	0x000f4240
 800a6a0:	000186a0 	.word	0x000186a0
 800a6a4:	200003fc 	.word	0x200003fc
 800a6a8:	2000030d 	.word	0x2000030d
 800a6ac:	2000030f 	.word	0x2000030f
 800a6b0:	20000310 	.word	0x20000310
 800a6b4:	2000030c 	.word	0x2000030c
 800a6b8:	48000400 	.word	0x48000400
 800a6bc:	48000800 	.word	0x48000800
			HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_RESET); //stop discharging Cell 3
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6c6:	4812      	ldr	r0, [pc, #72]	; (800a710 <healthCheck+0x3f0>)
 800a6c8:	f7f9 f95a 	bl	8003980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_RESET); //stop discharging Cell 4
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6d2:	480f      	ldr	r0, [pc, #60]	; (800a710 <healthCheck+0x3f0>)
 800a6d4:	f7f9 f954 	bl	8003980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_RESET); //stop discharging Cell 5
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6e2:	f7f9 f94d 	bl	8003980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_RESET); //stop discharging Cell 6
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6f0:	f7f9 f946 	bl	8003980 <HAL_GPIO_WritePin>
			TIM1->CCR2 = 0; //turn off PMOS
 800a6f4:	4b07      	ldr	r3, [pc, #28]	; (800a714 <healthCheck+0x3f4>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR1 = 1001; //turn on NMOS so as not to consume power from BJT connected to MCU
 800a6fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6fe:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a702:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	else{firstRun = 0;}
}
 800a704:	e002      	b.n	800a70c <healthCheck+0x3ec>
	else{firstRun = 0;}
 800a706:	4b04      	ldr	r3, [pc, #16]	; (800a718 <healthCheck+0x3f8>)
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
}
 800a70c:	bf00      	nop
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	48000800 	.word	0x48000800
 800a714:	40012c00 	.word	0x40012c00
 800a718:	200000b4 	.word	0x200000b4

0800a71c <blinkErrorCode>:

//**********************************************************************************************************************************************************
void blinkErrorCode() //blinks the error code on the onboard green LED
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b088      	sub	sp, #32
 800a720:	af00      	add	r7, sp, #0
	static uint16_t delayTime = 200;

	switch (errorCode)
 800a722:	4bc6      	ldr	r3, [pc, #792]	; (800aa3c <blinkErrorCode+0x320>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a72a:	f000 80ea 	beq.w	800a902 <blinkErrorCode+0x1e6>
 800a72e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a732:	d80c      	bhi.n	800a74e <blinkErrorCode+0x32>
 800a734:	2b01      	cmp	r3, #1
 800a736:	f000 818b 	beq.w	800aa50 <blinkErrorCode+0x334>
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	f0c0 81d1 	bcc.w	800aae2 <blinkErrorCode+0x3c6>
 800a740:	2b0a      	cmp	r3, #10
 800a742:	f000 8146 	beq.w	800a9d2 <blinkErrorCode+0x2b6>
 800a746:	2b64      	cmp	r3, #100	; 0x64
 800a748:	f000 810f 	beq.w	800a96a <blinkErrorCode+0x24e>
 800a74c:	e1b4      	b.n	800aab8 <blinkErrorCode+0x39c>
 800a74e:	4abc      	ldr	r2, [pc, #752]	; (800aa40 <blinkErrorCode+0x324>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d06e      	beq.n	800a832 <blinkErrorCode+0x116>
 800a754:	4aba      	ldr	r2, [pc, #744]	; (800aa40 <blinkErrorCode+0x324>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d805      	bhi.n	800a766 <blinkErrorCode+0x4a>
 800a75a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a75e:	4293      	cmp	r3, r2
 800a760:	f000 809b 	beq.w	800a89a <blinkErrorCode+0x17e>
 800a764:	e1a8      	b.n	800aab8 <blinkErrorCode+0x39c>
 800a766:	4ab7      	ldr	r2, [pc, #732]	; (800aa44 <blinkErrorCode+0x328>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d02e      	beq.n	800a7ca <blinkErrorCode+0xae>
 800a76c:	4ab6      	ldr	r2, [pc, #728]	; (800aa48 <blinkErrorCode+0x32c>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	f040 81a2 	bne.w	800aab8 <blinkErrorCode+0x39c>
	{
		case 10000000:  //Error code 1
			HAL_Delay(3*delayTime);
 800a774:	4bb5      	ldr	r3, [pc, #724]	; (800aa4c <blinkErrorCode+0x330>)
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	4613      	mov	r3, r2
 800a77c:	005b      	lsls	r3, r3, #1
 800a77e:	4413      	add	r3, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f7f6 fad7 	bl	8000d34 <HAL_Delay>
			HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_SET);
 800a786:	2201      	movs	r2, #1
 800a788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a78c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a790:	f7f9 f8f6 	bl	8003980 <HAL_GPIO_WritePin>
			HAL_Delay(delayTime);
 800a794:	4bad      	ldr	r3, [pc, #692]	; (800aa4c <blinkErrorCode+0x330>)
 800a796:	881b      	ldrh	r3, [r3, #0]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7f6 facb 	bl	8000d34 <HAL_Delay>
			HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET);
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a7a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7a8:	f7f9 f8ea 	bl	8003980 <HAL_GPIO_WritePin>
			HAL_Delay(delayTime);
 800a7ac:	4ba7      	ldr	r3, [pc, #668]	; (800aa4c <blinkErrorCode+0x330>)
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7f6 fabf 	bl	8000d34 <HAL_Delay>
			HAL_Delay(3*delayTime);
 800a7b6:	4ba5      	ldr	r3, [pc, #660]	; (800aa4c <blinkErrorCode+0x330>)
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	4613      	mov	r3, r2
 800a7be:	005b      	lsls	r3, r3, #1
 800a7c0:	4413      	add	r3, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7f6 fab6 	bl	8000d34 <HAL_Delay>
			break;
 800a7c8:	e18c      	b.n	800aae4 <blinkErrorCode+0x3c8>

		case 1000000: //Error code 2
			HAL_Delay(3*delayTime);
 800a7ca:	4ba0      	ldr	r3, [pc, #640]	; (800aa4c <blinkErrorCode+0x330>)
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	4413      	add	r3, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7f6 faac 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 2 ; i++)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	61fb      	str	r3, [r7, #28]
 800a7e0:	e01a      	b.n	800a818 <blinkErrorCode+0xfc>
			{
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_SET);
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a7e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7ec:	f7f9 f8c8 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a7f0:	4b96      	ldr	r3, [pc, #600]	; (800aa4c <blinkErrorCode+0x330>)
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7f6 fa9d 	bl	8000d34 <HAL_Delay>
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET);
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a804:	f7f9 f8bc 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a808:	4b90      	ldr	r3, [pc, #576]	; (800aa4c <blinkErrorCode+0x330>)
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7f6 fa91 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 2 ; i++)
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	3301      	adds	r3, #1
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	dde1      	ble.n	800a7e2 <blinkErrorCode+0xc6>
			}
			HAL_Delay(3*delayTime);
 800a81e:	4b8b      	ldr	r3, [pc, #556]	; (800aa4c <blinkErrorCode+0x330>)
 800a820:	881b      	ldrh	r3, [r3, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	4613      	mov	r3, r2
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	4413      	add	r3, r2
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f6 fa82 	bl	8000d34 <HAL_Delay>
			break;
 800a830:	e158      	b.n	800aae4 <blinkErrorCode+0x3c8>

		case 100000: //Error code 3
			HAL_Delay(3*delayTime);
 800a832:	4b86      	ldr	r3, [pc, #536]	; (800aa4c <blinkErrorCode+0x330>)
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	4613      	mov	r3, r2
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	4413      	add	r3, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7f6 fa78 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 3 ; i++)
 800a844:	2300      	movs	r3, #0
 800a846:	61bb      	str	r3, [r7, #24]
 800a848:	e01a      	b.n	800a880 <blinkErrorCode+0x164>
			{
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_SET);
 800a84a:	2201      	movs	r2, #1
 800a84c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a854:	f7f9 f894 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a858:	4b7c      	ldr	r3, [pc, #496]	; (800aa4c <blinkErrorCode+0x330>)
 800a85a:	881b      	ldrh	r3, [r3, #0]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7f6 fa69 	bl	8000d34 <HAL_Delay>
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET);
 800a862:	2200      	movs	r2, #0
 800a864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a86c:	f7f9 f888 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a870:	4b76      	ldr	r3, [pc, #472]	; (800aa4c <blinkErrorCode+0x330>)
 800a872:	881b      	ldrh	r3, [r3, #0]
 800a874:	4618      	mov	r0, r3
 800a876:	f7f6 fa5d 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 3 ; i++)
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	3301      	adds	r3, #1
 800a87e:	61bb      	str	r3, [r7, #24]
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	2b02      	cmp	r3, #2
 800a884:	dde1      	ble.n	800a84a <blinkErrorCode+0x12e>
			}
			HAL_Delay(3*delayTime);
 800a886:	4b71      	ldr	r3, [pc, #452]	; (800aa4c <blinkErrorCode+0x330>)
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	4613      	mov	r3, r2
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	4413      	add	r3, r2
 800a892:	4618      	mov	r0, r3
 800a894:	f7f6 fa4e 	bl	8000d34 <HAL_Delay>
			break;
 800a898:	e124      	b.n	800aae4 <blinkErrorCode+0x3c8>

		case 10000: //Error code 4
			HAL_Delay(3*delayTime);
 800a89a:	4b6c      	ldr	r3, [pc, #432]	; (800aa4c <blinkErrorCode+0x330>)
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	4413      	add	r3, r2
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f6 fa44 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 4 ; i++)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	e01a      	b.n	800a8e8 <blinkErrorCode+0x1cc>
			{
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_SET);
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a8bc:	f7f9 f860 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a8c0:	4b62      	ldr	r3, [pc, #392]	; (800aa4c <blinkErrorCode+0x330>)
 800a8c2:	881b      	ldrh	r3, [r3, #0]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7f6 fa35 	bl	8000d34 <HAL_Delay>
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET);
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a8d4:	f7f9 f854 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a8d8:	4b5c      	ldr	r3, [pc, #368]	; (800aa4c <blinkErrorCode+0x330>)
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7f6 fa29 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 4 ; i++)
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	617b      	str	r3, [r7, #20]
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	dde1      	ble.n	800a8b2 <blinkErrorCode+0x196>
			}
			HAL_Delay(3*delayTime);
 800a8ee:	4b57      	ldr	r3, [pc, #348]	; (800aa4c <blinkErrorCode+0x330>)
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	005b      	lsls	r3, r3, #1
 800a8f8:	4413      	add	r3, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7f6 fa1a 	bl	8000d34 <HAL_Delay>
			break;
 800a900:	e0f0      	b.n	800aae4 <blinkErrorCode+0x3c8>

		case 1000: //Error code 5
			HAL_Delay(3*delayTime);
 800a902:	4b52      	ldr	r3, [pc, #328]	; (800aa4c <blinkErrorCode+0x330>)
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	4613      	mov	r3, r2
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	4413      	add	r3, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7f6 fa10 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 5 ; i++)
 800a914:	2300      	movs	r3, #0
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	e01a      	b.n	800a950 <blinkErrorCode+0x234>
			{
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_SET);
 800a91a:	2201      	movs	r2, #1
 800a91c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a924:	f7f9 f82c 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a928:	4b48      	ldr	r3, [pc, #288]	; (800aa4c <blinkErrorCode+0x330>)
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7f6 fa01 	bl	8000d34 <HAL_Delay>
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET);
 800a932:	2200      	movs	r2, #0
 800a934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a93c:	f7f9 f820 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a940:	4b42      	ldr	r3, [pc, #264]	; (800aa4c <blinkErrorCode+0x330>)
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	4618      	mov	r0, r3
 800a946:	f7f6 f9f5 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 5 ; i++)
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	3301      	adds	r3, #1
 800a94e:	613b      	str	r3, [r7, #16]
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	2b04      	cmp	r3, #4
 800a954:	dde1      	ble.n	800a91a <blinkErrorCode+0x1fe>
			}
			HAL_Delay(3*delayTime);
 800a956:	4b3d      	ldr	r3, [pc, #244]	; (800aa4c <blinkErrorCode+0x330>)
 800a958:	881b      	ldrh	r3, [r3, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	4613      	mov	r3, r2
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	4413      	add	r3, r2
 800a962:	4618      	mov	r0, r3
 800a964:	f7f6 f9e6 	bl	8000d34 <HAL_Delay>
			break;
 800a968:	e0bc      	b.n	800aae4 <blinkErrorCode+0x3c8>

		case 100:  //Error code 6
			HAL_Delay(3*delayTime);
 800a96a:	4b38      	ldr	r3, [pc, #224]	; (800aa4c <blinkErrorCode+0x330>)
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	4613      	mov	r3, r2
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	4413      	add	r3, r2
 800a976:	4618      	mov	r0, r3
 800a978:	f7f6 f9dc 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 6 ; i++)
 800a97c:	2300      	movs	r3, #0
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	e01a      	b.n	800a9b8 <blinkErrorCode+0x29c>
			{
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_SET);
 800a982:	2201      	movs	r2, #1
 800a984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a98c:	f7f8 fff8 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a990:	4b2e      	ldr	r3, [pc, #184]	; (800aa4c <blinkErrorCode+0x330>)
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	4618      	mov	r0, r3
 800a996:	f7f6 f9cd 	bl	8000d34 <HAL_Delay>
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET);
 800a99a:	2200      	movs	r2, #0
 800a99c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a9a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9a4:	f7f8 ffec 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a9a8:	4b28      	ldr	r3, [pc, #160]	; (800aa4c <blinkErrorCode+0x330>)
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7f6 f9c1 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 6 ; i++)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2b05      	cmp	r3, #5
 800a9bc:	dde1      	ble.n	800a982 <blinkErrorCode+0x266>
			}
			HAL_Delay(3*delayTime);
 800a9be:	4b23      	ldr	r3, [pc, #140]	; (800aa4c <blinkErrorCode+0x330>)
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	005b      	lsls	r3, r3, #1
 800a9c8:	4413      	add	r3, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7f6 f9b2 	bl	8000d34 <HAL_Delay>
			break;
 800a9d0:	e088      	b.n	800aae4 <blinkErrorCode+0x3c8>

		case 10:   //Error code 7
			HAL_Delay(3*delayTime);
 800a9d2:	4b1e      	ldr	r3, [pc, #120]	; (800aa4c <blinkErrorCode+0x330>)
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	4613      	mov	r3, r2
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	4413      	add	r3, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7f6 f9a8 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 7 ; i++)
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	60bb      	str	r3, [r7, #8]
 800a9e8:	e01a      	b.n	800aa20 <blinkErrorCode+0x304>
			{
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_SET);
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a9f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9f4:	f7f8 ffc4 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800a9f8:	4b14      	ldr	r3, [pc, #80]	; (800aa4c <blinkErrorCode+0x330>)
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f6 f999 	bl	8000d34 <HAL_Delay>
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET);
 800aa02:	2200      	movs	r2, #0
 800aa04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa0c:	f7f8 ffb8 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800aa10:	4b0e      	ldr	r3, [pc, #56]	; (800aa4c <blinkErrorCode+0x330>)
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7f6 f98d 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 7 ; i++)
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	60bb      	str	r3, [r7, #8]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2b06      	cmp	r3, #6
 800aa24:	dde1      	ble.n	800a9ea <blinkErrorCode+0x2ce>
			}
			HAL_Delay(3*delayTime);
 800aa26:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <blinkErrorCode+0x330>)
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	005b      	lsls	r3, r3, #1
 800aa30:	4413      	add	r3, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7f6 f97e 	bl	8000d34 <HAL_Delay>
			break;
 800aa38:	e054      	b.n	800aae4 <blinkErrorCode+0x3c8>
 800aa3a:	bf00      	nop
 800aa3c:	200003fc 	.word	0x200003fc
 800aa40:	000186a0 	.word	0x000186a0
 800aa44:	000f4240 	.word	0x000f4240
 800aa48:	00989680 	.word	0x00989680
 800aa4c:	200000b6 	.word	0x200000b6

		case 1:  //Error code 8
			HAL_Delay(3*delayTime);
 800aa50:	4b26      	ldr	r3, [pc, #152]	; (800aaec <blinkErrorCode+0x3d0>)
 800aa52:	881b      	ldrh	r3, [r3, #0]
 800aa54:	461a      	mov	r2, r3
 800aa56:	4613      	mov	r3, r2
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	4413      	add	r3, r2
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7f6 f969 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 8 ; i++)
 800aa62:	2300      	movs	r3, #0
 800aa64:	607b      	str	r3, [r7, #4]
 800aa66:	e01a      	b.n	800aa9e <blinkErrorCode+0x382>
			{
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_SET);
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa72:	f7f8 ff85 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800aa76:	4b1d      	ldr	r3, [pc, #116]	; (800aaec <blinkErrorCode+0x3d0>)
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7f6 f95a 	bl	8000d34 <HAL_Delay>
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET);
 800aa80:	2200      	movs	r2, #0
 800aa82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa8a:	f7f8 ff79 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(delayTime);
 800aa8e:	4b17      	ldr	r3, [pc, #92]	; (800aaec <blinkErrorCode+0x3d0>)
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7f6 f94e 	bl	8000d34 <HAL_Delay>
			for(int i = 0; i < 8 ; i++)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	607b      	str	r3, [r7, #4]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b07      	cmp	r3, #7
 800aaa2:	dde1      	ble.n	800aa68 <blinkErrorCode+0x34c>
			}
			HAL_Delay(3*delayTime);
 800aaa4:	4b11      	ldr	r3, [pc, #68]	; (800aaec <blinkErrorCode+0x3d0>)
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	4613      	mov	r3, r2
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	4413      	add	r3, r2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f6 f93f 	bl	8000d34 <HAL_Delay>
			break;
 800aab6:	e015      	b.n	800aae4 <blinkErrorCode+0x3c8>

		case 0:
			break;

		default:
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_SET);
 800aab8:	2201      	movs	r2, #1
 800aaba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aabe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aac2:	f7f8 ff5d 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 800aac6:	2064      	movs	r0, #100	; 0x64
 800aac8:	f7f6 f934 	bl	8000d34 <HAL_Delay>
				HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET);
 800aacc:	2200      	movs	r2, #0
 800aace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aad6:	f7f8 ff53 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_Delay(50);
 800aada:	2032      	movs	r0, #50	; 0x32
 800aadc:	f7f6 f92a 	bl	8000d34 <HAL_Delay>
			break;
 800aae0:	e000      	b.n	800aae4 <blinkErrorCode+0x3c8>
			break;
 800aae2:	bf00      	nop

	}
}
 800aae4:	bf00      	nop
 800aae6:	3720      	adds	r7, #32
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	200000b6 	.word	0x200000b6

0800aaf0 <goToSleep>:
//**********************************************************************************************************************************************************
void goToSleep() //puts the board to sleep
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0
	goToSleepFlag = 0; //reset flag
 800aaf4:	4b2e      	ldr	r3, [pc, #184]	; (800abb0 <goToSleep+0xc0>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CB_En_GPIO_Port,CB_En_Pin, GPIO_PIN_RESET); //disconnect load
 800aafa:	2200      	movs	r2, #0
 800aafc:	2101      	movs	r1, #1
 800aafe:	482d      	ldr	r0, [pc, #180]	; (800abb4 <goToSleep+0xc4>)
 800ab00:	f7f8 ff3e 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VC_En_GPIO_Port,VC_En_Pin, GPIO_PIN_RESET); //disable voltage measurements
 800ab04:	2200      	movs	r2, #0
 800ab06:	2104      	movs	r1, #4
 800ab08:	482a      	ldr	r0, [pc, #168]	; (800abb4 <goToSleep+0xc4>)
 800ab0a:	f7f8 ff39 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Temp_En_GPIO_Port,Temp_En_Pin, GPIO_PIN_RESET); //disconnect thermistors
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2120      	movs	r1, #32
 800ab12:	4829      	ldr	r0, [pc, #164]	; (800abb8 <goToSleep+0xc8>)
 800ab14:	f7f8 ff34 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_RESET); //stop discharging Cell 1
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2140      	movs	r1, #64	; 0x40
 800ab1c:	4826      	ldr	r0, [pc, #152]	; (800abb8 <goToSleep+0xc8>)
 800ab1e:	f7f8 ff2f 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_RESET); //stop discharging Cell 2
 800ab22:	2200      	movs	r2, #0
 800ab24:	2180      	movs	r1, #128	; 0x80
 800ab26:	4824      	ldr	r0, [pc, #144]	; (800abb8 <goToSleep+0xc8>)
 800ab28:	f7f8 ff2a 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_RESET); //stop discharging Cell 3
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab32:	4821      	ldr	r0, [pc, #132]	; (800abb8 <goToSleep+0xc8>)
 800ab34:	f7f8 ff24 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_RESET); //stop discharging Cell 4
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab3e:	481e      	ldr	r0, [pc, #120]	; (800abb8 <goToSleep+0xc8>)
 800ab40:	f7f8 ff1e 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_RESET); //stop discharging Cell 5
 800ab44:	2200      	movs	r2, #0
 800ab46:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab4e:	f7f8 ff17 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_RESET); //stop discharging Cell 6
 800ab52:	2200      	movs	r2, #0
 800ab54:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab5c:	f7f8 ff10 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(timingPin_GPIO_Port,timingPin_Pin, GPIO_PIN_RESET); //turn off green LED
 800ab60:	2200      	movs	r2, #0
 800ab62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab6a:	f7f8 ff09 	bl	8003980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CANmode_GPIO_Port,CANmode_Pin, GPIO_PIN_SET); //pull CAN tranceiver mode setting pin high to set it to low power mode
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ab74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab78:	f7f8 ff02 	bl	8003980 <HAL_GPIO_WritePin>

	//stop the PWM going to the buck-boost converter MOSFETs
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1); //PMOS
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	480f      	ldr	r0, [pc, #60]	; (800abbc <goToSleep+0xcc>)
 800ab80:	f7fa fb8e 	bl	80052a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2); //NMOS
 800ab84:	2104      	movs	r1, #4
 800ab86:	480d      	ldr	r0, [pc, #52]	; (800abbc <goToSleep+0xcc>)
 800ab88:	f7fa fb8a 	bl	80052a0 <HAL_TIM_PWM_Stop>

	HAL_SuspendTick(); //suspend sis tick in order for the sis tick interrupt not to wake the device up
 800ab8c:	f7f6 f8f4 	bl	8000d78 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); //enter stop mode by enabling low power regulator and waiting for an interrupt to wake up
 800ab90:	2101      	movs	r1, #1
 800ab92:	2001      	movs	r0, #1
 800ab94:	f7f8 ff24 	bl	80039e0 <HAL_PWR_EnterSTOPMode>

	//EXITING SLEEP MODE
	SystemClock_Config(); //re-initialise all the clocks
 800ab98:	f7fc fec2 	bl	8007920 <SystemClock_Config>
	HAL_ResumeTick(); //resume so we can work with HAL_Delay
 800ab9c:	f7f6 f8fc 	bl	8000d98 <HAL_ResumeTick>
	HAL_UART_Receive_DMA(&huart3,TxRx_data,8); //re-enable DMA for UART
 800aba0:	2208      	movs	r2, #8
 800aba2:	4907      	ldr	r1, [pc, #28]	; (800abc0 <goToSleep+0xd0>)
 800aba4:	4807      	ldr	r0, [pc, #28]	; (800abc4 <goToSleep+0xd4>)
 800aba6:	f7fb fdab 	bl	8006700 <HAL_UART_Receive_DMA>
	//no need to re-enable anything else here because sleep calls the main once exited using the GO TO statement
}
 800abaa:	bf00      	nop
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	20000311 	.word	0x20000311
 800abb4:	48000400 	.word	0x48000400
 800abb8:	48000800 	.word	0x48000800
 800abbc:	200012e8 	.word	0x200012e8
 800abc0:	200012e0 	.word	0x200012e0
 800abc4:	200004a8 	.word	0x200004a8

0800abc8 <CAN_FilterConfig>:

//**********************************************************************************************************************************************************
static void CAN_FilterConfig(void) //configures the CANbus filter
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08a      	sub	sp, #40	; 0x28
 800abcc:	af00      	add	r7, sp, #0
  CAN_FilterConfTypeDef  sFilterConfig;
  sFilterConfig.FilterNumber = 0;					 //Specifies the filter which will be initialized
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;	 //Specifies the filter mode to be initialized
 800abd2:	2300      	movs	r3, #0
 800abd4:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //Specifies the filter scale
 800abd6:	2301      	movs	r3, #1
 800abd8:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x000 <<5;  //0x124   //Specifies the filter identification number (MSBs for a 32-bit configuration, first one for a 16-bit configuration). shift by 5 is necessary
 800abda:	2300      	movs	r3, #0
 800abdc:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;                //Specifies the filter identification number (LSBs for a 32-bit configuration, second one for a 16-bit configuration).
 800abde:	2300      	movs	r3, #0
 800abe0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000; //0xFFE0	 //Specifies the filter mask number or identification number, according to the mode (MSBs for a 32-bit configuration,first one for a 16-bit configuration).
 800abe2:	2300      	movs	r3, #0
 800abe4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;            //Specifies the filter mask number or identification number, according to the mode (LSBs for a 32-bit configuration, second one for a 16-bit configuration).
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = 0;			 //Specifies the FIFO (0 or 1) which will be assigned to the filter.
 800abea:	2300      	movs	r3, #0
 800abec:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;			 //Enable or disable the filter
 800abee:	2301      	movs	r3, #1
 800abf0:	623b      	str	r3, [r7, #32]
  sFilterConfig.BankNumber = 14;					 //Select the start slave bank filter
 800abf2:	230e      	movs	r3, #14
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800abf6:	463b      	mov	r3, r7
 800abf8:	4619      	mov	r1, r3
 800abfa:	4806      	ldr	r0, [pc, #24]	; (800ac14 <CAN_FilterConfig+0x4c>)
 800abfc:	f7f7 fb9f 	bl	800233e <HAL_CAN_ConfigFilter>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <CAN_FilterConfig+0x42>
  {
    /* Filter configuration Error */
    Error_Handler();
 800ac06:	f000 fb35 	bl	800b274 <Error_Handler>
  }
}
 800ac0a:	bf00      	nop
 800ac0c:	3728      	adds	r7, #40	; 0x28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	2000056c 	.word	0x2000056c

0800ac18 <HAL_CAN_RxCpltCallback>:
//CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--CALLBACKS--
//**********************************************************************************************************************************************************

//**********************************************************************************************************************************************************
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* CanHandle) //called when there is incoming traffic on the CAN bus
{
 800ac18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac1a:	b091      	sub	sp, #68	; 0x44
 800ac1c:	af0a      	add	r7, sp, #40	; 0x28
 800ac1e:	60f8      	str	r0, [r7, #12]
	//puts data received from CAN into a character buffer
	for (uint8_t i = 0; i < 8;i++)
 800ac20:	2300      	movs	r3, #0
 800ac22:	75fb      	strb	r3, [r7, #23]
 800ac24:	e00a      	b.n	800ac3c <HAL_CAN_RxCpltCallback+0x24>
	{
		CanRxData[i] = CanHandle->pRxMsg->Data[i];
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ac2a:	7dfa      	ldrb	r2, [r7, #23]
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	440a      	add	r2, r1
 800ac30:	7d11      	ldrb	r1, [r2, #20]
 800ac32:	4a44      	ldr	r2, [pc, #272]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800ac34:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8;i++)
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	75fb      	strb	r3, [r7, #23]
 800ac3c:	7dfb      	ldrb	r3, [r7, #23]
 800ac3e:	2b07      	cmp	r3, #7
 800ac40:	d9f1      	bls.n	800ac26 <HAL_CAN_RxCpltCallback+0xe>
	}

	//CAN code structure XXXNNNNN where XXX will be a 3 character opcode and NNNNN will be a 5 digit integer operand
	for (uint8_t i = 3; i < 8;i++)
 800ac42:	2303      	movs	r3, #3
 800ac44:	75bb      	strb	r3, [r7, #22]
 800ac46:	e00b      	b.n	800ac60 <HAL_CAN_RxCpltCallback+0x48>
	{
		parsedOperand[i-3] = CanHandle->pRxMsg->Data[i];//CanRxData[i];
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ac4c:	7dba      	ldrb	r2, [r7, #22]
 800ac4e:	7dbb      	ldrb	r3, [r7, #22]
 800ac50:	3b03      	subs	r3, #3
 800ac52:	440a      	add	r2, r1
 800ac54:	7d11      	ldrb	r1, [r2, #20]
 800ac56:	4a3c      	ldr	r2, [pc, #240]	; (800ad48 <HAL_CAN_RxCpltCallback+0x130>)
 800ac58:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 3; i < 8;i++)
 800ac5a:	7dbb      	ldrb	r3, [r7, #22]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	75bb      	strb	r3, [r7, #22]
 800ac60:	7dbb      	ldrb	r3, [r7, #22]
 800ac62:	2b07      	cmp	r3, #7
 800ac64:	d9f0      	bls.n	800ac48 <HAL_CAN_RxCpltCallback+0x30>
		//CanRxData[i] = CanHandle->pRxMsg->Data[i];
	}

	operand = atoi(parsedOperand);
 800ac66:	4838      	ldr	r0, [pc, #224]	; (800ad48 <HAL_CAN_RxCpltCallback+0x130>)
 800ac68:	f000 ff47 	bl	800bafa <atoi>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	461a      	mov	r2, r3
 800ac70:	4b36      	ldr	r3, [pc, #216]	; (800ad4c <HAL_CAN_RxCpltCallback+0x134>)
 800ac72:	601a      	str	r2, [r3, #0]
	HAL_CAN_Receive_IT(CanHandle, CAN_FIFO0);
 800ac74:	2100      	movs	r1, #0
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f7f7 fdea 	bl	8002850 <HAL_CAN_Receive_IT>
	sprintf(msg,"BMSCharger MK2: message received from CAN: %c%c%c%c%c%c%c%c -- Opcode: %c%c%c -- Operand: %u \r\n",CanRxData[0],CanRxData[1],CanRxData[2],CanRxData[3],CanRxData[4],CanRxData[5],CanRxData[6],CanRxData[7],CanRxData[0],CanRxData[1],CanRxData[2],operand);
 800ac7c:	4b31      	ldr	r3, [pc, #196]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	469c      	mov	ip, r3
 800ac84:	4b2f      	ldr	r3, [pc, #188]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800ac86:	785b      	ldrb	r3, [r3, #1]
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	469e      	mov	lr, r3
 800ac8c:	4b2d      	ldr	r3, [pc, #180]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800ac8e:	789b      	ldrb	r3, [r3, #2]
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	461a      	mov	r2, r3
 800ac94:	4b2b      	ldr	r3, [pc, #172]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800ac96:	78db      	ldrb	r3, [r3, #3]
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4b29      	ldr	r3, [pc, #164]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800ac9e:	791b      	ldrb	r3, [r3, #4]
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	4618      	mov	r0, r3
 800aca4:	4b27      	ldr	r3, [pc, #156]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800aca6:	795b      	ldrb	r3, [r3, #5]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	461c      	mov	r4, r3
 800acac:	4b25      	ldr	r3, [pc, #148]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800acae:	799b      	ldrb	r3, [r3, #6]
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	461d      	mov	r5, r3
 800acb4:	4b23      	ldr	r3, [pc, #140]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800acb6:	79db      	ldrb	r3, [r3, #7]
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	461e      	mov	r6, r3
 800acbc:	4b21      	ldr	r3, [pc, #132]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	60bb      	str	r3, [r7, #8]
 800acc4:	4b1f      	ldr	r3, [pc, #124]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800acc6:	785b      	ldrb	r3, [r3, #1]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	607b      	str	r3, [r7, #4]
 800accc:	4b1d      	ldr	r3, [pc, #116]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800acce:	789b      	ldrb	r3, [r3, #2]
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	603b      	str	r3, [r7, #0]
 800acd4:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <HAL_CAN_RxCpltCallback+0x134>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	9309      	str	r3, [sp, #36]	; 0x24
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	9308      	str	r3, [sp, #32]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	9307      	str	r3, [sp, #28]
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	9306      	str	r3, [sp, #24]
 800ace6:	9605      	str	r6, [sp, #20]
 800ace8:	9504      	str	r5, [sp, #16]
 800acea:	9403      	str	r4, [sp, #12]
 800acec:	9002      	str	r0, [sp, #8]
 800acee:	9101      	str	r1, [sp, #4]
 800acf0:	9200      	str	r2, [sp, #0]
 800acf2:	4673      	mov	r3, lr
 800acf4:	4662      	mov	r2, ip
 800acf6:	4916      	ldr	r1, [pc, #88]	; (800ad50 <HAL_CAN_RxCpltCallback+0x138>)
 800acf8:	4816      	ldr	r0, [pc, #88]	; (800ad54 <HAL_CAN_RxCpltCallback+0x13c>)
 800acfa:	f000 ff35 	bl	800bb68 <siprintf>
	HAL_UART_Transmit(&huart3,msg,strlen(msg),HAL_MAX_DELAY);
 800acfe:	4815      	ldr	r0, [pc, #84]	; (800ad54 <HAL_CAN_RxCpltCallback+0x13c>)
 800ad00:	f7f5 fa78 	bl	80001f4 <strlen>
 800ad04:	4603      	mov	r3, r0
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	f04f 33ff 	mov.w	r3, #4294967295
 800ad0c:	4911      	ldr	r1, [pc, #68]	; (800ad54 <HAL_CAN_RxCpltCallback+0x13c>)
 800ad0e:	4812      	ldr	r0, [pc, #72]	; (800ad58 <HAL_CAN_RxCpltCallback+0x140>)
 800ad10:	f7fb fc69 	bl	80065e6 <HAL_UART_Transmit>

	opCode[0] = CanRxData[0];
 800ad14:	4b0b      	ldr	r3, [pc, #44]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	4b10      	ldr	r3, [pc, #64]	; (800ad5c <HAL_CAN_RxCpltCallback+0x144>)
 800ad1c:	701a      	strb	r2, [r3, #0]
	opCode[1] = CanRxData[1];
 800ad1e:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800ad20:	785b      	ldrb	r3, [r3, #1]
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	4b0d      	ldr	r3, [pc, #52]	; (800ad5c <HAL_CAN_RxCpltCallback+0x144>)
 800ad26:	705a      	strb	r2, [r3, #1]
	opCode[2] = CanRxData[2];
 800ad28:	4b06      	ldr	r3, [pc, #24]	; (800ad44 <HAL_CAN_RxCpltCallback+0x12c>)
 800ad2a:	789b      	ldrb	r3, [r3, #2]
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	4b0b      	ldr	r3, [pc, #44]	; (800ad5c <HAL_CAN_RxCpltCallback+0x144>)
 800ad30:	709a      	strb	r2, [r3, #2]

	operationFromCan = 1;
 800ad32:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <HAL_CAN_RxCpltCallback+0x148>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	701a      	strb	r2, [r3, #0]
	executeOperation();
 800ad38:	f7fe fa44 	bl	80091c4 <executeOperation>
}
 800ad3c:	bf00      	nop
 800ad3e:	371c      	adds	r7, #28
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad44:	20000304 	.word	0x20000304
 800ad48:	200002b8 	.word	0x200002b8
 800ad4c:	200002c0 	.word	0x200002c0
 800ad50:	0800dcb0 	.word	0x0800dcb0
 800ad54:	200005b0 	.word	0x200005b0
 800ad58:	200004a8 	.word	0x200004a8
 800ad5c:	20002128 	.word	0x20002128
 800ad60:	20000313 	.word	0x20000313

0800ad64 <HAL_ADC_ConvCpltCallback>:


//**********************************************************************************************************************************************************
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) //called when the DMA has filled the entire buffer
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 800ad6c:	4807      	ldr	r0, [pc, #28]	; (800ad8c <HAL_ADC_ConvCpltCallback+0x28>)
 800ad6e:	f7f6 fb4d 	bl	800140c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 800ad72:	4807      	ldr	r0, [pc, #28]	; (800ad90 <HAL_ADC_ConvCpltCallback+0x2c>)
 800ad74:	f7f6 fb4a 	bl	800140c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc3);
 800ad78:	4806      	ldr	r0, [pc, #24]	; (800ad94 <HAL_ADC_ConvCpltCallback+0x30>)
 800ad7a:	f7f6 fb47 	bl	800140c <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc4);
 800ad7e:	4806      	ldr	r0, [pc, #24]	; (800ad98 <HAL_ADC_ConvCpltCallback+0x34>)
 800ad80:	f7f6 fb44 	bl	800140c <HAL_ADC_Stop_DMA>
}
 800ad84:	bf00      	nop
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	200007f4 	.word	0x200007f4
 800ad90:	20000518 	.word	0x20000518
 800ad94:	20000848 	.word	0x20000848
 800ad98:	20002fec 	.word	0x20002fec
 800ad9c:	00000000 	.word	0x00000000

0800ada0 <HAL_TIM_PeriodElapsedCallback>:

//**********************************************************************************************************************************************************
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //core loop running on timer interrupt at 500 Hz
{
 800ada0:	b5b0      	push	{r4, r5, r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
		static uint16_t counter = 0;
		static uint16_t cellBalanceCounter = 0;
		static uint8_t buckToBoostHandoverTimer = 0;
		static uint8_t balanceEnableTimer = 0;

		updateADC1Vars();
 800ada8:	f7fd fbc8 	bl	800853c <updateADC1Vars>
		updateADC2Vars();
 800adac:	f7fd fb58 	bl	8008460 <updateADC2Vars>
		updateADC3Vars();
 800adb0:	f7fd fb02 	bl	80083b8 <updateADC3Vars>
		updateADC4Vars();
 800adb4:	f7fd fc3a 	bl	800862c <updateADC4Vars>
		calculateActualValues();
 800adb8:	f7fd fc9e 	bl	80086f8 <calculateActualValues>
		counter++;
 800adbc:	4baa      	ldr	r3, [pc, #680]	; (800b068 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	3301      	adds	r3, #1
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	4ba8      	ldr	r3, [pc, #672]	; (800b068 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800adc6:	801a      	strh	r2, [r3, #0]
		cellBalanceCounter++;
 800adc8:	4ba8      	ldr	r3, [pc, #672]	; (800b06c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	3301      	adds	r3, #1
 800adce:	b29a      	uxth	r2, r3
 800add0:	4ba6      	ldr	r3, [pc, #664]	; (800b06c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800add2:	801a      	strh	r2, [r3, #0]

			if (counter == 500) //loop runs @ 1Hz
 800add4:	4ba4      	ldr	r3, [pc, #656]	; (800b068 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800addc:	f040 80b6 	bne.w	800af4c <HAL_TIM_PeriodElapsedCallback+0x1ac>
			{
				calculateTemps();
 800ade0:	f7fd fee6 	bl	8008bb0 <calculateTemps>
				healthCheck();
 800ade4:	f7ff fa9c 	bl	800a320 <healthCheck>

				//************************************************************************ SWITCHES FROM BUCK TO BOOST *************************************************************
				counter = 0;
 800ade8:	4b9f      	ldr	r3, [pc, #636]	; (800b068 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800adea:	2200      	movs	r2, #0
 800adec:	801a      	strh	r2, [r3, #0]

				//makes sure that the bucking current has been low for 10 sec, indicating that we can't buck anymore so as to switch to boost
				if (((IOutChg*1000) < (currentLimit/2)) && (boostEnable == 0) && (balancingComplete == 0) && (chargerEnable == 1))
 800adee:	4ba0      	ldr	r3, [pc, #640]	; (800b070 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800adf0:	edd3 7a00 	vldr	s15, [r3]
 800adf4:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800b074 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 800adf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800adfc:	4b9e      	ldr	r3, [pc, #632]	; (800b078 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800adfe:	edd3 6a00 	vldr	s13, [r3]
 800ae02:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800ae06:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ae0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae12:	d524      	bpl.n	800ae5e <HAL_TIM_PeriodElapsedCallback+0xbe>
 800ae14:	4b99      	ldr	r3, [pc, #612]	; (800b07c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f083 0301 	eor.w	r3, r3, #1
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d01d      	beq.n	800ae5e <HAL_TIM_PeriodElapsedCallback+0xbe>
 800ae22:	4b97      	ldr	r3, [pc, #604]	; (800b080 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	f083 0301 	eor.w	r3, r3, #1
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d016      	beq.n	800ae5e <HAL_TIM_PeriodElapsedCallback+0xbe>
 800ae30:	4b94      	ldr	r3, [pc, #592]	; (800b084 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d012      	beq.n	800ae5e <HAL_TIM_PeriodElapsedCallback+0xbe>
				{
					buckToBoostHandoverTimer++;
 800ae38:	4b93      	ldr	r3, [pc, #588]	; (800b088 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	4b91      	ldr	r3, [pc, #580]	; (800b088 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800ae42:	701a      	strb	r2, [r3, #0]
					if (buckToBoostHandoverTimer == 10)
 800ae44:	4b90      	ldr	r3, [pc, #576]	; (800b088 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	2b0a      	cmp	r3, #10
 800ae4a:	d10b      	bne.n	800ae64 <HAL_TIM_PeriodElapsedCallback+0xc4>
					{
					  buckToBoostHandoverTimer = 0;
 800ae4c:	4b8e      	ldr	r3, [pc, #568]	; (800b088 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	701a      	strb	r2, [r3, #0]
					  initialisePIDController();
 800ae52:	f7fe f94b 	bl	80090ec <initialisePIDController>
					  boostEnable = 1;
 800ae56:	4b89      	ldr	r3, [pc, #548]	; (800b07c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800ae58:	2201      	movs	r2, #1
 800ae5a:	701a      	strb	r2, [r3, #0]
					if (buckToBoostHandoverTimer == 10)
 800ae5c:	e002      	b.n	800ae64 <HAL_TIM_PeriodElapsedCallback+0xc4>
					}
				 }
				 else {buckToBoostHandoverTimer = 0;} //resets the timer
 800ae5e:	4b8a      	ldr	r3, [pc, #552]	; (800b088 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	701a      	strb	r2, [r3, #0]

				//************************************************************************ DEALS WITH BALANCING *************************************************************
				//if current is less than c/10 and balancing is not complete and charger is enabled and voltage is below setPoint by 500mV or above setPoint by 50mV and 20 seconds have passed then enable balancing
				if  ( ((IOutChg*1000) < (currentLimit/10)) && ((IOutChg*1000) < (200)) && (balancingComplete == 0) && (chargerEnable == 1) && (VC6 > (setpoint_V - 0.500)) && (VC6 < (setpoint_V + 0.050)))
 800ae64:	4b82      	ldr	r3, [pc, #520]	; (800b070 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800ae66:	edd3 7a00 	vldr	s15, [r3]
 800ae6a:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800b074 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 800ae6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ae72:	4b81      	ldr	r3, [pc, #516]	; (800b078 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800ae74:	edd3 6a00 	vldr	s13, [r3]
 800ae78:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800ae7c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ae80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae88:	d55d      	bpl.n	800af46 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 800ae8a:	4b79      	ldr	r3, [pc, #484]	; (800b070 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800ae8c:	edd3 7a00 	vldr	s15, [r3]
 800ae90:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800b074 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 800ae94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae98:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800b08c <HAL_TIM_PeriodElapsedCallback+0x2ec>
 800ae9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea4:	d54f      	bpl.n	800af46 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 800aea6:	4b76      	ldr	r3, [pc, #472]	; (800b080 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	f083 0301 	eor.w	r3, r3, #1
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d048      	beq.n	800af46 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 800aeb4:	4b73      	ldr	r3, [pc, #460]	; (800b084 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d044      	beq.n	800af46 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 800aebc:	4b74      	ldr	r3, [pc, #464]	; (800b090 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7f5 fb59 	bl	8000578 <__aeabi_f2d>
 800aec6:	4604      	mov	r4, r0
 800aec8:	460d      	mov	r5, r1
 800aeca:	4b72      	ldr	r3, [pc, #456]	; (800b094 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f7f5 fb52 	bl	8000578 <__aeabi_f2d>
 800aed4:	f04f 0200 	mov.w	r2, #0
 800aed8:	4b6f      	ldr	r3, [pc, #444]	; (800b098 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800aeda:	f7f5 f9ed 	bl	80002b8 <__aeabi_dsub>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4620      	mov	r0, r4
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7f5 fe2f 	bl	8000b48 <__aeabi_dcmpgt>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d02a      	beq.n	800af46 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 800aef0:	4b67      	ldr	r3, [pc, #412]	; (800b090 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7f5 fb3f 	bl	8000578 <__aeabi_f2d>
 800aefa:	4604      	mov	r4, r0
 800aefc:	460d      	mov	r5, r1
 800aefe:	4b65      	ldr	r3, [pc, #404]	; (800b094 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4618      	mov	r0, r3
 800af04:	f7f5 fb38 	bl	8000578 <__aeabi_f2d>
 800af08:	a355      	add	r3, pc, #340	; (adr r3, 800b060 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	f7f5 f9d5 	bl	80002bc <__adddf3>
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	4620      	mov	r0, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	f7f5 fdf7 	bl	8000b0c <__aeabi_dcmplt>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d010      	beq.n	800af46 <HAL_TIM_PeriodElapsedCallback+0x1a6>
				 {
					balanceEnableTimer++;
 800af24:	4b5d      	ldr	r3, [pc, #372]	; (800b09c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	3301      	adds	r3, #1
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	4b5b      	ldr	r3, [pc, #364]	; (800b09c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800af2e:	701a      	strb	r2, [r3, #0]
					if (balanceEnableTimer == 20)
 800af30:	4b5a      	ldr	r3, [pc, #360]	; (800b09c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b14      	cmp	r3, #20
 800af36:	d109      	bne.n	800af4c <HAL_TIM_PeriodElapsedCallback+0x1ac>
					{
						balanceEnableTimer = 0;
 800af38:	4b58      	ldr	r3, [pc, #352]	; (800b09c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
						balanceEnable = 1;
 800af3e:	4b58      	ldr	r3, [pc, #352]	; (800b0a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800af40:	2201      	movs	r2, #1
 800af42:	701a      	strb	r2, [r3, #0]
					if (balanceEnableTimer == 20)
 800af44:	e002      	b.n	800af4c <HAL_TIM_PeriodElapsedCallback+0x1ac>
					}
				 }
				else{balanceEnableTimer = 0;}
 800af46:	4b55      	ldr	r3, [pc, #340]	; (800b09c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800af48:	2200      	movs	r2, #0
 800af4a:	701a      	strb	r2, [r3, #0]
			  }


			if ((cellBalanceCounter == 2500) && (balanceEnable == 1)  && (chargerEnable == 1)) //enable cell voltage measurements after 5 seconds for 1 cycle
 800af4c:	4b47      	ldr	r3, [pc, #284]	; (800b06c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800af54:	4293      	cmp	r3, r2
 800af56:	d10d      	bne.n	800af74 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 800af58:	4b51      	ldr	r3, [pc, #324]	; (800b0a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d009      	beq.n	800af74 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 800af60:	4b48      	ldr	r3, [pc, #288]	; (800b084 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d005      	beq.n	800af74 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			{
				blockCellVoltageUpdating = 0;
 800af68:	4b4e      	ldr	r3, [pc, #312]	; (800b0a4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	701a      	strb	r2, [r3, #0]
				cellBalanceCounter = 0;
 800af6e:	4b3f      	ldr	r3, [pc, #252]	; (800b06c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800af70:	2200      	movs	r2, #0
 800af72:	801a      	strh	r2, [r3, #0]
			}

			//if charge current is one tenth the set point,
			if ((cellBalanceCounter == 1) && (chargerEnable == 1) && (balanceEnable == 1))
 800af74:	4b3d      	ldr	r3, [pc, #244]	; (800b06c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d10c      	bne.n	800af96 <HAL_TIM_PeriodElapsedCallback+0x1f6>
 800af7c:	4b41      	ldr	r3, [pc, #260]	; (800b084 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d008      	beq.n	800af96 <HAL_TIM_PeriodElapsedCallback+0x1f6>
 800af84:	4b46      	ldr	r3, [pc, #280]	; (800b0a0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d004      	beq.n	800af96 <HAL_TIM_PeriodElapsedCallback+0x1f6>
			{
				balanceCells();				 //configure the balancer, ie start bleeding current
 800af8c:	f7fe ffe4 	bl	8009f58 <balanceCells>
				blockCellVoltageUpdating = 1; //stop updating voltage
 800af90:	4b44      	ldr	r3, [pc, #272]	; (800b0a4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800af92:	2201      	movs	r2, #1
 800af94:	701a      	strb	r2, [r3, #0]
			}

			//allows the cells to sit for 1 second without after 4 second of balancing have elapsed
			if ((cellBalanceCounter == 2000)&&(blockCellVoltageUpdating == 1) && (chargerEnable == 1))
 800af96:	4b35      	ldr	r3, [pc, #212]	; (800b06c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800af9e:	d12b      	bne.n	800aff8 <HAL_TIM_PeriodElapsedCallback+0x258>
 800afa0:	4b40      	ldr	r3, [pc, #256]	; (800b0a4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d027      	beq.n	800aff8 <HAL_TIM_PeriodElapsedCallback+0x258>
 800afa8:	4b36      	ldr	r3, [pc, #216]	; (800b084 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d023      	beq.n	800aff8 <HAL_TIM_PeriodElapsedCallback+0x258>
			{
				HAL_GPIO_WritePin(BalC1_GPIO_Port,BalC1_Pin, GPIO_PIN_RESET);
 800afb0:	2200      	movs	r2, #0
 800afb2:	2140      	movs	r1, #64	; 0x40
 800afb4:	483c      	ldr	r0, [pc, #240]	; (800b0a8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800afb6:	f7f8 fce3 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC2_GPIO_Port,BalC2_Pin, GPIO_PIN_RESET);
 800afba:	2200      	movs	r2, #0
 800afbc:	2180      	movs	r1, #128	; 0x80
 800afbe:	483a      	ldr	r0, [pc, #232]	; (800b0a8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800afc0:	f7f8 fcde 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC3_GPIO_Port,BalC3_Pin, GPIO_PIN_RESET);
 800afc4:	2200      	movs	r2, #0
 800afc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800afca:	4837      	ldr	r0, [pc, #220]	; (800b0a8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800afcc:	f7f8 fcd8 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC4_GPIO_Port,BalC4_Pin, GPIO_PIN_RESET);
 800afd0:	2200      	movs	r2, #0
 800afd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afd6:	4834      	ldr	r0, [pc, #208]	; (800b0a8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800afd8:	f7f8 fcd2 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC5_GPIO_Port,BalC5_Pin, GPIO_PIN_RESET);
 800afdc:	2200      	movs	r2, #0
 800afde:	f44f 7180 	mov.w	r1, #256	; 0x100
 800afe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800afe6:	f7f8 fccb 	bl	8003980 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BalC6_GPIO_Port,BalC6_Pin, GPIO_PIN_RESET);
 800afea:	2200      	movs	r2, #0
 800afec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aff4:	f7f8 fcc4 	bl	8003980 <HAL_GPIO_WritePin>
			}

			//since ADC runs in single shot with DMA, re-enable them a soon as you calculate vars
			 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc1Buffer, adc1BufferSize);
 800aff8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800affc:	492b      	ldr	r1, [pc, #172]	; (800b0ac <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800affe:	482c      	ldr	r0, [pc, #176]	; (800b0b0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800b000:	f7f6 f8e8 	bl	80011d4 <HAL_ADC_Start_DMA>
			 HAL_ADC_Start_DMA(&hadc2,(uint32_t*)adc2Buffer, adc2BufferSize);
 800b004:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800b008:	492a      	ldr	r1, [pc, #168]	; (800b0b4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800b00a:	482b      	ldr	r0, [pc, #172]	; (800b0b8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800b00c:	f7f6 f8e2 	bl	80011d4 <HAL_ADC_Start_DMA>
			 HAL_ADC_Start_DMA(&hadc3,(uint32_t*)adc3Buffer, adc3BufferSize);
 800b010:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b014:	4929      	ldr	r1, [pc, #164]	; (800b0bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800b016:	482a      	ldr	r0, [pc, #168]	; (800b0c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800b018:	f7f6 f8dc 	bl	80011d4 <HAL_ADC_Start_DMA>
			 HAL_ADC_Start_DMA(&hadc4,(uint32_t*)adc4Buffer, adc4BufferSize);
 800b01c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b020:	4928      	ldr	r1, [pc, #160]	; (800b0c4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800b022:	4829      	ldr	r0, [pc, #164]	; (800b0c8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800b024:	f7f6 f8d6 	bl	80011d4 <HAL_ADC_Start_DMA>

			 if ((chargerEnable == 1) && (balancingComplete == 0))
 800b028:	4b16      	ldr	r3, [pc, #88]	; (800b084 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d009      	beq.n	800b044 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 800b030:	4b13      	ldr	r3, [pc, #76]	; (800b080 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	f083 0301 	eor.w	r3, r3, #1
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <HAL_TIM_PeriodElapsedCallback+0x2a4>
			 {
				 applyPID();
 800b03e:	f7fe fd63 	bl	8009b08 <applyPID>
 800b042:	e006      	b.n	800b052 <HAL_TIM_PeriodElapsedCallback+0x2b2>
			 }
			 else
			 {
				 TIM1->CCR1 = 1001; //turn off NMOS
 800b044:	4b21      	ldr	r3, [pc, #132]	; (800b0cc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800b046:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b04a:	635a      	str	r2, [r3, #52]	; 0x34
				 TIM1->CCR2 = 0; //turn off PMOS
 800b04c:	4b1f      	ldr	r3, [pc, #124]	; (800b0cc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800b04e:	2200      	movs	r2, #0
 800b050:	639a      	str	r2, [r3, #56]	; 0x38
			 }

}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bdb0      	pop	{r4, r5, r7, pc}
 800b05a:	bf00      	nop
 800b05c:	f3af 8000 	nop.w
 800b060:	9999999a 	.word	0x9999999a
 800b064:	3fa99999 	.word	0x3fa99999
 800b068:	20000400 	.word	0x20000400
 800b06c:	20000402 	.word	0x20000402
 800b070:	200003f4 	.word	0x200003f4
 800b074:	447a0000 	.word	0x447a0000
 800b078:	20000098 	.word	0x20000098
 800b07c:	2000030c 	.word	0x2000030c
 800b080:	2000030e 	.word	0x2000030e
 800b084:	2000030d 	.word	0x2000030d
 800b088:	20000404 	.word	0x20000404
 800b08c:	43480000 	.word	0x43480000
 800b090:	200003d4 	.word	0x200003d4
 800b094:	2000009c 	.word	0x2000009c
 800b098:	3fe00000 	.word	0x3fe00000
 800b09c:	20000405 	.word	0x20000405
 800b0a0:	2000030f 	.word	0x2000030f
 800b0a4:	20000310 	.word	0x20000310
 800b0a8:	48000800 	.word	0x48000800
 800b0ac:	20001328 	.word	0x20001328
 800b0b0:	200007f4 	.word	0x200007f4
 800b0b4:	2000212c 	.word	0x2000212c
 800b0b8:	20000518 	.word	0x20000518
 800b0bc:	200008e0 	.word	0x200008e0
 800b0c0:	20000848 	.word	0x20000848
 800b0c4:	200023ac 	.word	0x200023ac
 800b0c8:	20002fec 	.word	0x20002fec
 800b0cc:	40012c00 	.word	0x40012c00

0800b0d0 <HAL_UART_RxCpltCallback>:


//**********************************************************************************************************************************************************
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //called when UART receives data
{
 800b0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0d2:	b091      	sub	sp, #68	; 0x44
 800b0d4:	af0a      	add	r7, sp, #40	; 0x28
 800b0d6:	60f8      	str	r0, [r7, #12]
	//parser code structure XXXNNNNN where XXX will be a 3 character opcode and NNNNN will be a 5 digit integer operand
	for (uint8_t i = 3; i < 8;i++)
 800b0d8:	2303      	movs	r3, #3
 800b0da:	75fb      	strb	r3, [r7, #23]
 800b0dc:	e00a      	b.n	800b0f4 <HAL_UART_RxCpltCallback+0x24>
	{
		parsedOperand[i-3] = TxRx_data[i];
 800b0de:	7dfa      	ldrb	r2, [r7, #23]
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	3b03      	subs	r3, #3
 800b0e4:	493b      	ldr	r1, [pc, #236]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b0e6:	5c8a      	ldrb	r2, [r1, r2]
 800b0e8:	b2d1      	uxtb	r1, r2
 800b0ea:	4a3b      	ldr	r2, [pc, #236]	; (800b1d8 <HAL_UART_RxCpltCallback+0x108>)
 800b0ec:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 3; i < 8;i++)
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	75fb      	strb	r3, [r7, #23]
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	2b07      	cmp	r3, #7
 800b0f8:	d9f1      	bls.n	800b0de <HAL_UART_RxCpltCallback+0xe>
	}

	operand = atoi(parsedOperand);
 800b0fa:	4837      	ldr	r0, [pc, #220]	; (800b1d8 <HAL_UART_RxCpltCallback+0x108>)
 800b0fc:	f000 fcfd 	bl	800bafa <atoi>
 800b100:	4603      	mov	r3, r0
 800b102:	461a      	mov	r2, r3
 800b104:	4b35      	ldr	r3, [pc, #212]	; (800b1dc <HAL_UART_RxCpltCallback+0x10c>)
 800b106:	601a      	str	r2, [r3, #0]

	sprintf(msg,"BMSCharger MK2: message received from UART: %c%c%c%c%c%c%c%c -- Opcode: %c%c%c -- Operand: %u \r\n",TxRx_data[0],TxRx_data[1],TxRx_data[2],TxRx_data[3],TxRx_data[4],TxRx_data[5],TxRx_data[6],TxRx_data[7],TxRx_data[0],TxRx_data[1],TxRx_data[2],operand);
 800b108:	4b32      	ldr	r3, [pc, #200]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	469c      	mov	ip, r3
 800b110:	4b30      	ldr	r3, [pc, #192]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	469e      	mov	lr, r3
 800b118:	4b2e      	ldr	r3, [pc, #184]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b11a:	789b      	ldrb	r3, [r3, #2]
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	461a      	mov	r2, r3
 800b120:	4b2c      	ldr	r3, [pc, #176]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b122:	78db      	ldrb	r3, [r3, #3]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	4619      	mov	r1, r3
 800b128:	4b2a      	ldr	r3, [pc, #168]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b12a:	791b      	ldrb	r3, [r3, #4]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	4618      	mov	r0, r3
 800b130:	4b28      	ldr	r3, [pc, #160]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b132:	795b      	ldrb	r3, [r3, #5]
 800b134:	b2db      	uxtb	r3, r3
 800b136:	461c      	mov	r4, r3
 800b138:	4b26      	ldr	r3, [pc, #152]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b13a:	799b      	ldrb	r3, [r3, #6]
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	461d      	mov	r5, r3
 800b140:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b142:	79db      	ldrb	r3, [r3, #7]
 800b144:	b2db      	uxtb	r3, r3
 800b146:	461e      	mov	r6, r3
 800b148:	4b22      	ldr	r3, [pc, #136]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	60bb      	str	r3, [r7, #8]
 800b150:	4b20      	ldr	r3, [pc, #128]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b152:	785b      	ldrb	r3, [r3, #1]
 800b154:	b2db      	uxtb	r3, r3
 800b156:	607b      	str	r3, [r7, #4]
 800b158:	4b1e      	ldr	r3, [pc, #120]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b15a:	789b      	ldrb	r3, [r3, #2]
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	603b      	str	r3, [r7, #0]
 800b160:	4b1e      	ldr	r3, [pc, #120]	; (800b1dc <HAL_UART_RxCpltCallback+0x10c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	9309      	str	r3, [sp, #36]	; 0x24
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	9308      	str	r3, [sp, #32]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	9307      	str	r3, [sp, #28]
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	9306      	str	r3, [sp, #24]
 800b172:	9605      	str	r6, [sp, #20]
 800b174:	9504      	str	r5, [sp, #16]
 800b176:	9403      	str	r4, [sp, #12]
 800b178:	9002      	str	r0, [sp, #8]
 800b17a:	9101      	str	r1, [sp, #4]
 800b17c:	9200      	str	r2, [sp, #0]
 800b17e:	4673      	mov	r3, lr
 800b180:	4662      	mov	r2, ip
 800b182:	4917      	ldr	r1, [pc, #92]	; (800b1e0 <HAL_UART_RxCpltCallback+0x110>)
 800b184:	4817      	ldr	r0, [pc, #92]	; (800b1e4 <HAL_UART_RxCpltCallback+0x114>)
 800b186:	f000 fcef 	bl	800bb68 <siprintf>
	HAL_UART_Transmit(&huart3,msg,strlen(msg),HAL_MAX_DELAY);
 800b18a:	4816      	ldr	r0, [pc, #88]	; (800b1e4 <HAL_UART_RxCpltCallback+0x114>)
 800b18c:	f7f5 f832 	bl	80001f4 <strlen>
 800b190:	4603      	mov	r3, r0
 800b192:	b29a      	uxth	r2, r3
 800b194:	f04f 33ff 	mov.w	r3, #4294967295
 800b198:	4912      	ldr	r1, [pc, #72]	; (800b1e4 <HAL_UART_RxCpltCallback+0x114>)
 800b19a:	4813      	ldr	r0, [pc, #76]	; (800b1e8 <HAL_UART_RxCpltCallback+0x118>)
 800b19c:	f7fb fa23 	bl	80065e6 <HAL_UART_Transmit>
	opCode[0] = TxRx_data[0];
 800b1a0:	4b0c      	ldr	r3, [pc, #48]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <HAL_UART_RxCpltCallback+0x11c>)
 800b1a8:	701a      	strb	r2, [r3, #0]
	opCode[1] = TxRx_data[1];
 800b1aa:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b1ac:	785b      	ldrb	r3, [r3, #1]
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	4b0e      	ldr	r3, [pc, #56]	; (800b1ec <HAL_UART_RxCpltCallback+0x11c>)
 800b1b2:	705a      	strb	r2, [r3, #1]
	opCode[2] = TxRx_data[2];
 800b1b4:	4b07      	ldr	r3, [pc, #28]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b1b6:	789b      	ldrb	r3, [r3, #2]
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	4b0c      	ldr	r3, [pc, #48]	; (800b1ec <HAL_UART_RxCpltCallback+0x11c>)
 800b1bc:	709a      	strb	r2, [r3, #2]

	HAL_UART_Receive_DMA(&huart3,TxRx_data,8); //re-enable DMA for UART
 800b1be:	2208      	movs	r2, #8
 800b1c0:	4904      	ldr	r1, [pc, #16]	; (800b1d4 <HAL_UART_RxCpltCallback+0x104>)
 800b1c2:	4809      	ldr	r0, [pc, #36]	; (800b1e8 <HAL_UART_RxCpltCallback+0x118>)
 800b1c4:	f7fb fa9c 	bl	8006700 <HAL_UART_Receive_DMA>

	executeOperation(); //call parser
 800b1c8:	f7fd fffc 	bl	80091c4 <executeOperation>
}
 800b1cc:	bf00      	nop
 800b1ce:	371c      	adds	r7, #28
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1d4:	200012e0 	.word	0x200012e0
 800b1d8:	200002b8 	.word	0x200002b8
 800b1dc:	200002c0 	.word	0x200002c0
 800b1e0:	0800dd10 	.word	0x0800dd10
 800b1e4:	200005b0 	.word	0x200005b0
 800b1e8:	200004a8 	.word	0x200004a8
 800b1ec:	20002128 	.word	0x20002128

0800b1f0 <HAL_GPIO_EXTI_Callback>:

//**********************************************************************************************************************************************************
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //ISR runs when the PwrBtn push button switch is pressed
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PwrBtn_Pin)
 800b1fa:	88fb      	ldrh	r3, [r7, #6]
 800b1fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b200:	d11f      	bne.n	800b242 <HAL_GPIO_EXTI_Callback+0x52>
	{
		//reset error code
		errorCode = 0;
 800b202:	4b12      	ldr	r3, [pc, #72]	; (800b24c <HAL_GPIO_EXTI_Callback+0x5c>)
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]
		battOverTempTrip  = 0;
 800b208:	4b11      	ldr	r3, [pc, #68]	; (800b250 <HAL_GPIO_EXTI_Callback+0x60>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	701a      	strb	r2, [r3, #0]
		battUnderTempTrip = 0;
 800b20e:	4b11      	ldr	r3, [pc, #68]	; (800b254 <HAL_GPIO_EXTI_Callback+0x64>)
 800b210:	2200      	movs	r2, #0
 800b212:	701a      	strb	r2, [r3, #0]
		chgrOverTempTrip = 0;
 800b214:	4b10      	ldr	r3, [pc, #64]	; (800b258 <HAL_GPIO_EXTI_Callback+0x68>)
 800b216:	2200      	movs	r2, #0
 800b218:	701a      	strb	r2, [r3, #0]
		chgrUnderTempTrip = 0;
 800b21a:	4b10      	ldr	r3, [pc, #64]	; (800b25c <HAL_GPIO_EXTI_Callback+0x6c>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	701a      	strb	r2, [r3, #0]
		battOverVoltTrip = 0;
 800b220:	4b0f      	ldr	r3, [pc, #60]	; (800b260 <HAL_GPIO_EXTI_Callback+0x70>)
 800b222:	2200      	movs	r2, #0
 800b224:	701a      	strb	r2, [r3, #0]
		battUnderVoltTrip = 0;
 800b226:	4b0f      	ldr	r3, [pc, #60]	; (800b264 <HAL_GPIO_EXTI_Callback+0x74>)
 800b228:	2200      	movs	r2, #0
 800b22a:	701a      	strb	r2, [r3, #0]
		battOverCurrTrip = 0;
 800b22c:	4b0e      	ldr	r3, [pc, #56]	; (800b268 <HAL_GPIO_EXTI_Callback+0x78>)
 800b22e:	2200      	movs	r2, #0
 800b230:	701a      	strb	r2, [r3, #0]
		battRegenCurrTrip = 0;
 800b232:	4b0e      	ldr	r3, [pc, #56]	; (800b26c <HAL_GPIO_EXTI_Callback+0x7c>)
 800b234:	2200      	movs	r2, #0
 800b236:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CB_En_GPIO_Port,CB_En_Pin, GPIO_PIN_SET); //re-connect load
 800b238:	2201      	movs	r2, #1
 800b23a:	2101      	movs	r1, #1
 800b23c:	480c      	ldr	r0, [pc, #48]	; (800b270 <HAL_GPIO_EXTI_Callback+0x80>)
 800b23e:	f7f8 fb9f 	bl	8003980 <HAL_GPIO_WritePin>
	}
}
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	200003fc 	.word	0x200003fc
 800b250:	20000317 	.word	0x20000317
 800b254:	20000318 	.word	0x20000318
 800b258:	20000319 	.word	0x20000319
 800b25c:	2000031a 	.word	0x2000031a
 800b260:	20000315 	.word	0x20000315
 800b264:	20000316 	.word	0x20000316
 800b268:	20000314 	.word	0x20000314
 800b26c:	2000031b 	.word	0x2000031b
 800b270:	48000400 	.word	0x48000400

0800b274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b274:	b480      	push	{r7}
 800b276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b278:	bf00      	nop
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
	...

0800b284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b28a:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <HAL_MspInit+0x44>)
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	4a0e      	ldr	r2, [pc, #56]	; (800b2c8 <HAL_MspInit+0x44>)
 800b290:	f043 0301 	orr.w	r3, r3, #1
 800b294:	6193      	str	r3, [r2, #24]
 800b296:	4b0c      	ldr	r3, [pc, #48]	; (800b2c8 <HAL_MspInit+0x44>)
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	607b      	str	r3, [r7, #4]
 800b2a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b2a2:	4b09      	ldr	r3, [pc, #36]	; (800b2c8 <HAL_MspInit+0x44>)
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	4a08      	ldr	r2, [pc, #32]	; (800b2c8 <HAL_MspInit+0x44>)
 800b2a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ac:	61d3      	str	r3, [r2, #28]
 800b2ae:	4b06      	ldr	r3, [pc, #24]	; (800b2c8 <HAL_MspInit+0x44>)
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2b6:	603b      	str	r3, [r7, #0]
 800b2b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800b2ba:	2007      	movs	r0, #7
 800b2bc:	f7f7 ff68 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	40021000 	.word	0x40021000

0800b2cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b090      	sub	sp, #64	; 0x40
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b2d8:	2200      	movs	r2, #0
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	605a      	str	r2, [r3, #4]
 800b2de:	609a      	str	r2, [r3, #8]
 800b2e0:	60da      	str	r2, [r3, #12]
 800b2e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2ec:	d156      	bne.n	800b39c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800b2ee:	4b93      	ldr	r3, [pc, #588]	; (800b53c <HAL_ADC_MspInit+0x270>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	4a91      	ldr	r2, [pc, #580]	; (800b53c <HAL_ADC_MspInit+0x270>)
 800b2f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800b2f8:	4b90      	ldr	r3, [pc, #576]	; (800b53c <HAL_ADC_MspInit+0x270>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d10b      	bne.n	800b318 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800b300:	4b8f      	ldr	r3, [pc, #572]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	4a8e      	ldr	r2, [pc, #568]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b30a:	6153      	str	r3, [r2, #20]
 800b30c:	4b8c      	ldr	r3, [pc, #560]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b30e:	695b      	ldr	r3, [r3, #20]
 800b310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b314:	62bb      	str	r3, [r7, #40]	; 0x28
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b318:	4b89      	ldr	r3, [pc, #548]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	4a88      	ldr	r2, [pc, #544]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b31e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b322:	6153      	str	r3, [r2, #20]
 800b324:	4b86      	ldr	r3, [pc, #536]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = VC3_Pin|I_Chg_Pin|I_Dchg_Pin|VC6_Pin;
 800b330:	230f      	movs	r3, #15
 800b332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b334:	2303      	movs	r3, #3
 800b336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b338:	2300      	movs	r3, #0
 800b33a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b33c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b340:	4619      	mov	r1, r3
 800b342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b346:	f7f8 f98d 	bl	8003664 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800b34a:	4b7e      	ldr	r3, [pc, #504]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b34c:	4a7e      	ldr	r2, [pc, #504]	; (800b548 <HAL_ADC_MspInit+0x27c>)
 800b34e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b350:	4b7c      	ldr	r3, [pc, #496]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b352:	2200      	movs	r2, #0
 800b354:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b356:	4b7b      	ldr	r3, [pc, #492]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b358:	2200      	movs	r2, #0
 800b35a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800b35c:	4b79      	ldr	r3, [pc, #484]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b35e:	2280      	movs	r2, #128	; 0x80
 800b360:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b362:	4b78      	ldr	r3, [pc, #480]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b364:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b368:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b36a:	4b76      	ldr	r3, [pc, #472]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b36c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b370:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800b372:	4b74      	ldr	r3, [pc, #464]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b374:	2200      	movs	r2, #0
 800b376:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800b378:	4b72      	ldr	r3, [pc, #456]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b37e:	4871      	ldr	r0, [pc, #452]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b380:	f7f7 ff47 	bl	8003212 <HAL_DMA_Init>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800b38a:	f7ff ff73 	bl	800b274 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a6c      	ldr	r2, [pc, #432]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b392:	63da      	str	r2, [r3, #60]	; 0x3c
 800b394:	4a6b      	ldr	r2, [pc, #428]	; (800b544 <HAL_ADC_MspInit+0x278>)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800b39a:	e144      	b.n	800b626 <HAL_ADC_MspInit+0x35a>
  else if(hadc->Instance==ADC2)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a6a      	ldr	r2, [pc, #424]	; (800b54c <HAL_ADC_MspInit+0x280>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d16e      	bne.n	800b484 <HAL_ADC_MspInit+0x1b8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800b3a6:	4b65      	ldr	r3, [pc, #404]	; (800b53c <HAL_ADC_MspInit+0x270>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	4a63      	ldr	r2, [pc, #396]	; (800b53c <HAL_ADC_MspInit+0x270>)
 800b3ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800b3b0:	4b62      	ldr	r3, [pc, #392]	; (800b53c <HAL_ADC_MspInit+0x270>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d10b      	bne.n	800b3d0 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800b3b8:	4b61      	ldr	r3, [pc, #388]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	4a60      	ldr	r2, [pc, #384]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b3be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3c2:	6153      	str	r3, [r2, #20]
 800b3c4:	4b5e      	ldr	r3, [pc, #376]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3cc:	623b      	str	r3, [r7, #32]
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3d0:	4b5b      	ldr	r3, [pc, #364]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b3d2:	695b      	ldr	r3, [r3, #20]
 800b3d4:	4a5a      	ldr	r2, [pc, #360]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b3d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3da:	6153      	str	r3, [r2, #20]
 800b3dc:	4b58      	ldr	r3, [pc, #352]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b3de:	695b      	ldr	r3, [r3, #20]
 800b3e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3e4:	61fb      	str	r3, [r7, #28]
 800b3e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b3e8:	4b55      	ldr	r3, [pc, #340]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b3ea:	695b      	ldr	r3, [r3, #20]
 800b3ec:	4a54      	ldr	r2, [pc, #336]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b3ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3f2:	6153      	str	r3, [r2, #20]
 800b3f4:	4b52      	ldr	r3, [pc, #328]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b3f6:	695b      	ldr	r3, [r3, #20]
 800b3f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3fc:	61bb      	str	r3, [r7, #24]
 800b3fe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = Vin_Pin|Temp1_Pin|Temp2_Pin|Temp3_Pin;
 800b400:	23f0      	movs	r3, #240	; 0xf0
 800b402:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b404:	2303      	movs	r3, #3
 800b406:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b408:	2300      	movs	r3, #0
 800b40a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b40c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b410:	4619      	mov	r1, r3
 800b412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b416:	f7f8 f925 	bl	8003664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Temp4_Pin;
 800b41a:	2310      	movs	r3, #16
 800b41c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b41e:	2303      	movs	r3, #3
 800b420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b422:	2300      	movs	r3, #0
 800b424:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Temp4_GPIO_Port, &GPIO_InitStruct);
 800b426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b42a:	4619      	mov	r1, r3
 800b42c:	4848      	ldr	r0, [pc, #288]	; (800b550 <HAL_ADC_MspInit+0x284>)
 800b42e:	f7f8 f919 	bl	8003664 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800b432:	4b48      	ldr	r3, [pc, #288]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b434:	4a48      	ldr	r2, [pc, #288]	; (800b558 <HAL_ADC_MspInit+0x28c>)
 800b436:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b438:	4b46      	ldr	r3, [pc, #280]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800b43e:	4b45      	ldr	r3, [pc, #276]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b440:	2200      	movs	r2, #0
 800b442:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800b444:	4b43      	ldr	r3, [pc, #268]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b446:	2280      	movs	r2, #128	; 0x80
 800b448:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b44a:	4b42      	ldr	r3, [pc, #264]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b44c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b450:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b452:	4b40      	ldr	r3, [pc, #256]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b458:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800b45a:	4b3e      	ldr	r3, [pc, #248]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800b460:	4b3c      	ldr	r3, [pc, #240]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b462:	2200      	movs	r2, #0
 800b464:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800b466:	483b      	ldr	r0, [pc, #236]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b468:	f7f7 fed3 	bl	8003212 <HAL_DMA_Init>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 800b472:	f7ff feff 	bl	800b274 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a36      	ldr	r2, [pc, #216]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b47a:	63da      	str	r2, [r3, #60]	; 0x3c
 800b47c:	4a35      	ldr	r2, [pc, #212]	; (800b554 <HAL_ADC_MspInit+0x288>)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6253      	str	r3, [r2, #36]	; 0x24
}
 800b482:	e0d0      	b.n	800b626 <HAL_ADC_MspInit+0x35a>
  else if(hadc->Instance==ADC3)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a34      	ldr	r2, [pc, #208]	; (800b55c <HAL_ADC_MspInit+0x290>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d170      	bne.n	800b570 <HAL_ADC_MspInit+0x2a4>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800b48e:	4b34      	ldr	r3, [pc, #208]	; (800b560 <HAL_ADC_MspInit+0x294>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3301      	adds	r3, #1
 800b494:	4a32      	ldr	r2, [pc, #200]	; (800b560 <HAL_ADC_MspInit+0x294>)
 800b496:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800b498:	4b31      	ldr	r3, [pc, #196]	; (800b560 <HAL_ADC_MspInit+0x294>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d10b      	bne.n	800b4b8 <HAL_ADC_MspInit+0x1ec>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800b4a0:	4b27      	ldr	r3, [pc, #156]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	4a26      	ldr	r2, [pc, #152]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b4a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4aa:	6153      	str	r3, [r2, #20]
 800b4ac:	4b24      	ldr	r3, [pc, #144]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b4ae:	695b      	ldr	r3, [r3, #20]
 800b4b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4b4:	617b      	str	r3, [r7, #20]
 800b4b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4b8:	4b21      	ldr	r3, [pc, #132]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	4a20      	ldr	r2, [pc, #128]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b4be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4c2:	6153      	str	r3, [r2, #20]
 800b4c4:	4b1e      	ldr	r3, [pc, #120]	; (800b540 <HAL_ADC_MspInit+0x274>)
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4cc:	613b      	str	r3, [r7, #16]
 800b4ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VC1_Pin|VC4_Pin;
 800b4d0:	f242 0302 	movw	r3, #8194	; 0x2002
 800b4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	481f      	ldr	r0, [pc, #124]	; (800b564 <HAL_ADC_MspInit+0x298>)
 800b4e6:	f7f8 f8bd 	bl	8003664 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 800b4ea:	4b1f      	ldr	r3, [pc, #124]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b4ec:	4a1f      	ldr	r2, [pc, #124]	; (800b56c <HAL_ADC_MspInit+0x2a0>)
 800b4ee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b4f0:	4b1d      	ldr	r3, [pc, #116]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800b4f6:	4b1c      	ldr	r3, [pc, #112]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800b4fc:	4b1a      	ldr	r3, [pc, #104]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b4fe:	2280      	movs	r2, #128	; 0x80
 800b500:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b502:	4b19      	ldr	r3, [pc, #100]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b504:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b508:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b50a:	4b17      	ldr	r3, [pc, #92]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b50c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b510:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800b512:	4b15      	ldr	r3, [pc, #84]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b514:	2200      	movs	r2, #0
 800b516:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800b518:	4b13      	ldr	r3, [pc, #76]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800b51e:	4812      	ldr	r0, [pc, #72]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b520:	f7f7 fe77 	bl	8003212 <HAL_DMA_Init>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <HAL_ADC_MspInit+0x262>
      Error_Handler();
 800b52a:	f7ff fea3 	bl	800b274 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a0d      	ldr	r2, [pc, #52]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b532:	63da      	str	r2, [r3, #60]	; 0x3c
 800b534:	4a0c      	ldr	r2, [pc, #48]	; (800b568 <HAL_ADC_MspInit+0x29c>)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6253      	str	r3, [r2, #36]	; 0x24
}
 800b53a:	e074      	b.n	800b626 <HAL_ADC_MspInit+0x35a>
 800b53c:	20000408 	.word	0x20000408
 800b540:	40021000 	.word	0x40021000
 800b544:	2000089c 	.word	0x2000089c
 800b548:	40020008 	.word	0x40020008
 800b54c:	50000100 	.word	0x50000100
 800b550:	48000800 	.word	0x48000800
 800b554:	20003040 	.word	0x20003040
 800b558:	40020408 	.word	0x40020408
 800b55c:	50000400 	.word	0x50000400
 800b560:	2000040c 	.word	0x2000040c
 800b564:	48000400 	.word	0x48000400
 800b568:	200007b0 	.word	0x200007b0
 800b56c:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a2e      	ldr	r2, [pc, #184]	; (800b630 <HAL_ADC_MspInit+0x364>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d155      	bne.n	800b626 <HAL_ADC_MspInit+0x35a>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800b57a:	4b2e      	ldr	r3, [pc, #184]	; (800b634 <HAL_ADC_MspInit+0x368>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3301      	adds	r3, #1
 800b580:	4a2c      	ldr	r2, [pc, #176]	; (800b634 <HAL_ADC_MspInit+0x368>)
 800b582:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800b584:	4b2b      	ldr	r3, [pc, #172]	; (800b634 <HAL_ADC_MspInit+0x368>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d10b      	bne.n	800b5a4 <HAL_ADC_MspInit+0x2d8>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800b58c:	4b2a      	ldr	r3, [pc, #168]	; (800b638 <HAL_ADC_MspInit+0x36c>)
 800b58e:	695b      	ldr	r3, [r3, #20]
 800b590:	4a29      	ldr	r2, [pc, #164]	; (800b638 <HAL_ADC_MspInit+0x36c>)
 800b592:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b596:	6153      	str	r3, [r2, #20]
 800b598:	4b27      	ldr	r3, [pc, #156]	; (800b638 <HAL_ADC_MspInit+0x36c>)
 800b59a:	695b      	ldr	r3, [r3, #20]
 800b59c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5a0:	60fb      	str	r3, [r7, #12]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5a4:	4b24      	ldr	r3, [pc, #144]	; (800b638 <HAL_ADC_MspInit+0x36c>)
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	4a23      	ldr	r2, [pc, #140]	; (800b638 <HAL_ADC_MspInit+0x36c>)
 800b5aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5ae:	6153      	str	r3, [r2, #20]
 800b5b0:	4b21      	ldr	r3, [pc, #132]	; (800b638 <HAL_ADC_MspInit+0x36c>)
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5b8:	60bb      	str	r3, [r7, #8]
 800b5ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VC0_Pin|VC2_Pin|VC5_Pin;
 800b5bc:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800b5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	481a      	ldr	r0, [pc, #104]	; (800b63c <HAL_ADC_MspInit+0x370>)
 800b5d2:	f7f8 f847 	bl	8003664 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 800b5d6:	4b1a      	ldr	r3, [pc, #104]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b5d8:	4a1a      	ldr	r2, [pc, #104]	; (800b644 <HAL_ADC_MspInit+0x378>)
 800b5da:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b5dc:	4b18      	ldr	r3, [pc, #96]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800b5e2:	4b17      	ldr	r3, [pc, #92]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800b5e8:	4b15      	ldr	r3, [pc, #84]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b5ea:	2280      	movs	r2, #128	; 0x80
 800b5ec:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b5ee:	4b14      	ldr	r3, [pc, #80]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b5f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5f4:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b5f6:	4b12      	ldr	r3, [pc, #72]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b5f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b5fc:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 800b5fe:	4b10      	ldr	r3, [pc, #64]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b600:	2200      	movs	r2, #0
 800b602:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800b604:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b606:	2200      	movs	r2, #0
 800b608:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800b60a:	480d      	ldr	r0, [pc, #52]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b60c:	f7f7 fe01 	bl	8003212 <HAL_DMA_Init>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <HAL_ADC_MspInit+0x34e>
      Error_Handler();
 800b616:	f7ff fe2d 	bl	800b274 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a08      	ldr	r2, [pc, #32]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b61e:	63da      	str	r2, [r3, #60]	; 0x3c
 800b620:	4a07      	ldr	r2, [pc, #28]	; (800b640 <HAL_ADC_MspInit+0x374>)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6253      	str	r3, [r2, #36]	; 0x24
}
 800b626:	bf00      	nop
 800b628:	3740      	adds	r7, #64	; 0x40
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	50000500 	.word	0x50000500
 800b634:	2000040c 	.word	0x2000040c
 800b638:	40021000 	.word	0x40021000
 800b63c:	48000400 	.word	0x48000400
 800b640:	20000420 	.word	0x20000420
 800b644:	4002041c 	.word	0x4002041c

0800b648 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08a      	sub	sp, #40	; 0x28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b650:	f107 0314 	add.w	r3, r7, #20
 800b654:	2200      	movs	r2, #0
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	605a      	str	r2, [r3, #4]
 800b65a:	609a      	str	r2, [r3, #8]
 800b65c:	60da      	str	r2, [r3, #12]
 800b65e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a1c      	ldr	r2, [pc, #112]	; (800b6d8 <HAL_CAN_MspInit+0x90>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d131      	bne.n	800b6ce <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800b66a:	4b1c      	ldr	r3, [pc, #112]	; (800b6dc <HAL_CAN_MspInit+0x94>)
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	4a1b      	ldr	r2, [pc, #108]	; (800b6dc <HAL_CAN_MspInit+0x94>)
 800b670:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b674:	61d3      	str	r3, [r2, #28]
 800b676:	4b19      	ldr	r3, [pc, #100]	; (800b6dc <HAL_CAN_MspInit+0x94>)
 800b678:	69db      	ldr	r3, [r3, #28]
 800b67a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b67e:	613b      	str	r3, [r7, #16]
 800b680:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b682:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <HAL_CAN_MspInit+0x94>)
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	4a15      	ldr	r2, [pc, #84]	; (800b6dc <HAL_CAN_MspInit+0x94>)
 800b688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b68c:	6153      	str	r3, [r2, #20]
 800b68e:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <HAL_CAN_MspInit+0x94>)
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b69a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b69e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800b6ac:	2309      	movs	r3, #9
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6b0:	f107 0314 	add.w	r3, r7, #20
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b6ba:	f7f7 ffd3 	bl	8003664 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	2014      	movs	r0, #20
 800b6c4:	f7f7 fd6f 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b6c8:	2014      	movs	r0, #20
 800b6ca:	f7f7 fd88 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800b6ce:	bf00      	nop
 800b6d0:	3728      	adds	r7, #40	; 0x28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	40006400 	.word	0x40006400
 800b6dc:	40021000 	.word	0x40021000

0800b6e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a16      	ldr	r2, [pc, #88]	; (800b748 <HAL_TIM_Base_MspInit+0x68>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d10c      	bne.n	800b70c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b6f2:	4b16      	ldr	r3, [pc, #88]	; (800b74c <HAL_TIM_Base_MspInit+0x6c>)
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	4a15      	ldr	r2, [pc, #84]	; (800b74c <HAL_TIM_Base_MspInit+0x6c>)
 800b6f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b6fc:	6193      	str	r3, [r2, #24]
 800b6fe:	4b13      	ldr	r3, [pc, #76]	; (800b74c <HAL_TIM_Base_MspInit+0x6c>)
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b70a:	e018      	b.n	800b73e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b714:	d113      	bne.n	800b73e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b716:	4b0d      	ldr	r3, [pc, #52]	; (800b74c <HAL_TIM_Base_MspInit+0x6c>)
 800b718:	69db      	ldr	r3, [r3, #28]
 800b71a:	4a0c      	ldr	r2, [pc, #48]	; (800b74c <HAL_TIM_Base_MspInit+0x6c>)
 800b71c:	f043 0301 	orr.w	r3, r3, #1
 800b720:	61d3      	str	r3, [r2, #28]
 800b722:	4b0a      	ldr	r3, [pc, #40]	; (800b74c <HAL_TIM_Base_MspInit+0x6c>)
 800b724:	69db      	ldr	r3, [r3, #28]
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	60bb      	str	r3, [r7, #8]
 800b72c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b72e:	2200      	movs	r2, #0
 800b730:	2100      	movs	r1, #0
 800b732:	201c      	movs	r0, #28
 800b734:	f7f7 fd37 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b738:	201c      	movs	r0, #28
 800b73a:	f7f7 fd50 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 800b73e:	bf00      	nop
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	40012c00 	.word	0x40012c00
 800b74c:	40021000 	.word	0x40021000

0800b750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b758:	f107 030c 	add.w	r3, r7, #12
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	605a      	str	r2, [r3, #4]
 800b762:	609a      	str	r2, [r3, #8]
 800b764:	60da      	str	r2, [r3, #12]
 800b766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a11      	ldr	r2, [pc, #68]	; (800b7b4 <HAL_TIM_MspPostInit+0x64>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d11b      	bne.n	800b7aa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b772:	4b11      	ldr	r3, [pc, #68]	; (800b7b8 <HAL_TIM_MspPostInit+0x68>)
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	4a10      	ldr	r2, [pc, #64]	; (800b7b8 <HAL_TIM_MspPostInit+0x68>)
 800b778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b77c:	6153      	str	r3, [r2, #20]
 800b77e:	4b0e      	ldr	r3, [pc, #56]	; (800b7b8 <HAL_TIM_MspPostInit+0x68>)
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b786:	60bb      	str	r3, [r7, #8]
 800b788:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Boost_Pin|Buck_Pin;
 800b78a:	2303      	movs	r3, #3
 800b78c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b78e:	2302      	movs	r3, #2
 800b790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b796:	2300      	movs	r3, #0
 800b798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800b79a:	2302      	movs	r3, #2
 800b79c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b79e:	f107 030c 	add.w	r3, r7, #12
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4805      	ldr	r0, [pc, #20]	; (800b7bc <HAL_TIM_MspPostInit+0x6c>)
 800b7a6:	f7f7 ff5d 	bl	8003664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800b7aa:	bf00      	nop
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	40012c00 	.word	0x40012c00
 800b7b8:	40021000 	.word	0x40021000
 800b7bc:	48000800 	.word	0x48000800

0800b7c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08a      	sub	sp, #40	; 0x28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7c8:	f107 0314 	add.w	r3, r7, #20
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	601a      	str	r2, [r3, #0]
 800b7d0:	605a      	str	r2, [r3, #4]
 800b7d2:	609a      	str	r2, [r3, #8]
 800b7d4:	60da      	str	r2, [r3, #12]
 800b7d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a2f      	ldr	r2, [pc, #188]	; (800b89c <HAL_UART_MspInit+0xdc>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d157      	bne.n	800b892 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b7e2:	4b2f      	ldr	r3, [pc, #188]	; (800b8a0 <HAL_UART_MspInit+0xe0>)
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	4a2e      	ldr	r2, [pc, #184]	; (800b8a0 <HAL_UART_MspInit+0xe0>)
 800b7e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7ec:	61d3      	str	r3, [r2, #28]
 800b7ee:	4b2c      	ldr	r3, [pc, #176]	; (800b8a0 <HAL_UART_MspInit+0xe0>)
 800b7f0:	69db      	ldr	r3, [r3, #28]
 800b7f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7f6:	613b      	str	r3, [r7, #16]
 800b7f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7fa:	4b29      	ldr	r3, [pc, #164]	; (800b8a0 <HAL_UART_MspInit+0xe0>)
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	4a28      	ldr	r2, [pc, #160]	; (800b8a0 <HAL_UART_MspInit+0xe0>)
 800b800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b804:	6153      	str	r3, [r2, #20]
 800b806:	4b26      	ldr	r3, [pc, #152]	; (800b8a0 <HAL_UART_MspInit+0xe0>)
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b812:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b818:	2302      	movs	r3, #2
 800b81a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b81c:	2300      	movs	r3, #0
 800b81e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b820:	2303      	movs	r3, #3
 800b822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b824:	2307      	movs	r3, #7
 800b826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b828:	f107 0314 	add.w	r3, r7, #20
 800b82c:	4619      	mov	r1, r3
 800b82e:	481d      	ldr	r0, [pc, #116]	; (800b8a4 <HAL_UART_MspInit+0xe4>)
 800b830:	f7f7 ff18 	bl	8003664 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800b834:	4b1c      	ldr	r3, [pc, #112]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b836:	4a1d      	ldr	r2, [pc, #116]	; (800b8ac <HAL_UART_MspInit+0xec>)
 800b838:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b83a:	4b1b      	ldr	r3, [pc, #108]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b840:	4b19      	ldr	r3, [pc, #100]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b842:	2200      	movs	r2, #0
 800b844:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b846:	4b18      	ldr	r3, [pc, #96]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b848:	2280      	movs	r2, #128	; 0x80
 800b84a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b84c:	4b16      	ldr	r3, [pc, #88]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b84e:	2200      	movs	r2, #0
 800b850:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b852:	4b15      	ldr	r3, [pc, #84]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b854:	2200      	movs	r2, #0
 800b856:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800b858:	4b13      	ldr	r3, [pc, #76]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b85e:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b860:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b864:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800b866:	4810      	ldr	r0, [pc, #64]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b868:	f7f7 fcd3 	bl	8003212 <HAL_DMA_Init>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d001      	beq.n	800b876 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800b872:	f7ff fcff 	bl	800b274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a0b      	ldr	r2, [pc, #44]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b87a:	665a      	str	r2, [r3, #100]	; 0x64
 800b87c:	4a0a      	ldr	r2, [pc, #40]	; (800b8a8 <HAL_UART_MspInit+0xe8>)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800b882:	2200      	movs	r2, #0
 800b884:	2100      	movs	r1, #0
 800b886:	2027      	movs	r0, #39	; 0x27
 800b888:	f7f7 fc8d 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800b88c:	2027      	movs	r0, #39	; 0x27
 800b88e:	f7f7 fca6 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b892:	bf00      	nop
 800b894:	3728      	adds	r7, #40	; 0x28
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	40004800 	.word	0x40004800
 800b8a0:	40021000 	.word	0x40021000
 800b8a4:	48000400 	.word	0x48000400
 800b8a8:	20000464 	.word	0x20000464
 800b8ac:	40020030 	.word	0x40020030

0800b8b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b8b4:	bf00      	nop
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b8c2:	e7fe      	b.n	800b8c2 <HardFault_Handler+0x4>

0800b8c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b8c8:	e7fe      	b.n	800b8c8 <MemManage_Handler+0x4>

0800b8ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b8ce:	e7fe      	b.n	800b8ce <BusFault_Handler+0x4>

0800b8d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b8d4:	e7fe      	b.n	800b8d4 <UsageFault_Handler+0x4>

0800b8d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b8da:	bf00      	nop
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b8e8:	bf00      	nop
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b8f6:	bf00      	nop
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b904:	f7f5 f9f6 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b908:	bf00      	nop
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b910:	4802      	ldr	r0, [pc, #8]	; (800b91c <DMA1_Channel1_IRQHandler+0x10>)
 800b912:	f7f7 fd99 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b916:	bf00      	nop
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	2000089c 	.word	0x2000089c

0800b920 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800b924:	4802      	ldr	r0, [pc, #8]	; (800b930 <DMA1_Channel3_IRQHandler+0x10>)
 800b926:	f7f7 fd8f 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800b92a:	bf00      	nop
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	20000464 	.word	0x20000464

0800b934 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800b938:	4802      	ldr	r0, [pc, #8]	; (800b944 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800b93a:	f7f7 f847 	bl	80029cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800b93e:	bf00      	nop
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	2000056c 	.word	0x2000056c

0800b948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b94c:	4802      	ldr	r0, [pc, #8]	; (800b958 <TIM2_IRQHandler+0x10>)
 800b94e:	f7f9 fd1b 	bl	8005388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800b952:	bf00      	nop
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20002fac 	.word	0x20002fac

0800b95c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b960:	4802      	ldr	r0, [pc, #8]	; (800b96c <USART3_IRQHandler+0x10>)
 800b962:	f7fa ff41 	bl	80067e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b966:	bf00      	nop
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	200004a8 	.word	0x200004a8

0800b970 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b974:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b978:	f7f8 f81a 	bl	80039b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b97c:	bf00      	nop
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800b984:	4802      	ldr	r0, [pc, #8]	; (800b990 <DMA2_Channel1_IRQHandler+0x10>)
 800b986:	f7f7 fd5f 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800b98a:	bf00      	nop
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20003040 	.word	0x20003040

0800b994 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800b998:	4802      	ldr	r0, [pc, #8]	; (800b9a4 <DMA2_Channel2_IRQHandler+0x10>)
 800b99a:	f7f7 fd55 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800b99e:	bf00      	nop
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	20000420 	.word	0x20000420

0800b9a8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800b9ac:	4802      	ldr	r0, [pc, #8]	; (800b9b8 <DMA2_Channel5_IRQHandler+0x10>)
 800b9ae:	f7f7 fd4b 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800b9b2:	bf00      	nop
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	200007b0 	.word	0x200007b0

0800b9bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b9c4:	4b11      	ldr	r3, [pc, #68]	; (800ba0c <_sbrk+0x50>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d102      	bne.n	800b9d2 <_sbrk+0x16>
		heap_end = &end;
 800b9cc:	4b0f      	ldr	r3, [pc, #60]	; (800ba0c <_sbrk+0x50>)
 800b9ce:	4a10      	ldr	r2, [pc, #64]	; (800ba10 <_sbrk+0x54>)
 800b9d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b9d2:	4b0e      	ldr	r3, [pc, #56]	; (800ba0c <_sbrk+0x50>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <_sbrk+0x50>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4413      	add	r3, r2
 800b9e0:	466a      	mov	r2, sp
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d907      	bls.n	800b9f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b9e6:	f000 f88d 	bl	800bb04 <__errno>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	230c      	movs	r3, #12
 800b9ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f4:	e006      	b.n	800ba04 <_sbrk+0x48>
	}

	heap_end += incr;
 800b9f6:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <_sbrk+0x50>)
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	4a03      	ldr	r2, [pc, #12]	; (800ba0c <_sbrk+0x50>)
 800ba00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ba02:	68fb      	ldr	r3, [r7, #12]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20000410 	.word	0x20000410
 800ba10:	20003088 	.word	0x20003088

0800ba14 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ba14:	b480      	push	{r7}
 800ba16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ba18:	4b1f      	ldr	r3, [pc, #124]	; (800ba98 <SystemInit+0x84>)
 800ba1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba1e:	4a1e      	ldr	r2, [pc, #120]	; (800ba98 <SystemInit+0x84>)
 800ba20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800ba28:	4b1c      	ldr	r3, [pc, #112]	; (800ba9c <SystemInit+0x88>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a1b      	ldr	r2, [pc, #108]	; (800ba9c <SystemInit+0x88>)
 800ba2e:	f043 0301 	orr.w	r3, r3, #1
 800ba32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800ba34:	4b19      	ldr	r3, [pc, #100]	; (800ba9c <SystemInit+0x88>)
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	4918      	ldr	r1, [pc, #96]	; (800ba9c <SystemInit+0x88>)
 800ba3a:	4b19      	ldr	r3, [pc, #100]	; (800baa0 <SystemInit+0x8c>)
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800ba40:	4b16      	ldr	r3, [pc, #88]	; (800ba9c <SystemInit+0x88>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a15      	ldr	r2, [pc, #84]	; (800ba9c <SystemInit+0x88>)
 800ba46:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ba4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba4e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ba50:	4b12      	ldr	r3, [pc, #72]	; (800ba9c <SystemInit+0x88>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a11      	ldr	r2, [pc, #68]	; (800ba9c <SystemInit+0x88>)
 800ba56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800ba5c:	4b0f      	ldr	r3, [pc, #60]	; (800ba9c <SystemInit+0x88>)
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	4a0e      	ldr	r2, [pc, #56]	; (800ba9c <SystemInit+0x88>)
 800ba62:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800ba66:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800ba68:	4b0c      	ldr	r3, [pc, #48]	; (800ba9c <SystemInit+0x88>)
 800ba6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6c:	4a0b      	ldr	r2, [pc, #44]	; (800ba9c <SystemInit+0x88>)
 800ba6e:	f023 030f 	bic.w	r3, r3, #15
 800ba72:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800ba74:	4b09      	ldr	r3, [pc, #36]	; (800ba9c <SystemInit+0x88>)
 800ba76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba78:	4908      	ldr	r1, [pc, #32]	; (800ba9c <SystemInit+0x88>)
 800ba7a:	4b0a      	ldr	r3, [pc, #40]	; (800baa4 <SystemInit+0x90>)
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800ba80:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <SystemInit+0x88>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ba86:	4b04      	ldr	r3, [pc, #16]	; (800ba98 <SystemInit+0x84>)
 800ba88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ba8c:	609a      	str	r2, [r3, #8]
#endif
}
 800ba8e:	bf00      	nop
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	e000ed00 	.word	0xe000ed00
 800ba9c:	40021000 	.word	0x40021000
 800baa0:	f87fc00c 	.word	0xf87fc00c
 800baa4:	ff00fccc 	.word	0xff00fccc

0800baa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800baa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bae0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800baac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800baae:	e003      	b.n	800bab8 <LoopCopyDataInit>

0800bab0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800bab0:	4b0c      	ldr	r3, [pc, #48]	; (800bae4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800bab2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800bab4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800bab6:	3104      	adds	r1, #4

0800bab8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800bab8:	480b      	ldr	r0, [pc, #44]	; (800bae8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800baba:	4b0c      	ldr	r3, [pc, #48]	; (800baec <LoopForever+0xe>)
	adds	r2, r0, r1
 800babc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800babe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800bac0:	d3f6      	bcc.n	800bab0 <CopyDataInit>
	ldr	r2, =_sbss
 800bac2:	4a0b      	ldr	r2, [pc, #44]	; (800baf0 <LoopForever+0x12>)
	b	LoopFillZerobss
 800bac4:	e002      	b.n	800bacc <LoopFillZerobss>

0800bac6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800bac6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800bac8:	f842 3b04 	str.w	r3, [r2], #4

0800bacc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800bacc:	4b09      	ldr	r3, [pc, #36]	; (800baf4 <LoopForever+0x16>)
	cmp	r2, r3
 800bace:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800bad0:	d3f9      	bcc.n	800bac6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800bad2:	f7ff ff9f 	bl	800ba14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bad6:	f000 f81b 	bl	800bb10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800bada:	f7fb fca5 	bl	8007428 <main>

0800bade <LoopForever>:

LoopForever:
    b LoopForever
 800bade:	e7fe      	b.n	800bade <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800bae0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800bae4:	0800df40 	.word	0x0800df40
	ldr	r0, =_sdata
 800bae8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800baec:	20000290 	.word	0x20000290
	ldr	r2, =_sbss
 800baf0:	20000290 	.word	0x20000290
	ldr	r3, = _ebss
 800baf4:	20003088 	.word	0x20003088

0800baf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800baf8:	e7fe      	b.n	800baf8 <ADC1_2_IRQHandler>

0800bafa <atoi>:
 800bafa:	220a      	movs	r2, #10
 800bafc:	2100      	movs	r1, #0
 800bafe:	f000 b8cf 	b.w	800bca0 <strtol>
	...

0800bb04 <__errno>:
 800bb04:	4b01      	ldr	r3, [pc, #4]	; (800bb0c <__errno+0x8>)
 800bb06:	6818      	ldr	r0, [r3, #0]
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	200000bc 	.word	0x200000bc

0800bb10 <__libc_init_array>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	4e0d      	ldr	r6, [pc, #52]	; (800bb48 <__libc_init_array+0x38>)
 800bb14:	4c0d      	ldr	r4, [pc, #52]	; (800bb4c <__libc_init_array+0x3c>)
 800bb16:	1ba4      	subs	r4, r4, r6
 800bb18:	10a4      	asrs	r4, r4, #2
 800bb1a:	2500      	movs	r5, #0
 800bb1c:	42a5      	cmp	r5, r4
 800bb1e:	d109      	bne.n	800bb34 <__libc_init_array+0x24>
 800bb20:	4e0b      	ldr	r6, [pc, #44]	; (800bb50 <__libc_init_array+0x40>)
 800bb22:	4c0c      	ldr	r4, [pc, #48]	; (800bb54 <__libc_init_array+0x44>)
 800bb24:	f001 ff66 	bl	800d9f4 <_init>
 800bb28:	1ba4      	subs	r4, r4, r6
 800bb2a:	10a4      	asrs	r4, r4, #2
 800bb2c:	2500      	movs	r5, #0
 800bb2e:	42a5      	cmp	r5, r4
 800bb30:	d105      	bne.n	800bb3e <__libc_init_array+0x2e>
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb38:	4798      	blx	r3
 800bb3a:	3501      	adds	r5, #1
 800bb3c:	e7ee      	b.n	800bb1c <__libc_init_array+0xc>
 800bb3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb42:	4798      	blx	r3
 800bb44:	3501      	adds	r5, #1
 800bb46:	e7f2      	b.n	800bb2e <__libc_init_array+0x1e>
 800bb48:	0800df38 	.word	0x0800df38
 800bb4c:	0800df38 	.word	0x0800df38
 800bb50:	0800df38 	.word	0x0800df38
 800bb54:	0800df3c 	.word	0x0800df3c

0800bb58 <memset>:
 800bb58:	4402      	add	r2, r0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d100      	bne.n	800bb62 <memset+0xa>
 800bb60:	4770      	bx	lr
 800bb62:	f803 1b01 	strb.w	r1, [r3], #1
 800bb66:	e7f9      	b.n	800bb5c <memset+0x4>

0800bb68 <siprintf>:
 800bb68:	b40e      	push	{r1, r2, r3}
 800bb6a:	b500      	push	{lr}
 800bb6c:	b09c      	sub	sp, #112	; 0x70
 800bb6e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb70:	9002      	str	r0, [sp, #8]
 800bb72:	9006      	str	r0, [sp, #24]
 800bb74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb78:	4809      	ldr	r0, [pc, #36]	; (800bba0 <siprintf+0x38>)
 800bb7a:	9107      	str	r1, [sp, #28]
 800bb7c:	9104      	str	r1, [sp, #16]
 800bb7e:	4909      	ldr	r1, [pc, #36]	; (800bba4 <siprintf+0x3c>)
 800bb80:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb84:	9105      	str	r1, [sp, #20]
 800bb86:	6800      	ldr	r0, [r0, #0]
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	a902      	add	r1, sp, #8
 800bb8c:	f000 f90e 	bl	800bdac <_svfiprintf_r>
 800bb90:	9b02      	ldr	r3, [sp, #8]
 800bb92:	2200      	movs	r2, #0
 800bb94:	701a      	strb	r2, [r3, #0]
 800bb96:	b01c      	add	sp, #112	; 0x70
 800bb98:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb9c:	b003      	add	sp, #12
 800bb9e:	4770      	bx	lr
 800bba0:	200000bc 	.word	0x200000bc
 800bba4:	ffff0208 	.word	0xffff0208

0800bba8 <_strtol_l.isra.0>:
 800bba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbac:	4680      	mov	r8, r0
 800bbae:	4689      	mov	r9, r1
 800bbb0:	4692      	mov	sl, r2
 800bbb2:	461e      	mov	r6, r3
 800bbb4:	460f      	mov	r7, r1
 800bbb6:	463d      	mov	r5, r7
 800bbb8:	9808      	ldr	r0, [sp, #32]
 800bbba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbbe:	f000 f885 	bl	800bccc <__locale_ctype_ptr_l>
 800bbc2:	4420      	add	r0, r4
 800bbc4:	7843      	ldrb	r3, [r0, #1]
 800bbc6:	f013 0308 	ands.w	r3, r3, #8
 800bbca:	d132      	bne.n	800bc32 <_strtol_l.isra.0+0x8a>
 800bbcc:	2c2d      	cmp	r4, #45	; 0x2d
 800bbce:	d132      	bne.n	800bc36 <_strtol_l.isra.0+0x8e>
 800bbd0:	787c      	ldrb	r4, [r7, #1]
 800bbd2:	1cbd      	adds	r5, r7, #2
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	2e00      	cmp	r6, #0
 800bbd8:	d05d      	beq.n	800bc96 <_strtol_l.isra.0+0xee>
 800bbda:	2e10      	cmp	r6, #16
 800bbdc:	d109      	bne.n	800bbf2 <_strtol_l.isra.0+0x4a>
 800bbde:	2c30      	cmp	r4, #48	; 0x30
 800bbe0:	d107      	bne.n	800bbf2 <_strtol_l.isra.0+0x4a>
 800bbe2:	782b      	ldrb	r3, [r5, #0]
 800bbe4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bbe8:	2b58      	cmp	r3, #88	; 0x58
 800bbea:	d14f      	bne.n	800bc8c <_strtol_l.isra.0+0xe4>
 800bbec:	786c      	ldrb	r4, [r5, #1]
 800bbee:	2610      	movs	r6, #16
 800bbf0:	3502      	adds	r5, #2
 800bbf2:	2a00      	cmp	r2, #0
 800bbf4:	bf14      	ite	ne
 800bbf6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bbfa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bbfe:	2700      	movs	r7, #0
 800bc00:	fbb1 fcf6 	udiv	ip, r1, r6
 800bc04:	4638      	mov	r0, r7
 800bc06:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bc0a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bc0e:	2b09      	cmp	r3, #9
 800bc10:	d817      	bhi.n	800bc42 <_strtol_l.isra.0+0x9a>
 800bc12:	461c      	mov	r4, r3
 800bc14:	42a6      	cmp	r6, r4
 800bc16:	dd23      	ble.n	800bc60 <_strtol_l.isra.0+0xb8>
 800bc18:	1c7b      	adds	r3, r7, #1
 800bc1a:	d007      	beq.n	800bc2c <_strtol_l.isra.0+0x84>
 800bc1c:	4584      	cmp	ip, r0
 800bc1e:	d31c      	bcc.n	800bc5a <_strtol_l.isra.0+0xb2>
 800bc20:	d101      	bne.n	800bc26 <_strtol_l.isra.0+0x7e>
 800bc22:	45a6      	cmp	lr, r4
 800bc24:	db19      	blt.n	800bc5a <_strtol_l.isra.0+0xb2>
 800bc26:	fb00 4006 	mla	r0, r0, r6, r4
 800bc2a:	2701      	movs	r7, #1
 800bc2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc30:	e7eb      	b.n	800bc0a <_strtol_l.isra.0+0x62>
 800bc32:	462f      	mov	r7, r5
 800bc34:	e7bf      	b.n	800bbb6 <_strtol_l.isra.0+0xe>
 800bc36:	2c2b      	cmp	r4, #43	; 0x2b
 800bc38:	bf04      	itt	eq
 800bc3a:	1cbd      	addeq	r5, r7, #2
 800bc3c:	787c      	ldrbeq	r4, [r7, #1]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	e7c9      	b.n	800bbd6 <_strtol_l.isra.0+0x2e>
 800bc42:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bc46:	2b19      	cmp	r3, #25
 800bc48:	d801      	bhi.n	800bc4e <_strtol_l.isra.0+0xa6>
 800bc4a:	3c37      	subs	r4, #55	; 0x37
 800bc4c:	e7e2      	b.n	800bc14 <_strtol_l.isra.0+0x6c>
 800bc4e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bc52:	2b19      	cmp	r3, #25
 800bc54:	d804      	bhi.n	800bc60 <_strtol_l.isra.0+0xb8>
 800bc56:	3c57      	subs	r4, #87	; 0x57
 800bc58:	e7dc      	b.n	800bc14 <_strtol_l.isra.0+0x6c>
 800bc5a:	f04f 37ff 	mov.w	r7, #4294967295
 800bc5e:	e7e5      	b.n	800bc2c <_strtol_l.isra.0+0x84>
 800bc60:	1c7b      	adds	r3, r7, #1
 800bc62:	d108      	bne.n	800bc76 <_strtol_l.isra.0+0xce>
 800bc64:	2322      	movs	r3, #34	; 0x22
 800bc66:	f8c8 3000 	str.w	r3, [r8]
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	f1ba 0f00 	cmp.w	sl, #0
 800bc70:	d107      	bne.n	800bc82 <_strtol_l.isra.0+0xda>
 800bc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc76:	b102      	cbz	r2, 800bc7a <_strtol_l.isra.0+0xd2>
 800bc78:	4240      	negs	r0, r0
 800bc7a:	f1ba 0f00 	cmp.w	sl, #0
 800bc7e:	d0f8      	beq.n	800bc72 <_strtol_l.isra.0+0xca>
 800bc80:	b10f      	cbz	r7, 800bc86 <_strtol_l.isra.0+0xde>
 800bc82:	f105 39ff 	add.w	r9, r5, #4294967295
 800bc86:	f8ca 9000 	str.w	r9, [sl]
 800bc8a:	e7f2      	b.n	800bc72 <_strtol_l.isra.0+0xca>
 800bc8c:	2430      	movs	r4, #48	; 0x30
 800bc8e:	2e00      	cmp	r6, #0
 800bc90:	d1af      	bne.n	800bbf2 <_strtol_l.isra.0+0x4a>
 800bc92:	2608      	movs	r6, #8
 800bc94:	e7ad      	b.n	800bbf2 <_strtol_l.isra.0+0x4a>
 800bc96:	2c30      	cmp	r4, #48	; 0x30
 800bc98:	d0a3      	beq.n	800bbe2 <_strtol_l.isra.0+0x3a>
 800bc9a:	260a      	movs	r6, #10
 800bc9c:	e7a9      	b.n	800bbf2 <_strtol_l.isra.0+0x4a>
	...

0800bca0 <strtol>:
 800bca0:	4b08      	ldr	r3, [pc, #32]	; (800bcc4 <strtol+0x24>)
 800bca2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bca4:	681c      	ldr	r4, [r3, #0]
 800bca6:	4d08      	ldr	r5, [pc, #32]	; (800bcc8 <strtol+0x28>)
 800bca8:	6a23      	ldr	r3, [r4, #32]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	bf08      	it	eq
 800bcae:	462b      	moveq	r3, r5
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	460a      	mov	r2, r1
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f7ff ff75 	bl	800bba8 <_strtol_l.isra.0>
 800bcbe:	b003      	add	sp, #12
 800bcc0:	bd30      	pop	{r4, r5, pc}
 800bcc2:	bf00      	nop
 800bcc4:	200000bc 	.word	0x200000bc
 800bcc8:	20000120 	.word	0x20000120

0800bccc <__locale_ctype_ptr_l>:
 800bccc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bcd0:	4770      	bx	lr

0800bcd2 <__ascii_mbtowc>:
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	b901      	cbnz	r1, 800bcd8 <__ascii_mbtowc+0x6>
 800bcd6:	a901      	add	r1, sp, #4
 800bcd8:	b142      	cbz	r2, 800bcec <__ascii_mbtowc+0x1a>
 800bcda:	b14b      	cbz	r3, 800bcf0 <__ascii_mbtowc+0x1e>
 800bcdc:	7813      	ldrb	r3, [r2, #0]
 800bcde:	600b      	str	r3, [r1, #0]
 800bce0:	7812      	ldrb	r2, [r2, #0]
 800bce2:	1c10      	adds	r0, r2, #0
 800bce4:	bf18      	it	ne
 800bce6:	2001      	movne	r0, #1
 800bce8:	b002      	add	sp, #8
 800bcea:	4770      	bx	lr
 800bcec:	4610      	mov	r0, r2
 800bcee:	e7fb      	b.n	800bce8 <__ascii_mbtowc+0x16>
 800bcf0:	f06f 0001 	mvn.w	r0, #1
 800bcf4:	e7f8      	b.n	800bce8 <__ascii_mbtowc+0x16>

0800bcf6 <__ssputs_r>:
 800bcf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcfa:	688e      	ldr	r6, [r1, #8]
 800bcfc:	429e      	cmp	r6, r3
 800bcfe:	4682      	mov	sl, r0
 800bd00:	460c      	mov	r4, r1
 800bd02:	4690      	mov	r8, r2
 800bd04:	4699      	mov	r9, r3
 800bd06:	d837      	bhi.n	800bd78 <__ssputs_r+0x82>
 800bd08:	898a      	ldrh	r2, [r1, #12]
 800bd0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd0e:	d031      	beq.n	800bd74 <__ssputs_r+0x7e>
 800bd10:	6825      	ldr	r5, [r4, #0]
 800bd12:	6909      	ldr	r1, [r1, #16]
 800bd14:	1a6f      	subs	r7, r5, r1
 800bd16:	6965      	ldr	r5, [r4, #20]
 800bd18:	2302      	movs	r3, #2
 800bd1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd1e:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd22:	f109 0301 	add.w	r3, r9, #1
 800bd26:	443b      	add	r3, r7
 800bd28:	429d      	cmp	r5, r3
 800bd2a:	bf38      	it	cc
 800bd2c:	461d      	movcc	r5, r3
 800bd2e:	0553      	lsls	r3, r2, #21
 800bd30:	d530      	bpl.n	800bd94 <__ssputs_r+0x9e>
 800bd32:	4629      	mov	r1, r5
 800bd34:	f000 fb3a 	bl	800c3ac <_malloc_r>
 800bd38:	4606      	mov	r6, r0
 800bd3a:	b950      	cbnz	r0, 800bd52 <__ssputs_r+0x5c>
 800bd3c:	230c      	movs	r3, #12
 800bd3e:	f8ca 3000 	str.w	r3, [sl]
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd52:	463a      	mov	r2, r7
 800bd54:	6921      	ldr	r1, [r4, #16]
 800bd56:	f000 fab6 	bl	800c2c6 <memcpy>
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd64:	81a3      	strh	r3, [r4, #12]
 800bd66:	6126      	str	r6, [r4, #16]
 800bd68:	6165      	str	r5, [r4, #20]
 800bd6a:	443e      	add	r6, r7
 800bd6c:	1bed      	subs	r5, r5, r7
 800bd6e:	6026      	str	r6, [r4, #0]
 800bd70:	60a5      	str	r5, [r4, #8]
 800bd72:	464e      	mov	r6, r9
 800bd74:	454e      	cmp	r6, r9
 800bd76:	d900      	bls.n	800bd7a <__ssputs_r+0x84>
 800bd78:	464e      	mov	r6, r9
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	4641      	mov	r1, r8
 800bd7e:	6820      	ldr	r0, [r4, #0]
 800bd80:	f000 faac 	bl	800c2dc <memmove>
 800bd84:	68a3      	ldr	r3, [r4, #8]
 800bd86:	1b9b      	subs	r3, r3, r6
 800bd88:	60a3      	str	r3, [r4, #8]
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	441e      	add	r6, r3
 800bd8e:	6026      	str	r6, [r4, #0]
 800bd90:	2000      	movs	r0, #0
 800bd92:	e7dc      	b.n	800bd4e <__ssputs_r+0x58>
 800bd94:	462a      	mov	r2, r5
 800bd96:	f000 fb63 	bl	800c460 <_realloc_r>
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d1e2      	bne.n	800bd66 <__ssputs_r+0x70>
 800bda0:	6921      	ldr	r1, [r4, #16]
 800bda2:	4650      	mov	r0, sl
 800bda4:	f000 fab4 	bl	800c310 <_free_r>
 800bda8:	e7c8      	b.n	800bd3c <__ssputs_r+0x46>
	...

0800bdac <_svfiprintf_r>:
 800bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb0:	461d      	mov	r5, r3
 800bdb2:	898b      	ldrh	r3, [r1, #12]
 800bdb4:	061f      	lsls	r7, r3, #24
 800bdb6:	b09d      	sub	sp, #116	; 0x74
 800bdb8:	4680      	mov	r8, r0
 800bdba:	460c      	mov	r4, r1
 800bdbc:	4616      	mov	r6, r2
 800bdbe:	d50f      	bpl.n	800bde0 <_svfiprintf_r+0x34>
 800bdc0:	690b      	ldr	r3, [r1, #16]
 800bdc2:	b96b      	cbnz	r3, 800bde0 <_svfiprintf_r+0x34>
 800bdc4:	2140      	movs	r1, #64	; 0x40
 800bdc6:	f000 faf1 	bl	800c3ac <_malloc_r>
 800bdca:	6020      	str	r0, [r4, #0]
 800bdcc:	6120      	str	r0, [r4, #16]
 800bdce:	b928      	cbnz	r0, 800bddc <_svfiprintf_r+0x30>
 800bdd0:	230c      	movs	r3, #12
 800bdd2:	f8c8 3000 	str.w	r3, [r8]
 800bdd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdda:	e0c8      	b.n	800bf6e <_svfiprintf_r+0x1c2>
 800bddc:	2340      	movs	r3, #64	; 0x40
 800bdde:	6163      	str	r3, [r4, #20]
 800bde0:	2300      	movs	r3, #0
 800bde2:	9309      	str	r3, [sp, #36]	; 0x24
 800bde4:	2320      	movs	r3, #32
 800bde6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdea:	2330      	movs	r3, #48	; 0x30
 800bdec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdf0:	9503      	str	r5, [sp, #12]
 800bdf2:	f04f 0b01 	mov.w	fp, #1
 800bdf6:	4637      	mov	r7, r6
 800bdf8:	463d      	mov	r5, r7
 800bdfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bdfe:	b10b      	cbz	r3, 800be04 <_svfiprintf_r+0x58>
 800be00:	2b25      	cmp	r3, #37	; 0x25
 800be02:	d13e      	bne.n	800be82 <_svfiprintf_r+0xd6>
 800be04:	ebb7 0a06 	subs.w	sl, r7, r6
 800be08:	d00b      	beq.n	800be22 <_svfiprintf_r+0x76>
 800be0a:	4653      	mov	r3, sl
 800be0c:	4632      	mov	r2, r6
 800be0e:	4621      	mov	r1, r4
 800be10:	4640      	mov	r0, r8
 800be12:	f7ff ff70 	bl	800bcf6 <__ssputs_r>
 800be16:	3001      	adds	r0, #1
 800be18:	f000 80a4 	beq.w	800bf64 <_svfiprintf_r+0x1b8>
 800be1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be1e:	4453      	add	r3, sl
 800be20:	9309      	str	r3, [sp, #36]	; 0x24
 800be22:	783b      	ldrb	r3, [r7, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 809d 	beq.w	800bf64 <_svfiprintf_r+0x1b8>
 800be2a:	2300      	movs	r3, #0
 800be2c:	f04f 32ff 	mov.w	r2, #4294967295
 800be30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be34:	9304      	str	r3, [sp, #16]
 800be36:	9307      	str	r3, [sp, #28]
 800be38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be3c:	931a      	str	r3, [sp, #104]	; 0x68
 800be3e:	462f      	mov	r7, r5
 800be40:	2205      	movs	r2, #5
 800be42:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be46:	4850      	ldr	r0, [pc, #320]	; (800bf88 <_svfiprintf_r+0x1dc>)
 800be48:	f7f4 f9e2 	bl	8000210 <memchr>
 800be4c:	9b04      	ldr	r3, [sp, #16]
 800be4e:	b9d0      	cbnz	r0, 800be86 <_svfiprintf_r+0xda>
 800be50:	06d9      	lsls	r1, r3, #27
 800be52:	bf44      	itt	mi
 800be54:	2220      	movmi	r2, #32
 800be56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be5a:	071a      	lsls	r2, r3, #28
 800be5c:	bf44      	itt	mi
 800be5e:	222b      	movmi	r2, #43	; 0x2b
 800be60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be64:	782a      	ldrb	r2, [r5, #0]
 800be66:	2a2a      	cmp	r2, #42	; 0x2a
 800be68:	d015      	beq.n	800be96 <_svfiprintf_r+0xea>
 800be6a:	9a07      	ldr	r2, [sp, #28]
 800be6c:	462f      	mov	r7, r5
 800be6e:	2000      	movs	r0, #0
 800be70:	250a      	movs	r5, #10
 800be72:	4639      	mov	r1, r7
 800be74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be78:	3b30      	subs	r3, #48	; 0x30
 800be7a:	2b09      	cmp	r3, #9
 800be7c:	d94d      	bls.n	800bf1a <_svfiprintf_r+0x16e>
 800be7e:	b1b8      	cbz	r0, 800beb0 <_svfiprintf_r+0x104>
 800be80:	e00f      	b.n	800bea2 <_svfiprintf_r+0xf6>
 800be82:	462f      	mov	r7, r5
 800be84:	e7b8      	b.n	800bdf8 <_svfiprintf_r+0x4c>
 800be86:	4a40      	ldr	r2, [pc, #256]	; (800bf88 <_svfiprintf_r+0x1dc>)
 800be88:	1a80      	subs	r0, r0, r2
 800be8a:	fa0b f000 	lsl.w	r0, fp, r0
 800be8e:	4318      	orrs	r0, r3
 800be90:	9004      	str	r0, [sp, #16]
 800be92:	463d      	mov	r5, r7
 800be94:	e7d3      	b.n	800be3e <_svfiprintf_r+0x92>
 800be96:	9a03      	ldr	r2, [sp, #12]
 800be98:	1d11      	adds	r1, r2, #4
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	9103      	str	r1, [sp, #12]
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	db01      	blt.n	800bea6 <_svfiprintf_r+0xfa>
 800bea2:	9207      	str	r2, [sp, #28]
 800bea4:	e004      	b.n	800beb0 <_svfiprintf_r+0x104>
 800bea6:	4252      	negs	r2, r2
 800bea8:	f043 0302 	orr.w	r3, r3, #2
 800beac:	9207      	str	r2, [sp, #28]
 800beae:	9304      	str	r3, [sp, #16]
 800beb0:	783b      	ldrb	r3, [r7, #0]
 800beb2:	2b2e      	cmp	r3, #46	; 0x2e
 800beb4:	d10c      	bne.n	800bed0 <_svfiprintf_r+0x124>
 800beb6:	787b      	ldrb	r3, [r7, #1]
 800beb8:	2b2a      	cmp	r3, #42	; 0x2a
 800beba:	d133      	bne.n	800bf24 <_svfiprintf_r+0x178>
 800bebc:	9b03      	ldr	r3, [sp, #12]
 800bebe:	1d1a      	adds	r2, r3, #4
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	9203      	str	r2, [sp, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	bfb8      	it	lt
 800bec8:	f04f 33ff 	movlt.w	r3, #4294967295
 800becc:	3702      	adds	r7, #2
 800bece:	9305      	str	r3, [sp, #20]
 800bed0:	4d2e      	ldr	r5, [pc, #184]	; (800bf8c <_svfiprintf_r+0x1e0>)
 800bed2:	7839      	ldrb	r1, [r7, #0]
 800bed4:	2203      	movs	r2, #3
 800bed6:	4628      	mov	r0, r5
 800bed8:	f7f4 f99a 	bl	8000210 <memchr>
 800bedc:	b138      	cbz	r0, 800beee <_svfiprintf_r+0x142>
 800bede:	2340      	movs	r3, #64	; 0x40
 800bee0:	1b40      	subs	r0, r0, r5
 800bee2:	fa03 f000 	lsl.w	r0, r3, r0
 800bee6:	9b04      	ldr	r3, [sp, #16]
 800bee8:	4303      	orrs	r3, r0
 800beea:	3701      	adds	r7, #1
 800beec:	9304      	str	r3, [sp, #16]
 800beee:	7839      	ldrb	r1, [r7, #0]
 800bef0:	4827      	ldr	r0, [pc, #156]	; (800bf90 <_svfiprintf_r+0x1e4>)
 800bef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bef6:	2206      	movs	r2, #6
 800bef8:	1c7e      	adds	r6, r7, #1
 800befa:	f7f4 f989 	bl	8000210 <memchr>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d038      	beq.n	800bf74 <_svfiprintf_r+0x1c8>
 800bf02:	4b24      	ldr	r3, [pc, #144]	; (800bf94 <_svfiprintf_r+0x1e8>)
 800bf04:	bb13      	cbnz	r3, 800bf4c <_svfiprintf_r+0x1a0>
 800bf06:	9b03      	ldr	r3, [sp, #12]
 800bf08:	3307      	adds	r3, #7
 800bf0a:	f023 0307 	bic.w	r3, r3, #7
 800bf0e:	3308      	adds	r3, #8
 800bf10:	9303      	str	r3, [sp, #12]
 800bf12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf14:	444b      	add	r3, r9
 800bf16:	9309      	str	r3, [sp, #36]	; 0x24
 800bf18:	e76d      	b.n	800bdf6 <_svfiprintf_r+0x4a>
 800bf1a:	fb05 3202 	mla	r2, r5, r2, r3
 800bf1e:	2001      	movs	r0, #1
 800bf20:	460f      	mov	r7, r1
 800bf22:	e7a6      	b.n	800be72 <_svfiprintf_r+0xc6>
 800bf24:	2300      	movs	r3, #0
 800bf26:	3701      	adds	r7, #1
 800bf28:	9305      	str	r3, [sp, #20]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	250a      	movs	r5, #10
 800bf2e:	4638      	mov	r0, r7
 800bf30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf34:	3a30      	subs	r2, #48	; 0x30
 800bf36:	2a09      	cmp	r2, #9
 800bf38:	d903      	bls.n	800bf42 <_svfiprintf_r+0x196>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0c8      	beq.n	800bed0 <_svfiprintf_r+0x124>
 800bf3e:	9105      	str	r1, [sp, #20]
 800bf40:	e7c6      	b.n	800bed0 <_svfiprintf_r+0x124>
 800bf42:	fb05 2101 	mla	r1, r5, r1, r2
 800bf46:	2301      	movs	r3, #1
 800bf48:	4607      	mov	r7, r0
 800bf4a:	e7f0      	b.n	800bf2e <_svfiprintf_r+0x182>
 800bf4c:	ab03      	add	r3, sp, #12
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	4622      	mov	r2, r4
 800bf52:	4b11      	ldr	r3, [pc, #68]	; (800bf98 <_svfiprintf_r+0x1ec>)
 800bf54:	a904      	add	r1, sp, #16
 800bf56:	4640      	mov	r0, r8
 800bf58:	f3af 8000 	nop.w
 800bf5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bf60:	4681      	mov	r9, r0
 800bf62:	d1d6      	bne.n	800bf12 <_svfiprintf_r+0x166>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	065b      	lsls	r3, r3, #25
 800bf68:	f53f af35 	bmi.w	800bdd6 <_svfiprintf_r+0x2a>
 800bf6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf6e:	b01d      	add	sp, #116	; 0x74
 800bf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf74:	ab03      	add	r3, sp, #12
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	4622      	mov	r2, r4
 800bf7a:	4b07      	ldr	r3, [pc, #28]	; (800bf98 <_svfiprintf_r+0x1ec>)
 800bf7c:	a904      	add	r1, sp, #16
 800bf7e:	4640      	mov	r0, r8
 800bf80:	f000 f882 	bl	800c088 <_printf_i>
 800bf84:	e7ea      	b.n	800bf5c <_svfiprintf_r+0x1b0>
 800bf86:	bf00      	nop
 800bf88:	0800ddb6 	.word	0x0800ddb6
 800bf8c:	0800ddbc 	.word	0x0800ddbc
 800bf90:	0800ddc0 	.word	0x0800ddc0
 800bf94:	00000000 	.word	0x00000000
 800bf98:	0800bcf7 	.word	0x0800bcf7

0800bf9c <_printf_common>:
 800bf9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa0:	4691      	mov	r9, r2
 800bfa2:	461f      	mov	r7, r3
 800bfa4:	688a      	ldr	r2, [r1, #8]
 800bfa6:	690b      	ldr	r3, [r1, #16]
 800bfa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfac:	4293      	cmp	r3, r2
 800bfae:	bfb8      	it	lt
 800bfb0:	4613      	movlt	r3, r2
 800bfb2:	f8c9 3000 	str.w	r3, [r9]
 800bfb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfba:	4606      	mov	r6, r0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	b112      	cbz	r2, 800bfc6 <_printf_common+0x2a>
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	f8c9 3000 	str.w	r3, [r9]
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	0699      	lsls	r1, r3, #26
 800bfca:	bf42      	ittt	mi
 800bfcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bfd0:	3302      	addmi	r3, #2
 800bfd2:	f8c9 3000 	strmi.w	r3, [r9]
 800bfd6:	6825      	ldr	r5, [r4, #0]
 800bfd8:	f015 0506 	ands.w	r5, r5, #6
 800bfdc:	d107      	bne.n	800bfee <_printf_common+0x52>
 800bfde:	f104 0a19 	add.w	sl, r4, #25
 800bfe2:	68e3      	ldr	r3, [r4, #12]
 800bfe4:	f8d9 2000 	ldr.w	r2, [r9]
 800bfe8:	1a9b      	subs	r3, r3, r2
 800bfea:	42ab      	cmp	r3, r5
 800bfec:	dc28      	bgt.n	800c040 <_printf_common+0xa4>
 800bfee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bff2:	6822      	ldr	r2, [r4, #0]
 800bff4:	3300      	adds	r3, #0
 800bff6:	bf18      	it	ne
 800bff8:	2301      	movne	r3, #1
 800bffa:	0692      	lsls	r2, r2, #26
 800bffc:	d42d      	bmi.n	800c05a <_printf_common+0xbe>
 800bffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c002:	4639      	mov	r1, r7
 800c004:	4630      	mov	r0, r6
 800c006:	47c0      	blx	r8
 800c008:	3001      	adds	r0, #1
 800c00a:	d020      	beq.n	800c04e <_printf_common+0xb2>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	68e5      	ldr	r5, [r4, #12]
 800c010:	f8d9 2000 	ldr.w	r2, [r9]
 800c014:	f003 0306 	and.w	r3, r3, #6
 800c018:	2b04      	cmp	r3, #4
 800c01a:	bf08      	it	eq
 800c01c:	1aad      	subeq	r5, r5, r2
 800c01e:	68a3      	ldr	r3, [r4, #8]
 800c020:	6922      	ldr	r2, [r4, #16]
 800c022:	bf0c      	ite	eq
 800c024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c028:	2500      	movne	r5, #0
 800c02a:	4293      	cmp	r3, r2
 800c02c:	bfc4      	itt	gt
 800c02e:	1a9b      	subgt	r3, r3, r2
 800c030:	18ed      	addgt	r5, r5, r3
 800c032:	f04f 0900 	mov.w	r9, #0
 800c036:	341a      	adds	r4, #26
 800c038:	454d      	cmp	r5, r9
 800c03a:	d11a      	bne.n	800c072 <_printf_common+0xd6>
 800c03c:	2000      	movs	r0, #0
 800c03e:	e008      	b.n	800c052 <_printf_common+0xb6>
 800c040:	2301      	movs	r3, #1
 800c042:	4652      	mov	r2, sl
 800c044:	4639      	mov	r1, r7
 800c046:	4630      	mov	r0, r6
 800c048:	47c0      	blx	r8
 800c04a:	3001      	adds	r0, #1
 800c04c:	d103      	bne.n	800c056 <_printf_common+0xba>
 800c04e:	f04f 30ff 	mov.w	r0, #4294967295
 800c052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c056:	3501      	adds	r5, #1
 800c058:	e7c3      	b.n	800bfe2 <_printf_common+0x46>
 800c05a:	18e1      	adds	r1, r4, r3
 800c05c:	1c5a      	adds	r2, r3, #1
 800c05e:	2030      	movs	r0, #48	; 0x30
 800c060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c064:	4422      	add	r2, r4
 800c066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c06a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c06e:	3302      	adds	r3, #2
 800c070:	e7c5      	b.n	800bffe <_printf_common+0x62>
 800c072:	2301      	movs	r3, #1
 800c074:	4622      	mov	r2, r4
 800c076:	4639      	mov	r1, r7
 800c078:	4630      	mov	r0, r6
 800c07a:	47c0      	blx	r8
 800c07c:	3001      	adds	r0, #1
 800c07e:	d0e6      	beq.n	800c04e <_printf_common+0xb2>
 800c080:	f109 0901 	add.w	r9, r9, #1
 800c084:	e7d8      	b.n	800c038 <_printf_common+0x9c>
	...

0800c088 <_printf_i>:
 800c088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c08c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c090:	460c      	mov	r4, r1
 800c092:	7e09      	ldrb	r1, [r1, #24]
 800c094:	b085      	sub	sp, #20
 800c096:	296e      	cmp	r1, #110	; 0x6e
 800c098:	4617      	mov	r7, r2
 800c09a:	4606      	mov	r6, r0
 800c09c:	4698      	mov	r8, r3
 800c09e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0a0:	f000 80b3 	beq.w	800c20a <_printf_i+0x182>
 800c0a4:	d822      	bhi.n	800c0ec <_printf_i+0x64>
 800c0a6:	2963      	cmp	r1, #99	; 0x63
 800c0a8:	d036      	beq.n	800c118 <_printf_i+0x90>
 800c0aa:	d80a      	bhi.n	800c0c2 <_printf_i+0x3a>
 800c0ac:	2900      	cmp	r1, #0
 800c0ae:	f000 80b9 	beq.w	800c224 <_printf_i+0x19c>
 800c0b2:	2958      	cmp	r1, #88	; 0x58
 800c0b4:	f000 8083 	beq.w	800c1be <_printf_i+0x136>
 800c0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c0c0:	e032      	b.n	800c128 <_printf_i+0xa0>
 800c0c2:	2964      	cmp	r1, #100	; 0x64
 800c0c4:	d001      	beq.n	800c0ca <_printf_i+0x42>
 800c0c6:	2969      	cmp	r1, #105	; 0x69
 800c0c8:	d1f6      	bne.n	800c0b8 <_printf_i+0x30>
 800c0ca:	6820      	ldr	r0, [r4, #0]
 800c0cc:	6813      	ldr	r3, [r2, #0]
 800c0ce:	0605      	lsls	r5, r0, #24
 800c0d0:	f103 0104 	add.w	r1, r3, #4
 800c0d4:	d52a      	bpl.n	800c12c <_printf_i+0xa4>
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6011      	str	r1, [r2, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	da03      	bge.n	800c0e6 <_printf_i+0x5e>
 800c0de:	222d      	movs	r2, #45	; 0x2d
 800c0e0:	425b      	negs	r3, r3
 800c0e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c0e6:	486f      	ldr	r0, [pc, #444]	; (800c2a4 <_printf_i+0x21c>)
 800c0e8:	220a      	movs	r2, #10
 800c0ea:	e039      	b.n	800c160 <_printf_i+0xd8>
 800c0ec:	2973      	cmp	r1, #115	; 0x73
 800c0ee:	f000 809d 	beq.w	800c22c <_printf_i+0x1a4>
 800c0f2:	d808      	bhi.n	800c106 <_printf_i+0x7e>
 800c0f4:	296f      	cmp	r1, #111	; 0x6f
 800c0f6:	d020      	beq.n	800c13a <_printf_i+0xb2>
 800c0f8:	2970      	cmp	r1, #112	; 0x70
 800c0fa:	d1dd      	bne.n	800c0b8 <_printf_i+0x30>
 800c0fc:	6823      	ldr	r3, [r4, #0]
 800c0fe:	f043 0320 	orr.w	r3, r3, #32
 800c102:	6023      	str	r3, [r4, #0]
 800c104:	e003      	b.n	800c10e <_printf_i+0x86>
 800c106:	2975      	cmp	r1, #117	; 0x75
 800c108:	d017      	beq.n	800c13a <_printf_i+0xb2>
 800c10a:	2978      	cmp	r1, #120	; 0x78
 800c10c:	d1d4      	bne.n	800c0b8 <_printf_i+0x30>
 800c10e:	2378      	movs	r3, #120	; 0x78
 800c110:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c114:	4864      	ldr	r0, [pc, #400]	; (800c2a8 <_printf_i+0x220>)
 800c116:	e055      	b.n	800c1c4 <_printf_i+0x13c>
 800c118:	6813      	ldr	r3, [r2, #0]
 800c11a:	1d19      	adds	r1, r3, #4
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	6011      	str	r1, [r2, #0]
 800c120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c128:	2301      	movs	r3, #1
 800c12a:	e08c      	b.n	800c246 <_printf_i+0x1be>
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6011      	str	r1, [r2, #0]
 800c130:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c134:	bf18      	it	ne
 800c136:	b21b      	sxthne	r3, r3
 800c138:	e7cf      	b.n	800c0da <_printf_i+0x52>
 800c13a:	6813      	ldr	r3, [r2, #0]
 800c13c:	6825      	ldr	r5, [r4, #0]
 800c13e:	1d18      	adds	r0, r3, #4
 800c140:	6010      	str	r0, [r2, #0]
 800c142:	0628      	lsls	r0, r5, #24
 800c144:	d501      	bpl.n	800c14a <_printf_i+0xc2>
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	e002      	b.n	800c150 <_printf_i+0xc8>
 800c14a:	0668      	lsls	r0, r5, #25
 800c14c:	d5fb      	bpl.n	800c146 <_printf_i+0xbe>
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	4854      	ldr	r0, [pc, #336]	; (800c2a4 <_printf_i+0x21c>)
 800c152:	296f      	cmp	r1, #111	; 0x6f
 800c154:	bf14      	ite	ne
 800c156:	220a      	movne	r2, #10
 800c158:	2208      	moveq	r2, #8
 800c15a:	2100      	movs	r1, #0
 800c15c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c160:	6865      	ldr	r5, [r4, #4]
 800c162:	60a5      	str	r5, [r4, #8]
 800c164:	2d00      	cmp	r5, #0
 800c166:	f2c0 8095 	blt.w	800c294 <_printf_i+0x20c>
 800c16a:	6821      	ldr	r1, [r4, #0]
 800c16c:	f021 0104 	bic.w	r1, r1, #4
 800c170:	6021      	str	r1, [r4, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d13d      	bne.n	800c1f2 <_printf_i+0x16a>
 800c176:	2d00      	cmp	r5, #0
 800c178:	f040 808e 	bne.w	800c298 <_printf_i+0x210>
 800c17c:	4665      	mov	r5, ip
 800c17e:	2a08      	cmp	r2, #8
 800c180:	d10b      	bne.n	800c19a <_printf_i+0x112>
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	07db      	lsls	r3, r3, #31
 800c186:	d508      	bpl.n	800c19a <_printf_i+0x112>
 800c188:	6923      	ldr	r3, [r4, #16]
 800c18a:	6862      	ldr	r2, [r4, #4]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	bfde      	ittt	le
 800c190:	2330      	movle	r3, #48	; 0x30
 800c192:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c19a:	ebac 0305 	sub.w	r3, ip, r5
 800c19e:	6123      	str	r3, [r4, #16]
 800c1a0:	f8cd 8000 	str.w	r8, [sp]
 800c1a4:	463b      	mov	r3, r7
 800c1a6:	aa03      	add	r2, sp, #12
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7ff fef6 	bl	800bf9c <_printf_common>
 800c1b0:	3001      	adds	r0, #1
 800c1b2:	d14d      	bne.n	800c250 <_printf_i+0x1c8>
 800c1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b8:	b005      	add	sp, #20
 800c1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1be:	4839      	ldr	r0, [pc, #228]	; (800c2a4 <_printf_i+0x21c>)
 800c1c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c1c4:	6813      	ldr	r3, [r2, #0]
 800c1c6:	6821      	ldr	r1, [r4, #0]
 800c1c8:	1d1d      	adds	r5, r3, #4
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6015      	str	r5, [r2, #0]
 800c1ce:	060a      	lsls	r2, r1, #24
 800c1d0:	d50b      	bpl.n	800c1ea <_printf_i+0x162>
 800c1d2:	07ca      	lsls	r2, r1, #31
 800c1d4:	bf44      	itt	mi
 800c1d6:	f041 0120 	orrmi.w	r1, r1, #32
 800c1da:	6021      	strmi	r1, [r4, #0]
 800c1dc:	b91b      	cbnz	r3, 800c1e6 <_printf_i+0x15e>
 800c1de:	6822      	ldr	r2, [r4, #0]
 800c1e0:	f022 0220 	bic.w	r2, r2, #32
 800c1e4:	6022      	str	r2, [r4, #0]
 800c1e6:	2210      	movs	r2, #16
 800c1e8:	e7b7      	b.n	800c15a <_printf_i+0xd2>
 800c1ea:	064d      	lsls	r5, r1, #25
 800c1ec:	bf48      	it	mi
 800c1ee:	b29b      	uxthmi	r3, r3
 800c1f0:	e7ef      	b.n	800c1d2 <_printf_i+0x14a>
 800c1f2:	4665      	mov	r5, ip
 800c1f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1f8:	fb02 3311 	mls	r3, r2, r1, r3
 800c1fc:	5cc3      	ldrb	r3, [r0, r3]
 800c1fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c202:	460b      	mov	r3, r1
 800c204:	2900      	cmp	r1, #0
 800c206:	d1f5      	bne.n	800c1f4 <_printf_i+0x16c>
 800c208:	e7b9      	b.n	800c17e <_printf_i+0xf6>
 800c20a:	6813      	ldr	r3, [r2, #0]
 800c20c:	6825      	ldr	r5, [r4, #0]
 800c20e:	6961      	ldr	r1, [r4, #20]
 800c210:	1d18      	adds	r0, r3, #4
 800c212:	6010      	str	r0, [r2, #0]
 800c214:	0628      	lsls	r0, r5, #24
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	d501      	bpl.n	800c21e <_printf_i+0x196>
 800c21a:	6019      	str	r1, [r3, #0]
 800c21c:	e002      	b.n	800c224 <_printf_i+0x19c>
 800c21e:	066a      	lsls	r2, r5, #25
 800c220:	d5fb      	bpl.n	800c21a <_printf_i+0x192>
 800c222:	8019      	strh	r1, [r3, #0]
 800c224:	2300      	movs	r3, #0
 800c226:	6123      	str	r3, [r4, #16]
 800c228:	4665      	mov	r5, ip
 800c22a:	e7b9      	b.n	800c1a0 <_printf_i+0x118>
 800c22c:	6813      	ldr	r3, [r2, #0]
 800c22e:	1d19      	adds	r1, r3, #4
 800c230:	6011      	str	r1, [r2, #0]
 800c232:	681d      	ldr	r5, [r3, #0]
 800c234:	6862      	ldr	r2, [r4, #4]
 800c236:	2100      	movs	r1, #0
 800c238:	4628      	mov	r0, r5
 800c23a:	f7f3 ffe9 	bl	8000210 <memchr>
 800c23e:	b108      	cbz	r0, 800c244 <_printf_i+0x1bc>
 800c240:	1b40      	subs	r0, r0, r5
 800c242:	6060      	str	r0, [r4, #4]
 800c244:	6863      	ldr	r3, [r4, #4]
 800c246:	6123      	str	r3, [r4, #16]
 800c248:	2300      	movs	r3, #0
 800c24a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c24e:	e7a7      	b.n	800c1a0 <_printf_i+0x118>
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	462a      	mov	r2, r5
 800c254:	4639      	mov	r1, r7
 800c256:	4630      	mov	r0, r6
 800c258:	47c0      	blx	r8
 800c25a:	3001      	adds	r0, #1
 800c25c:	d0aa      	beq.n	800c1b4 <_printf_i+0x12c>
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	079b      	lsls	r3, r3, #30
 800c262:	d413      	bmi.n	800c28c <_printf_i+0x204>
 800c264:	68e0      	ldr	r0, [r4, #12]
 800c266:	9b03      	ldr	r3, [sp, #12]
 800c268:	4298      	cmp	r0, r3
 800c26a:	bfb8      	it	lt
 800c26c:	4618      	movlt	r0, r3
 800c26e:	e7a3      	b.n	800c1b8 <_printf_i+0x130>
 800c270:	2301      	movs	r3, #1
 800c272:	464a      	mov	r2, r9
 800c274:	4639      	mov	r1, r7
 800c276:	4630      	mov	r0, r6
 800c278:	47c0      	blx	r8
 800c27a:	3001      	adds	r0, #1
 800c27c:	d09a      	beq.n	800c1b4 <_printf_i+0x12c>
 800c27e:	3501      	adds	r5, #1
 800c280:	68e3      	ldr	r3, [r4, #12]
 800c282:	9a03      	ldr	r2, [sp, #12]
 800c284:	1a9b      	subs	r3, r3, r2
 800c286:	42ab      	cmp	r3, r5
 800c288:	dcf2      	bgt.n	800c270 <_printf_i+0x1e8>
 800c28a:	e7eb      	b.n	800c264 <_printf_i+0x1dc>
 800c28c:	2500      	movs	r5, #0
 800c28e:	f104 0919 	add.w	r9, r4, #25
 800c292:	e7f5      	b.n	800c280 <_printf_i+0x1f8>
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1ac      	bne.n	800c1f2 <_printf_i+0x16a>
 800c298:	7803      	ldrb	r3, [r0, #0]
 800c29a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c29e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2a2:	e76c      	b.n	800c17e <_printf_i+0xf6>
 800c2a4:	0800ddc7 	.word	0x0800ddc7
 800c2a8:	0800ddd8 	.word	0x0800ddd8

0800c2ac <__ascii_wctomb>:
 800c2ac:	b149      	cbz	r1, 800c2c2 <__ascii_wctomb+0x16>
 800c2ae:	2aff      	cmp	r2, #255	; 0xff
 800c2b0:	bf85      	ittet	hi
 800c2b2:	238a      	movhi	r3, #138	; 0x8a
 800c2b4:	6003      	strhi	r3, [r0, #0]
 800c2b6:	700a      	strbls	r2, [r1, #0]
 800c2b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2bc:	bf98      	it	ls
 800c2be:	2001      	movls	r0, #1
 800c2c0:	4770      	bx	lr
 800c2c2:	4608      	mov	r0, r1
 800c2c4:	4770      	bx	lr

0800c2c6 <memcpy>:
 800c2c6:	b510      	push	{r4, lr}
 800c2c8:	1e43      	subs	r3, r0, #1
 800c2ca:	440a      	add	r2, r1
 800c2cc:	4291      	cmp	r1, r2
 800c2ce:	d100      	bne.n	800c2d2 <memcpy+0xc>
 800c2d0:	bd10      	pop	{r4, pc}
 800c2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2da:	e7f7      	b.n	800c2cc <memcpy+0x6>

0800c2dc <memmove>:
 800c2dc:	4288      	cmp	r0, r1
 800c2de:	b510      	push	{r4, lr}
 800c2e0:	eb01 0302 	add.w	r3, r1, r2
 800c2e4:	d807      	bhi.n	800c2f6 <memmove+0x1a>
 800c2e6:	1e42      	subs	r2, r0, #1
 800c2e8:	4299      	cmp	r1, r3
 800c2ea:	d00a      	beq.n	800c302 <memmove+0x26>
 800c2ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c2f4:	e7f8      	b.n	800c2e8 <memmove+0xc>
 800c2f6:	4283      	cmp	r3, r0
 800c2f8:	d9f5      	bls.n	800c2e6 <memmove+0xa>
 800c2fa:	1881      	adds	r1, r0, r2
 800c2fc:	1ad2      	subs	r2, r2, r3
 800c2fe:	42d3      	cmn	r3, r2
 800c300:	d100      	bne.n	800c304 <memmove+0x28>
 800c302:	bd10      	pop	{r4, pc}
 800c304:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c308:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c30c:	e7f7      	b.n	800c2fe <memmove+0x22>
	...

0800c310 <_free_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4605      	mov	r5, r0
 800c314:	2900      	cmp	r1, #0
 800c316:	d045      	beq.n	800c3a4 <_free_r+0x94>
 800c318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c31c:	1f0c      	subs	r4, r1, #4
 800c31e:	2b00      	cmp	r3, #0
 800c320:	bfb8      	it	lt
 800c322:	18e4      	addlt	r4, r4, r3
 800c324:	f000 f8d2 	bl	800c4cc <__malloc_lock>
 800c328:	4a1f      	ldr	r2, [pc, #124]	; (800c3a8 <_free_r+0x98>)
 800c32a:	6813      	ldr	r3, [r2, #0]
 800c32c:	4610      	mov	r0, r2
 800c32e:	b933      	cbnz	r3, 800c33e <_free_r+0x2e>
 800c330:	6063      	str	r3, [r4, #4]
 800c332:	6014      	str	r4, [r2, #0]
 800c334:	4628      	mov	r0, r5
 800c336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c33a:	f000 b8c8 	b.w	800c4ce <__malloc_unlock>
 800c33e:	42a3      	cmp	r3, r4
 800c340:	d90c      	bls.n	800c35c <_free_r+0x4c>
 800c342:	6821      	ldr	r1, [r4, #0]
 800c344:	1862      	adds	r2, r4, r1
 800c346:	4293      	cmp	r3, r2
 800c348:	bf04      	itt	eq
 800c34a:	681a      	ldreq	r2, [r3, #0]
 800c34c:	685b      	ldreq	r3, [r3, #4]
 800c34e:	6063      	str	r3, [r4, #4]
 800c350:	bf04      	itt	eq
 800c352:	1852      	addeq	r2, r2, r1
 800c354:	6022      	streq	r2, [r4, #0]
 800c356:	6004      	str	r4, [r0, #0]
 800c358:	e7ec      	b.n	800c334 <_free_r+0x24>
 800c35a:	4613      	mov	r3, r2
 800c35c:	685a      	ldr	r2, [r3, #4]
 800c35e:	b10a      	cbz	r2, 800c364 <_free_r+0x54>
 800c360:	42a2      	cmp	r2, r4
 800c362:	d9fa      	bls.n	800c35a <_free_r+0x4a>
 800c364:	6819      	ldr	r1, [r3, #0]
 800c366:	1858      	adds	r0, r3, r1
 800c368:	42a0      	cmp	r0, r4
 800c36a:	d10b      	bne.n	800c384 <_free_r+0x74>
 800c36c:	6820      	ldr	r0, [r4, #0]
 800c36e:	4401      	add	r1, r0
 800c370:	1858      	adds	r0, r3, r1
 800c372:	4282      	cmp	r2, r0
 800c374:	6019      	str	r1, [r3, #0]
 800c376:	d1dd      	bne.n	800c334 <_free_r+0x24>
 800c378:	6810      	ldr	r0, [r2, #0]
 800c37a:	6852      	ldr	r2, [r2, #4]
 800c37c:	605a      	str	r2, [r3, #4]
 800c37e:	4401      	add	r1, r0
 800c380:	6019      	str	r1, [r3, #0]
 800c382:	e7d7      	b.n	800c334 <_free_r+0x24>
 800c384:	d902      	bls.n	800c38c <_free_r+0x7c>
 800c386:	230c      	movs	r3, #12
 800c388:	602b      	str	r3, [r5, #0]
 800c38a:	e7d3      	b.n	800c334 <_free_r+0x24>
 800c38c:	6820      	ldr	r0, [r4, #0]
 800c38e:	1821      	adds	r1, r4, r0
 800c390:	428a      	cmp	r2, r1
 800c392:	bf04      	itt	eq
 800c394:	6811      	ldreq	r1, [r2, #0]
 800c396:	6852      	ldreq	r2, [r2, #4]
 800c398:	6062      	str	r2, [r4, #4]
 800c39a:	bf04      	itt	eq
 800c39c:	1809      	addeq	r1, r1, r0
 800c39e:	6021      	streq	r1, [r4, #0]
 800c3a0:	605c      	str	r4, [r3, #4]
 800c3a2:	e7c7      	b.n	800c334 <_free_r+0x24>
 800c3a4:	bd38      	pop	{r3, r4, r5, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20000414 	.word	0x20000414

0800c3ac <_malloc_r>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	1ccd      	adds	r5, r1, #3
 800c3b0:	f025 0503 	bic.w	r5, r5, #3
 800c3b4:	3508      	adds	r5, #8
 800c3b6:	2d0c      	cmp	r5, #12
 800c3b8:	bf38      	it	cc
 800c3ba:	250c      	movcc	r5, #12
 800c3bc:	2d00      	cmp	r5, #0
 800c3be:	4606      	mov	r6, r0
 800c3c0:	db01      	blt.n	800c3c6 <_malloc_r+0x1a>
 800c3c2:	42a9      	cmp	r1, r5
 800c3c4:	d903      	bls.n	800c3ce <_malloc_r+0x22>
 800c3c6:	230c      	movs	r3, #12
 800c3c8:	6033      	str	r3, [r6, #0]
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	bd70      	pop	{r4, r5, r6, pc}
 800c3ce:	f000 f87d 	bl	800c4cc <__malloc_lock>
 800c3d2:	4a21      	ldr	r2, [pc, #132]	; (800c458 <_malloc_r+0xac>)
 800c3d4:	6814      	ldr	r4, [r2, #0]
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	b991      	cbnz	r1, 800c400 <_malloc_r+0x54>
 800c3da:	4c20      	ldr	r4, [pc, #128]	; (800c45c <_malloc_r+0xb0>)
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	b91b      	cbnz	r3, 800c3e8 <_malloc_r+0x3c>
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	f000 f863 	bl	800c4ac <_sbrk_r>
 800c3e6:	6020      	str	r0, [r4, #0]
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f000 f85e 	bl	800c4ac <_sbrk_r>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d124      	bne.n	800c43e <_malloc_r+0x92>
 800c3f4:	230c      	movs	r3, #12
 800c3f6:	6033      	str	r3, [r6, #0]
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	f000 f868 	bl	800c4ce <__malloc_unlock>
 800c3fe:	e7e4      	b.n	800c3ca <_malloc_r+0x1e>
 800c400:	680b      	ldr	r3, [r1, #0]
 800c402:	1b5b      	subs	r3, r3, r5
 800c404:	d418      	bmi.n	800c438 <_malloc_r+0x8c>
 800c406:	2b0b      	cmp	r3, #11
 800c408:	d90f      	bls.n	800c42a <_malloc_r+0x7e>
 800c40a:	600b      	str	r3, [r1, #0]
 800c40c:	50cd      	str	r5, [r1, r3]
 800c40e:	18cc      	adds	r4, r1, r3
 800c410:	4630      	mov	r0, r6
 800c412:	f000 f85c 	bl	800c4ce <__malloc_unlock>
 800c416:	f104 000b 	add.w	r0, r4, #11
 800c41a:	1d23      	adds	r3, r4, #4
 800c41c:	f020 0007 	bic.w	r0, r0, #7
 800c420:	1ac3      	subs	r3, r0, r3
 800c422:	d0d3      	beq.n	800c3cc <_malloc_r+0x20>
 800c424:	425a      	negs	r2, r3
 800c426:	50e2      	str	r2, [r4, r3]
 800c428:	e7d0      	b.n	800c3cc <_malloc_r+0x20>
 800c42a:	428c      	cmp	r4, r1
 800c42c:	684b      	ldr	r3, [r1, #4]
 800c42e:	bf16      	itet	ne
 800c430:	6063      	strne	r3, [r4, #4]
 800c432:	6013      	streq	r3, [r2, #0]
 800c434:	460c      	movne	r4, r1
 800c436:	e7eb      	b.n	800c410 <_malloc_r+0x64>
 800c438:	460c      	mov	r4, r1
 800c43a:	6849      	ldr	r1, [r1, #4]
 800c43c:	e7cc      	b.n	800c3d8 <_malloc_r+0x2c>
 800c43e:	1cc4      	adds	r4, r0, #3
 800c440:	f024 0403 	bic.w	r4, r4, #3
 800c444:	42a0      	cmp	r0, r4
 800c446:	d005      	beq.n	800c454 <_malloc_r+0xa8>
 800c448:	1a21      	subs	r1, r4, r0
 800c44a:	4630      	mov	r0, r6
 800c44c:	f000 f82e 	bl	800c4ac <_sbrk_r>
 800c450:	3001      	adds	r0, #1
 800c452:	d0cf      	beq.n	800c3f4 <_malloc_r+0x48>
 800c454:	6025      	str	r5, [r4, #0]
 800c456:	e7db      	b.n	800c410 <_malloc_r+0x64>
 800c458:	20000414 	.word	0x20000414
 800c45c:	20000418 	.word	0x20000418

0800c460 <_realloc_r>:
 800c460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c462:	4607      	mov	r7, r0
 800c464:	4614      	mov	r4, r2
 800c466:	460e      	mov	r6, r1
 800c468:	b921      	cbnz	r1, 800c474 <_realloc_r+0x14>
 800c46a:	4611      	mov	r1, r2
 800c46c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c470:	f7ff bf9c 	b.w	800c3ac <_malloc_r>
 800c474:	b922      	cbnz	r2, 800c480 <_realloc_r+0x20>
 800c476:	f7ff ff4b 	bl	800c310 <_free_r>
 800c47a:	4625      	mov	r5, r4
 800c47c:	4628      	mov	r0, r5
 800c47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c480:	f000 f826 	bl	800c4d0 <_malloc_usable_size_r>
 800c484:	42a0      	cmp	r0, r4
 800c486:	d20f      	bcs.n	800c4a8 <_realloc_r+0x48>
 800c488:	4621      	mov	r1, r4
 800c48a:	4638      	mov	r0, r7
 800c48c:	f7ff ff8e 	bl	800c3ac <_malloc_r>
 800c490:	4605      	mov	r5, r0
 800c492:	2800      	cmp	r0, #0
 800c494:	d0f2      	beq.n	800c47c <_realloc_r+0x1c>
 800c496:	4631      	mov	r1, r6
 800c498:	4622      	mov	r2, r4
 800c49a:	f7ff ff14 	bl	800c2c6 <memcpy>
 800c49e:	4631      	mov	r1, r6
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	f7ff ff35 	bl	800c310 <_free_r>
 800c4a6:	e7e9      	b.n	800c47c <_realloc_r+0x1c>
 800c4a8:	4635      	mov	r5, r6
 800c4aa:	e7e7      	b.n	800c47c <_realloc_r+0x1c>

0800c4ac <_sbrk_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4c06      	ldr	r4, [pc, #24]	; (800c4c8 <_sbrk_r+0x1c>)
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4605      	mov	r5, r0
 800c4b4:	4608      	mov	r0, r1
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	f7ff fa80 	bl	800b9bc <_sbrk>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_sbrk_r+0x1a>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_sbrk_r+0x1a>
 800c4c4:	602b      	str	r3, [r5, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	20003084 	.word	0x20003084

0800c4cc <__malloc_lock>:
 800c4cc:	4770      	bx	lr

0800c4ce <__malloc_unlock>:
 800c4ce:	4770      	bx	lr

0800c4d0 <_malloc_usable_size_r>:
 800c4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4d4:	1f18      	subs	r0, r3, #4
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	bfbc      	itt	lt
 800c4da:	580b      	ldrlt	r3, [r1, r0]
 800c4dc:	18c0      	addlt	r0, r0, r3
 800c4de:	4770      	bx	lr

0800c4e0 <log>:
 800c4e0:	b570      	push	{r4, r5, r6, lr}
 800c4e2:	ed2d 8b02 	vpush	{d8}
 800c4e6:	b08a      	sub	sp, #40	; 0x28
 800c4e8:	ec55 4b10 	vmov	r4, r5, d0
 800c4ec:	f000 f9e8 	bl	800c8c0 <__ieee754_log>
 800c4f0:	4b36      	ldr	r3, [pc, #216]	; (800c5cc <log+0xec>)
 800c4f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c4f6:	eef0 8a60 	vmov.f32	s17, s1
 800c4fa:	f993 6000 	ldrsb.w	r6, [r3]
 800c4fe:	1c73      	adds	r3, r6, #1
 800c500:	d05b      	beq.n	800c5ba <log+0xda>
 800c502:	4622      	mov	r2, r4
 800c504:	462b      	mov	r3, r5
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 fb27 	bl	8000b5c <__aeabi_dcmpun>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d153      	bne.n	800c5ba <log+0xda>
 800c512:	2200      	movs	r2, #0
 800c514:	2300      	movs	r3, #0
 800c516:	4620      	mov	r0, r4
 800c518:	4629      	mov	r1, r5
 800c51a:	f7f4 fb15 	bl	8000b48 <__aeabi_dcmpgt>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d14b      	bne.n	800c5ba <log+0xda>
 800c522:	4b2b      	ldr	r3, [pc, #172]	; (800c5d0 <log+0xf0>)
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	9008      	str	r0, [sp, #32]
 800c528:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c52c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c530:	b9a6      	cbnz	r6, 800c55c <log+0x7c>
 800c532:	4b28      	ldr	r3, [pc, #160]	; (800c5d4 <log+0xf4>)
 800c534:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c538:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c53c:	4620      	mov	r0, r4
 800c53e:	2200      	movs	r2, #0
 800c540:	2300      	movs	r3, #0
 800c542:	4629      	mov	r1, r5
 800c544:	f7f4 fad8 	bl	8000af8 <__aeabi_dcmpeq>
 800c548:	bb40      	cbnz	r0, 800c59c <log+0xbc>
 800c54a:	2301      	movs	r3, #1
 800c54c:	2e02      	cmp	r6, #2
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	d119      	bne.n	800c586 <log+0xa6>
 800c552:	f7ff fad7 	bl	800bb04 <__errno>
 800c556:	2321      	movs	r3, #33	; 0x21
 800c558:	6003      	str	r3, [r0, #0]
 800c55a:	e019      	b.n	800c590 <log+0xb0>
 800c55c:	4b1e      	ldr	r3, [pc, #120]	; (800c5d8 <log+0xf8>)
 800c55e:	2200      	movs	r2, #0
 800c560:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c564:	4620      	mov	r0, r4
 800c566:	2200      	movs	r2, #0
 800c568:	2300      	movs	r3, #0
 800c56a:	4629      	mov	r1, r5
 800c56c:	f7f4 fac4 	bl	8000af8 <__aeabi_dcmpeq>
 800c570:	2800      	cmp	r0, #0
 800c572:	d0ea      	beq.n	800c54a <log+0x6a>
 800c574:	2302      	movs	r3, #2
 800c576:	429e      	cmp	r6, r3
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	d111      	bne.n	800c5a0 <log+0xc0>
 800c57c:	f7ff fac2 	bl	800bb04 <__errno>
 800c580:	2322      	movs	r3, #34	; 0x22
 800c582:	6003      	str	r3, [r0, #0]
 800c584:	e011      	b.n	800c5aa <log+0xca>
 800c586:	4668      	mov	r0, sp
 800c588:	f001 f91d 	bl	800d7c6 <matherr>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d0e0      	beq.n	800c552 <log+0x72>
 800c590:	4812      	ldr	r0, [pc, #72]	; (800c5dc <log+0xfc>)
 800c592:	f001 f91d 	bl	800d7d0 <nan>
 800c596:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c59a:	e006      	b.n	800c5aa <log+0xca>
 800c59c:	2302      	movs	r3, #2
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	4668      	mov	r0, sp
 800c5a2:	f001 f910 	bl	800d7c6 <matherr>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d0e8      	beq.n	800c57c <log+0x9c>
 800c5aa:	9b08      	ldr	r3, [sp, #32]
 800c5ac:	b11b      	cbz	r3, 800c5b6 <log+0xd6>
 800c5ae:	f7ff faa9 	bl	800bb04 <__errno>
 800c5b2:	9b08      	ldr	r3, [sp, #32]
 800c5b4:	6003      	str	r3, [r0, #0]
 800c5b6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c5ba:	eeb0 0a48 	vmov.f32	s0, s16
 800c5be:	eef0 0a68 	vmov.f32	s1, s17
 800c5c2:	b00a      	add	sp, #40	; 0x28
 800c5c4:	ecbd 8b02 	vpop	{d8}
 800c5c8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ca:	bf00      	nop
 800c5cc:	2000028c 	.word	0x2000028c
 800c5d0:	0800deea 	.word	0x0800deea
 800c5d4:	c7efffff 	.word	0xc7efffff
 800c5d8:	fff00000 	.word	0xfff00000
 800c5dc:	0800ddbb 	.word	0x0800ddbb

0800c5e0 <pow>:
 800c5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	ed2d 8b04 	vpush	{d8-d9}
 800c5e8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800c8bc <pow+0x2dc>
 800c5ec:	b08d      	sub	sp, #52	; 0x34
 800c5ee:	ec57 6b10 	vmov	r6, r7, d0
 800c5f2:	ec55 4b11 	vmov	r4, r5, d1
 800c5f6:	f000 fb17 	bl	800cc28 <__ieee754_pow>
 800c5fa:	f999 3000 	ldrsb.w	r3, [r9]
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	3301      	adds	r3, #1
 800c602:	eeb0 8a40 	vmov.f32	s16, s0
 800c606:	eef0 8a60 	vmov.f32	s17, s1
 800c60a:	46c8      	mov	r8, r9
 800c60c:	d05f      	beq.n	800c6ce <pow+0xee>
 800c60e:	4622      	mov	r2, r4
 800c610:	462b      	mov	r3, r5
 800c612:	4620      	mov	r0, r4
 800c614:	4629      	mov	r1, r5
 800c616:	f7f4 faa1 	bl	8000b5c <__aeabi_dcmpun>
 800c61a:	4683      	mov	fp, r0
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d156      	bne.n	800c6ce <pow+0xee>
 800c620:	4632      	mov	r2, r6
 800c622:	463b      	mov	r3, r7
 800c624:	4630      	mov	r0, r6
 800c626:	4639      	mov	r1, r7
 800c628:	f7f4 fa98 	bl	8000b5c <__aeabi_dcmpun>
 800c62c:	9001      	str	r0, [sp, #4]
 800c62e:	b1e8      	cbz	r0, 800c66c <pow+0x8c>
 800c630:	2200      	movs	r2, #0
 800c632:	2300      	movs	r3, #0
 800c634:	4620      	mov	r0, r4
 800c636:	4629      	mov	r1, r5
 800c638:	f7f4 fa5e 	bl	8000af8 <__aeabi_dcmpeq>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d046      	beq.n	800c6ce <pow+0xee>
 800c640:	2301      	movs	r3, #1
 800c642:	9302      	str	r3, [sp, #8]
 800c644:	4b96      	ldr	r3, [pc, #600]	; (800c8a0 <pow+0x2c0>)
 800c646:	9303      	str	r3, [sp, #12]
 800c648:	4b96      	ldr	r3, [pc, #600]	; (800c8a4 <pow+0x2c4>)
 800c64a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c64e:	2200      	movs	r2, #0
 800c650:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c654:	9b00      	ldr	r3, [sp, #0]
 800c656:	2b02      	cmp	r3, #2
 800c658:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c65c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c660:	d033      	beq.n	800c6ca <pow+0xea>
 800c662:	a802      	add	r0, sp, #8
 800c664:	f001 f8af 	bl	800d7c6 <matherr>
 800c668:	bb48      	cbnz	r0, 800c6be <pow+0xde>
 800c66a:	e05d      	b.n	800c728 <pow+0x148>
 800c66c:	f04f 0a00 	mov.w	sl, #0
 800c670:	f04f 0b00 	mov.w	fp, #0
 800c674:	4652      	mov	r2, sl
 800c676:	465b      	mov	r3, fp
 800c678:	4630      	mov	r0, r6
 800c67a:	4639      	mov	r1, r7
 800c67c:	f7f4 fa3c 	bl	8000af8 <__aeabi_dcmpeq>
 800c680:	ec4b ab19 	vmov	d9, sl, fp
 800c684:	2800      	cmp	r0, #0
 800c686:	d054      	beq.n	800c732 <pow+0x152>
 800c688:	4652      	mov	r2, sl
 800c68a:	465b      	mov	r3, fp
 800c68c:	4620      	mov	r0, r4
 800c68e:	4629      	mov	r1, r5
 800c690:	f7f4 fa32 	bl	8000af8 <__aeabi_dcmpeq>
 800c694:	4680      	mov	r8, r0
 800c696:	b318      	cbz	r0, 800c6e0 <pow+0x100>
 800c698:	2301      	movs	r3, #1
 800c69a:	9302      	str	r3, [sp, #8]
 800c69c:	4b80      	ldr	r3, [pc, #512]	; (800c8a0 <pow+0x2c0>)
 800c69e:	9303      	str	r3, [sp, #12]
 800c6a0:	9b01      	ldr	r3, [sp, #4]
 800c6a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c6a4:	9b00      	ldr	r3, [sp, #0]
 800c6a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c6aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c6ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d0d5      	beq.n	800c662 <pow+0x82>
 800c6b6:	4b7b      	ldr	r3, [pc, #492]	; (800c8a4 <pow+0x2c4>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c0:	b11b      	cbz	r3, 800c6ca <pow+0xea>
 800c6c2:	f7ff fa1f 	bl	800bb04 <__errno>
 800c6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c8:	6003      	str	r3, [r0, #0]
 800c6ca:	ed9d 8b08 	vldr	d8, [sp, #32]
 800c6ce:	eeb0 0a48 	vmov.f32	s0, s16
 800c6d2:	eef0 0a68 	vmov.f32	s1, s17
 800c6d6:	b00d      	add	sp, #52	; 0x34
 800c6d8:	ecbd 8b04 	vpop	{d8-d9}
 800c6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e0:	ec45 4b10 	vmov	d0, r4, r5
 800c6e4:	f001 f867 	bl	800d7b6 <finite>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d0f0      	beq.n	800c6ce <pow+0xee>
 800c6ec:	4652      	mov	r2, sl
 800c6ee:	465b      	mov	r3, fp
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	f7f4 fa0a 	bl	8000b0c <__aeabi_dcmplt>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d0e8      	beq.n	800c6ce <pow+0xee>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	9302      	str	r3, [sp, #8]
 800c700:	4b67      	ldr	r3, [pc, #412]	; (800c8a0 <pow+0x2c0>)
 800c702:	9303      	str	r3, [sp, #12]
 800c704:	f999 3000 	ldrsb.w	r3, [r9]
 800c708:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800c70c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c710:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c714:	b913      	cbnz	r3, 800c71c <pow+0x13c>
 800c716:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c71a:	e7a2      	b.n	800c662 <pow+0x82>
 800c71c:	4962      	ldr	r1, [pc, #392]	; (800c8a8 <pow+0x2c8>)
 800c71e:	2000      	movs	r0, #0
 800c720:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c724:	2b02      	cmp	r3, #2
 800c726:	d19c      	bne.n	800c662 <pow+0x82>
 800c728:	f7ff f9ec 	bl	800bb04 <__errno>
 800c72c:	2321      	movs	r3, #33	; 0x21
 800c72e:	6003      	str	r3, [r0, #0]
 800c730:	e7c5      	b.n	800c6be <pow+0xde>
 800c732:	eeb0 0a48 	vmov.f32	s0, s16
 800c736:	eef0 0a68 	vmov.f32	s1, s17
 800c73a:	f001 f83c 	bl	800d7b6 <finite>
 800c73e:	9000      	str	r0, [sp, #0]
 800c740:	2800      	cmp	r0, #0
 800c742:	f040 8081 	bne.w	800c848 <pow+0x268>
 800c746:	ec47 6b10 	vmov	d0, r6, r7
 800c74a:	f001 f834 	bl	800d7b6 <finite>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d07a      	beq.n	800c848 <pow+0x268>
 800c752:	ec45 4b10 	vmov	d0, r4, r5
 800c756:	f001 f82e 	bl	800d7b6 <finite>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d074      	beq.n	800c848 <pow+0x268>
 800c75e:	ec53 2b18 	vmov	r2, r3, d8
 800c762:	ee18 0a10 	vmov	r0, s16
 800c766:	4619      	mov	r1, r3
 800c768:	f7f4 f9f8 	bl	8000b5c <__aeabi_dcmpun>
 800c76c:	f999 9000 	ldrsb.w	r9, [r9]
 800c770:	4b4b      	ldr	r3, [pc, #300]	; (800c8a0 <pow+0x2c0>)
 800c772:	b1b0      	cbz	r0, 800c7a2 <pow+0x1c2>
 800c774:	2201      	movs	r2, #1
 800c776:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c77a:	9b00      	ldr	r3, [sp, #0]
 800c77c:	930a      	str	r3, [sp, #40]	; 0x28
 800c77e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c782:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c786:	f1b9 0f00 	cmp.w	r9, #0
 800c78a:	d0c4      	beq.n	800c716 <pow+0x136>
 800c78c:	4652      	mov	r2, sl
 800c78e:	465b      	mov	r3, fp
 800c790:	4650      	mov	r0, sl
 800c792:	4659      	mov	r1, fp
 800c794:	f7f4 f872 	bl	800087c <__aeabi_ddiv>
 800c798:	f1b9 0f02 	cmp.w	r9, #2
 800c79c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c7a0:	e7c1      	b.n	800c726 <pow+0x146>
 800c7a2:	2203      	movs	r2, #3
 800c7a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7a8:	900a      	str	r0, [sp, #40]	; 0x28
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	4b3e      	ldr	r3, [pc, #248]	; (800c8ac <pow+0x2cc>)
 800c7b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c7b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c7ba:	f7f3 ff35 	bl	8000628 <__aeabi_dmul>
 800c7be:	4604      	mov	r4, r0
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	f1b9 0f00 	cmp.w	r9, #0
 800c7c6:	d124      	bne.n	800c812 <pow+0x232>
 800c7c8:	4b39      	ldr	r3, [pc, #228]	; (800c8b0 <pow+0x2d0>)
 800c7ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c7ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	4652      	mov	r2, sl
 800c7d6:	465b      	mov	r3, fp
 800c7d8:	4639      	mov	r1, r7
 800c7da:	f7f4 f997 	bl	8000b0c <__aeabi_dcmplt>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d056      	beq.n	800c890 <pow+0x2b0>
 800c7e2:	ec45 4b10 	vmov	d0, r4, r5
 800c7e6:	f000 fffb 	bl	800d7e0 <rint>
 800c7ea:	4622      	mov	r2, r4
 800c7ec:	462b      	mov	r3, r5
 800c7ee:	ec51 0b10 	vmov	r0, r1, d0
 800c7f2:	f7f4 f981 	bl	8000af8 <__aeabi_dcmpeq>
 800c7f6:	b920      	cbnz	r0, 800c802 <pow+0x222>
 800c7f8:	4b2e      	ldr	r3, [pc, #184]	; (800c8b4 <pow+0x2d4>)
 800c7fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c7fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c802:	f998 3000 	ldrsb.w	r3, [r8]
 800c806:	2b02      	cmp	r3, #2
 800c808:	d142      	bne.n	800c890 <pow+0x2b0>
 800c80a:	f7ff f97b 	bl	800bb04 <__errno>
 800c80e:	2322      	movs	r3, #34	; 0x22
 800c810:	e78d      	b.n	800c72e <pow+0x14e>
 800c812:	4b29      	ldr	r3, [pc, #164]	; (800c8b8 <pow+0x2d8>)
 800c814:	2200      	movs	r2, #0
 800c816:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c81a:	4630      	mov	r0, r6
 800c81c:	4652      	mov	r2, sl
 800c81e:	465b      	mov	r3, fp
 800c820:	4639      	mov	r1, r7
 800c822:	f7f4 f973 	bl	8000b0c <__aeabi_dcmplt>
 800c826:	2800      	cmp	r0, #0
 800c828:	d0eb      	beq.n	800c802 <pow+0x222>
 800c82a:	ec45 4b10 	vmov	d0, r4, r5
 800c82e:	f000 ffd7 	bl	800d7e0 <rint>
 800c832:	4622      	mov	r2, r4
 800c834:	462b      	mov	r3, r5
 800c836:	ec51 0b10 	vmov	r0, r1, d0
 800c83a:	f7f4 f95d 	bl	8000af8 <__aeabi_dcmpeq>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d1df      	bne.n	800c802 <pow+0x222>
 800c842:	2200      	movs	r2, #0
 800c844:	4b18      	ldr	r3, [pc, #96]	; (800c8a8 <pow+0x2c8>)
 800c846:	e7da      	b.n	800c7fe <pow+0x21e>
 800c848:	2200      	movs	r2, #0
 800c84a:	2300      	movs	r3, #0
 800c84c:	ec51 0b18 	vmov	r0, r1, d8
 800c850:	f7f4 f952 	bl	8000af8 <__aeabi_dcmpeq>
 800c854:	2800      	cmp	r0, #0
 800c856:	f43f af3a 	beq.w	800c6ce <pow+0xee>
 800c85a:	ec47 6b10 	vmov	d0, r6, r7
 800c85e:	f000 ffaa 	bl	800d7b6 <finite>
 800c862:	2800      	cmp	r0, #0
 800c864:	f43f af33 	beq.w	800c6ce <pow+0xee>
 800c868:	ec45 4b10 	vmov	d0, r4, r5
 800c86c:	f000 ffa3 	bl	800d7b6 <finite>
 800c870:	2800      	cmp	r0, #0
 800c872:	f43f af2c 	beq.w	800c6ce <pow+0xee>
 800c876:	2304      	movs	r3, #4
 800c878:	9302      	str	r3, [sp, #8]
 800c87a:	4b09      	ldr	r3, [pc, #36]	; (800c8a0 <pow+0x2c0>)
 800c87c:	9303      	str	r3, [sp, #12]
 800c87e:	2300      	movs	r3, #0
 800c880:	930a      	str	r3, [sp, #40]	; 0x28
 800c882:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c886:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c88a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800c88e:	e7b8      	b.n	800c802 <pow+0x222>
 800c890:	a802      	add	r0, sp, #8
 800c892:	f000 ff98 	bl	800d7c6 <matherr>
 800c896:	2800      	cmp	r0, #0
 800c898:	f47f af11 	bne.w	800c6be <pow+0xde>
 800c89c:	e7b5      	b.n	800c80a <pow+0x22a>
 800c89e:	bf00      	nop
 800c8a0:	0800deee 	.word	0x0800deee
 800c8a4:	3ff00000 	.word	0x3ff00000
 800c8a8:	fff00000 	.word	0xfff00000
 800c8ac:	3fe00000 	.word	0x3fe00000
 800c8b0:	47efffff 	.word	0x47efffff
 800c8b4:	c7efffff 	.word	0xc7efffff
 800c8b8:	7ff00000 	.word	0x7ff00000
 800c8bc:	2000028c 	.word	0x2000028c

0800c8c0 <__ieee754_log>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	ec51 0b10 	vmov	r0, r1, d0
 800c8c8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c8cc:	b087      	sub	sp, #28
 800c8ce:	460d      	mov	r5, r1
 800c8d0:	da27      	bge.n	800c922 <__ieee754_log+0x62>
 800c8d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8d6:	4303      	orrs	r3, r0
 800c8d8:	ee10 2a10 	vmov	r2, s0
 800c8dc:	d10a      	bne.n	800c8f4 <__ieee754_log+0x34>
 800c8de:	49cc      	ldr	r1, [pc, #816]	; (800cc10 <__ieee754_log+0x350>)
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	f7f3 ffc9 	bl	800087c <__aeabi_ddiv>
 800c8ea:	ec41 0b10 	vmov	d0, r0, r1
 800c8ee:	b007      	add	sp, #28
 800c8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f4:	2900      	cmp	r1, #0
 800c8f6:	da05      	bge.n	800c904 <__ieee754_log+0x44>
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	f7f3 fcdd 	bl	80002b8 <__aeabi_dsub>
 800c8fe:	2200      	movs	r2, #0
 800c900:	2300      	movs	r3, #0
 800c902:	e7f0      	b.n	800c8e6 <__ieee754_log+0x26>
 800c904:	4bc3      	ldr	r3, [pc, #780]	; (800cc14 <__ieee754_log+0x354>)
 800c906:	2200      	movs	r2, #0
 800c908:	f7f3 fe8e 	bl	8000628 <__aeabi_dmul>
 800c90c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c910:	460d      	mov	r5, r1
 800c912:	4ac1      	ldr	r2, [pc, #772]	; (800cc18 <__ieee754_log+0x358>)
 800c914:	4295      	cmp	r5, r2
 800c916:	dd06      	ble.n	800c926 <__ieee754_log+0x66>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	f7f3 fcce 	bl	80002bc <__adddf3>
 800c920:	e7e3      	b.n	800c8ea <__ieee754_log+0x2a>
 800c922:	2300      	movs	r3, #0
 800c924:	e7f5      	b.n	800c912 <__ieee754_log+0x52>
 800c926:	152c      	asrs	r4, r5, #20
 800c928:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c92c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c930:	441c      	add	r4, r3
 800c932:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c936:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c93a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c93e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c942:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c946:	ea42 0105 	orr.w	r1, r2, r5
 800c94a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c94e:	2200      	movs	r2, #0
 800c950:	4bb2      	ldr	r3, [pc, #712]	; (800cc1c <__ieee754_log+0x35c>)
 800c952:	f7f3 fcb1 	bl	80002b8 <__aeabi_dsub>
 800c956:	1cab      	adds	r3, r5, #2
 800c958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	4682      	mov	sl, r0
 800c960:	468b      	mov	fp, r1
 800c962:	f04f 0200 	mov.w	r2, #0
 800c966:	dc53      	bgt.n	800ca10 <__ieee754_log+0x150>
 800c968:	2300      	movs	r3, #0
 800c96a:	f7f4 f8c5 	bl	8000af8 <__aeabi_dcmpeq>
 800c96e:	b1d0      	cbz	r0, 800c9a6 <__ieee754_log+0xe6>
 800c970:	2c00      	cmp	r4, #0
 800c972:	f000 8120 	beq.w	800cbb6 <__ieee754_log+0x2f6>
 800c976:	4620      	mov	r0, r4
 800c978:	f7f3 fdec 	bl	8000554 <__aeabi_i2d>
 800c97c:	a390      	add	r3, pc, #576	; (adr r3, 800cbc0 <__ieee754_log+0x300>)
 800c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c982:	4606      	mov	r6, r0
 800c984:	460f      	mov	r7, r1
 800c986:	f7f3 fe4f 	bl	8000628 <__aeabi_dmul>
 800c98a:	a38f      	add	r3, pc, #572	; (adr r3, 800cbc8 <__ieee754_log+0x308>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	4604      	mov	r4, r0
 800c992:	460d      	mov	r5, r1
 800c994:	4630      	mov	r0, r6
 800c996:	4639      	mov	r1, r7
 800c998:	f7f3 fe46 	bl	8000628 <__aeabi_dmul>
 800c99c:	4602      	mov	r2, r0
 800c99e:	460b      	mov	r3, r1
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	e7ba      	b.n	800c91c <__ieee754_log+0x5c>
 800c9a6:	a38a      	add	r3, pc, #552	; (adr r3, 800cbd0 <__ieee754_log+0x310>)
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	4650      	mov	r0, sl
 800c9ae:	4659      	mov	r1, fp
 800c9b0:	f7f3 fe3a 	bl	8000628 <__aeabi_dmul>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	4999      	ldr	r1, [pc, #612]	; (800cc20 <__ieee754_log+0x360>)
 800c9bc:	f7f3 fc7c 	bl	80002b8 <__aeabi_dsub>
 800c9c0:	4652      	mov	r2, sl
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	460f      	mov	r7, r1
 800c9c6:	465b      	mov	r3, fp
 800c9c8:	4650      	mov	r0, sl
 800c9ca:	4659      	mov	r1, fp
 800c9cc:	f7f3 fe2c 	bl	8000628 <__aeabi_dmul>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	4639      	mov	r1, r7
 800c9d8:	f7f3 fe26 	bl	8000628 <__aeabi_dmul>
 800c9dc:	4606      	mov	r6, r0
 800c9de:	460f      	mov	r7, r1
 800c9e0:	b914      	cbnz	r4, 800c9e8 <__ieee754_log+0x128>
 800c9e2:	4632      	mov	r2, r6
 800c9e4:	463b      	mov	r3, r7
 800c9e6:	e0a0      	b.n	800cb2a <__ieee754_log+0x26a>
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f7f3 fdb3 	bl	8000554 <__aeabi_i2d>
 800c9ee:	a374      	add	r3, pc, #464	; (adr r3, 800cbc0 <__ieee754_log+0x300>)
 800c9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	4689      	mov	r9, r1
 800c9f8:	f7f3 fe16 	bl	8000628 <__aeabi_dmul>
 800c9fc:	a372      	add	r3, pc, #456	; (adr r3, 800cbc8 <__ieee754_log+0x308>)
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	4604      	mov	r4, r0
 800ca04:	460d      	mov	r5, r1
 800ca06:	4640      	mov	r0, r8
 800ca08:	4649      	mov	r1, r9
 800ca0a:	f7f3 fe0d 	bl	8000628 <__aeabi_dmul>
 800ca0e:	e0a5      	b.n	800cb5c <__ieee754_log+0x29c>
 800ca10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca14:	f7f3 fc52 	bl	80002bc <__adddf3>
 800ca18:	4602      	mov	r2, r0
 800ca1a:	460b      	mov	r3, r1
 800ca1c:	4650      	mov	r0, sl
 800ca1e:	4659      	mov	r1, fp
 800ca20:	f7f3 ff2c 	bl	800087c <__aeabi_ddiv>
 800ca24:	e9cd 0100 	strd	r0, r1, [sp]
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f7f3 fd93 	bl	8000554 <__aeabi_i2d>
 800ca2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca36:	4610      	mov	r0, r2
 800ca38:	4619      	mov	r1, r3
 800ca3a:	f7f3 fdf5 	bl	8000628 <__aeabi_dmul>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca46:	f7f3 fdef 	bl	8000628 <__aeabi_dmul>
 800ca4a:	a363      	add	r3, pc, #396	; (adr r3, 800cbd8 <__ieee754_log+0x318>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	4680      	mov	r8, r0
 800ca52:	4689      	mov	r9, r1
 800ca54:	f7f3 fde8 	bl	8000628 <__aeabi_dmul>
 800ca58:	a361      	add	r3, pc, #388	; (adr r3, 800cbe0 <__ieee754_log+0x320>)
 800ca5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5e:	f7f3 fc2d 	bl	80002bc <__adddf3>
 800ca62:	4642      	mov	r2, r8
 800ca64:	464b      	mov	r3, r9
 800ca66:	f7f3 fddf 	bl	8000628 <__aeabi_dmul>
 800ca6a:	a35f      	add	r3, pc, #380	; (adr r3, 800cbe8 <__ieee754_log+0x328>)
 800ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca70:	f7f3 fc24 	bl	80002bc <__adddf3>
 800ca74:	4642      	mov	r2, r8
 800ca76:	464b      	mov	r3, r9
 800ca78:	f7f3 fdd6 	bl	8000628 <__aeabi_dmul>
 800ca7c:	a35c      	add	r3, pc, #368	; (adr r3, 800cbf0 <__ieee754_log+0x330>)
 800ca7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca82:	f7f3 fc1b 	bl	80002bc <__adddf3>
 800ca86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca8a:	f7f3 fdcd 	bl	8000628 <__aeabi_dmul>
 800ca8e:	a35a      	add	r3, pc, #360	; (adr r3, 800cbf8 <__ieee754_log+0x338>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca98:	4640      	mov	r0, r8
 800ca9a:	4649      	mov	r1, r9
 800ca9c:	f7f3 fdc4 	bl	8000628 <__aeabi_dmul>
 800caa0:	a357      	add	r3, pc, #348	; (adr r3, 800cc00 <__ieee754_log+0x340>)
 800caa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa6:	f7f3 fc09 	bl	80002bc <__adddf3>
 800caaa:	4642      	mov	r2, r8
 800caac:	464b      	mov	r3, r9
 800caae:	f7f3 fdbb 	bl	8000628 <__aeabi_dmul>
 800cab2:	a355      	add	r3, pc, #340	; (adr r3, 800cc08 <__ieee754_log+0x348>)
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	f7f3 fc00 	bl	80002bc <__adddf3>
 800cabc:	4642      	mov	r2, r8
 800cabe:	464b      	mov	r3, r9
 800cac0:	f7f3 fdb2 	bl	8000628 <__aeabi_dmul>
 800cac4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cad4:	f7f3 fbf2 	bl	80002bc <__adddf3>
 800cad8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800cadc:	3551      	adds	r5, #81	; 0x51
 800cade:	4335      	orrs	r5, r6
 800cae0:	2d00      	cmp	r5, #0
 800cae2:	4680      	mov	r8, r0
 800cae4:	4689      	mov	r9, r1
 800cae6:	dd48      	ble.n	800cb7a <__ieee754_log+0x2ba>
 800cae8:	2200      	movs	r2, #0
 800caea:	4b4d      	ldr	r3, [pc, #308]	; (800cc20 <__ieee754_log+0x360>)
 800caec:	4650      	mov	r0, sl
 800caee:	4659      	mov	r1, fp
 800caf0:	f7f3 fd9a 	bl	8000628 <__aeabi_dmul>
 800caf4:	4652      	mov	r2, sl
 800caf6:	465b      	mov	r3, fp
 800caf8:	f7f3 fd96 	bl	8000628 <__aeabi_dmul>
 800cafc:	4602      	mov	r2, r0
 800cafe:	460b      	mov	r3, r1
 800cb00:	4606      	mov	r6, r0
 800cb02:	460f      	mov	r7, r1
 800cb04:	4640      	mov	r0, r8
 800cb06:	4649      	mov	r1, r9
 800cb08:	f7f3 fbd8 	bl	80002bc <__adddf3>
 800cb0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb10:	f7f3 fd8a 	bl	8000628 <__aeabi_dmul>
 800cb14:	4680      	mov	r8, r0
 800cb16:	4689      	mov	r9, r1
 800cb18:	b964      	cbnz	r4, 800cb34 <__ieee754_log+0x274>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	4630      	mov	r0, r6
 800cb20:	4639      	mov	r1, r7
 800cb22:	f7f3 fbc9 	bl	80002b8 <__aeabi_dsub>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4650      	mov	r0, sl
 800cb2c:	4659      	mov	r1, fp
 800cb2e:	f7f3 fbc3 	bl	80002b8 <__aeabi_dsub>
 800cb32:	e6da      	b.n	800c8ea <__ieee754_log+0x2a>
 800cb34:	a322      	add	r3, pc, #136	; (adr r3, 800cbc0 <__ieee754_log+0x300>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb3e:	f7f3 fd73 	bl	8000628 <__aeabi_dmul>
 800cb42:	a321      	add	r3, pc, #132	; (adr r3, 800cbc8 <__ieee754_log+0x308>)
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	4604      	mov	r4, r0
 800cb4a:	460d      	mov	r5, r1
 800cb4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb50:	f7f3 fd6a 	bl	8000628 <__aeabi_dmul>
 800cb54:	4642      	mov	r2, r8
 800cb56:	464b      	mov	r3, r9
 800cb58:	f7f3 fbb0 	bl	80002bc <__adddf3>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 fba8 	bl	80002b8 <__aeabi_dsub>
 800cb68:	4652      	mov	r2, sl
 800cb6a:	465b      	mov	r3, fp
 800cb6c:	f7f3 fba4 	bl	80002b8 <__aeabi_dsub>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4620      	mov	r0, r4
 800cb76:	4629      	mov	r1, r5
 800cb78:	e7d9      	b.n	800cb2e <__ieee754_log+0x26e>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	4650      	mov	r0, sl
 800cb80:	4659      	mov	r1, fp
 800cb82:	f7f3 fb99 	bl	80002b8 <__aeabi_dsub>
 800cb86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb8a:	f7f3 fd4d 	bl	8000628 <__aeabi_dmul>
 800cb8e:	4606      	mov	r6, r0
 800cb90:	460f      	mov	r7, r1
 800cb92:	2c00      	cmp	r4, #0
 800cb94:	f43f af25 	beq.w	800c9e2 <__ieee754_log+0x122>
 800cb98:	a309      	add	r3, pc, #36	; (adr r3, 800cbc0 <__ieee754_log+0x300>)
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cba2:	f7f3 fd41 	bl	8000628 <__aeabi_dmul>
 800cba6:	a308      	add	r3, pc, #32	; (adr r3, 800cbc8 <__ieee754_log+0x308>)
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	4604      	mov	r4, r0
 800cbae:	460d      	mov	r5, r1
 800cbb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbb4:	e729      	b.n	800ca0a <__ieee754_log+0x14a>
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	2100      	movs	r1, #0
 800cbba:	e696      	b.n	800c8ea <__ieee754_log+0x2a>
 800cbbc:	f3af 8000 	nop.w
 800cbc0:	fee00000 	.word	0xfee00000
 800cbc4:	3fe62e42 	.word	0x3fe62e42
 800cbc8:	35793c76 	.word	0x35793c76
 800cbcc:	3dea39ef 	.word	0x3dea39ef
 800cbd0:	55555555 	.word	0x55555555
 800cbd4:	3fd55555 	.word	0x3fd55555
 800cbd8:	df3e5244 	.word	0xdf3e5244
 800cbdc:	3fc2f112 	.word	0x3fc2f112
 800cbe0:	96cb03de 	.word	0x96cb03de
 800cbe4:	3fc74664 	.word	0x3fc74664
 800cbe8:	94229359 	.word	0x94229359
 800cbec:	3fd24924 	.word	0x3fd24924
 800cbf0:	55555593 	.word	0x55555593
 800cbf4:	3fe55555 	.word	0x3fe55555
 800cbf8:	d078c69f 	.word	0xd078c69f
 800cbfc:	3fc39a09 	.word	0x3fc39a09
 800cc00:	1d8e78af 	.word	0x1d8e78af
 800cc04:	3fcc71c5 	.word	0x3fcc71c5
 800cc08:	9997fa04 	.word	0x9997fa04
 800cc0c:	3fd99999 	.word	0x3fd99999
 800cc10:	c3500000 	.word	0xc3500000
 800cc14:	43500000 	.word	0x43500000
 800cc18:	7fefffff 	.word	0x7fefffff
 800cc1c:	3ff00000 	.word	0x3ff00000
 800cc20:	3fe00000 	.word	0x3fe00000
 800cc24:	00000000 	.word	0x00000000

0800cc28 <__ieee754_pow>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	b091      	sub	sp, #68	; 0x44
 800cc2e:	ed8d 1b00 	vstr	d1, [sp]
 800cc32:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cc36:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cc3a:	ea58 0302 	orrs.w	r3, r8, r2
 800cc3e:	ec57 6b10 	vmov	r6, r7, d0
 800cc42:	f000 84be 	beq.w	800d5c2 <__ieee754_pow+0x99a>
 800cc46:	4b7a      	ldr	r3, [pc, #488]	; (800ce30 <__ieee754_pow+0x208>)
 800cc48:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cc4c:	429c      	cmp	r4, r3
 800cc4e:	463d      	mov	r5, r7
 800cc50:	ee10 aa10 	vmov	sl, s0
 800cc54:	dc09      	bgt.n	800cc6a <__ieee754_pow+0x42>
 800cc56:	d103      	bne.n	800cc60 <__ieee754_pow+0x38>
 800cc58:	b93e      	cbnz	r6, 800cc6a <__ieee754_pow+0x42>
 800cc5a:	45a0      	cmp	r8, r4
 800cc5c:	dc0d      	bgt.n	800cc7a <__ieee754_pow+0x52>
 800cc5e:	e001      	b.n	800cc64 <__ieee754_pow+0x3c>
 800cc60:	4598      	cmp	r8, r3
 800cc62:	dc02      	bgt.n	800cc6a <__ieee754_pow+0x42>
 800cc64:	4598      	cmp	r8, r3
 800cc66:	d10e      	bne.n	800cc86 <__ieee754_pow+0x5e>
 800cc68:	b16a      	cbz	r2, 800cc86 <__ieee754_pow+0x5e>
 800cc6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cc6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cc72:	ea54 030a 	orrs.w	r3, r4, sl
 800cc76:	f000 84a4 	beq.w	800d5c2 <__ieee754_pow+0x99a>
 800cc7a:	486e      	ldr	r0, [pc, #440]	; (800ce34 <__ieee754_pow+0x20c>)
 800cc7c:	b011      	add	sp, #68	; 0x44
 800cc7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc82:	f000 bda5 	b.w	800d7d0 <nan>
 800cc86:	2d00      	cmp	r5, #0
 800cc88:	da53      	bge.n	800cd32 <__ieee754_pow+0x10a>
 800cc8a:	4b6b      	ldr	r3, [pc, #428]	; (800ce38 <__ieee754_pow+0x210>)
 800cc8c:	4598      	cmp	r8, r3
 800cc8e:	dc4d      	bgt.n	800cd2c <__ieee754_pow+0x104>
 800cc90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cc94:	4598      	cmp	r8, r3
 800cc96:	dd4c      	ble.n	800cd32 <__ieee754_pow+0x10a>
 800cc98:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cc9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cca0:	2b14      	cmp	r3, #20
 800cca2:	dd26      	ble.n	800ccf2 <__ieee754_pow+0xca>
 800cca4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cca8:	fa22 f103 	lsr.w	r1, r2, r3
 800ccac:	fa01 f303 	lsl.w	r3, r1, r3
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d13e      	bne.n	800cd32 <__ieee754_pow+0x10a>
 800ccb4:	f001 0101 	and.w	r1, r1, #1
 800ccb8:	f1c1 0b02 	rsb	fp, r1, #2
 800ccbc:	2a00      	cmp	r2, #0
 800ccbe:	d15b      	bne.n	800cd78 <__ieee754_pow+0x150>
 800ccc0:	4b5b      	ldr	r3, [pc, #364]	; (800ce30 <__ieee754_pow+0x208>)
 800ccc2:	4598      	cmp	r8, r3
 800ccc4:	d124      	bne.n	800cd10 <__ieee754_pow+0xe8>
 800ccc6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ccca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ccce:	ea53 030a 	orrs.w	r3, r3, sl
 800ccd2:	f000 8476 	beq.w	800d5c2 <__ieee754_pow+0x99a>
 800ccd6:	4b59      	ldr	r3, [pc, #356]	; (800ce3c <__ieee754_pow+0x214>)
 800ccd8:	429c      	cmp	r4, r3
 800ccda:	dd2d      	ble.n	800cd38 <__ieee754_pow+0x110>
 800ccdc:	f1b9 0f00 	cmp.w	r9, #0
 800cce0:	f280 8473 	bge.w	800d5ca <__ieee754_pow+0x9a2>
 800cce4:	2000      	movs	r0, #0
 800cce6:	2100      	movs	r1, #0
 800cce8:	ec41 0b10 	vmov	d0, r0, r1
 800ccec:	b011      	add	sp, #68	; 0x44
 800ccee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf2:	2a00      	cmp	r2, #0
 800ccf4:	d13e      	bne.n	800cd74 <__ieee754_pow+0x14c>
 800ccf6:	f1c3 0314 	rsb	r3, r3, #20
 800ccfa:	fa48 f103 	asr.w	r1, r8, r3
 800ccfe:	fa01 f303 	lsl.w	r3, r1, r3
 800cd02:	4543      	cmp	r3, r8
 800cd04:	f040 8469 	bne.w	800d5da <__ieee754_pow+0x9b2>
 800cd08:	f001 0101 	and.w	r1, r1, #1
 800cd0c:	f1c1 0b02 	rsb	fp, r1, #2
 800cd10:	4b4b      	ldr	r3, [pc, #300]	; (800ce40 <__ieee754_pow+0x218>)
 800cd12:	4598      	cmp	r8, r3
 800cd14:	d118      	bne.n	800cd48 <__ieee754_pow+0x120>
 800cd16:	f1b9 0f00 	cmp.w	r9, #0
 800cd1a:	f280 845a 	bge.w	800d5d2 <__ieee754_pow+0x9aa>
 800cd1e:	4948      	ldr	r1, [pc, #288]	; (800ce40 <__ieee754_pow+0x218>)
 800cd20:	4632      	mov	r2, r6
 800cd22:	463b      	mov	r3, r7
 800cd24:	2000      	movs	r0, #0
 800cd26:	f7f3 fda9 	bl	800087c <__aeabi_ddiv>
 800cd2a:	e7dd      	b.n	800cce8 <__ieee754_pow+0xc0>
 800cd2c:	f04f 0b02 	mov.w	fp, #2
 800cd30:	e7c4      	b.n	800ccbc <__ieee754_pow+0x94>
 800cd32:	f04f 0b00 	mov.w	fp, #0
 800cd36:	e7c1      	b.n	800ccbc <__ieee754_pow+0x94>
 800cd38:	f1b9 0f00 	cmp.w	r9, #0
 800cd3c:	dad2      	bge.n	800cce4 <__ieee754_pow+0xbc>
 800cd3e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cd42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cd46:	e7cf      	b.n	800cce8 <__ieee754_pow+0xc0>
 800cd48:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800cd4c:	d106      	bne.n	800cd5c <__ieee754_pow+0x134>
 800cd4e:	4632      	mov	r2, r6
 800cd50:	463b      	mov	r3, r7
 800cd52:	4610      	mov	r0, r2
 800cd54:	4619      	mov	r1, r3
 800cd56:	f7f3 fc67 	bl	8000628 <__aeabi_dmul>
 800cd5a:	e7c5      	b.n	800cce8 <__ieee754_pow+0xc0>
 800cd5c:	4b39      	ldr	r3, [pc, #228]	; (800ce44 <__ieee754_pow+0x21c>)
 800cd5e:	4599      	cmp	r9, r3
 800cd60:	d10a      	bne.n	800cd78 <__ieee754_pow+0x150>
 800cd62:	2d00      	cmp	r5, #0
 800cd64:	db08      	blt.n	800cd78 <__ieee754_pow+0x150>
 800cd66:	ec47 6b10 	vmov	d0, r6, r7
 800cd6a:	b011      	add	sp, #68	; 0x44
 800cd6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd70:	f000 bc68 	b.w	800d644 <__ieee754_sqrt>
 800cd74:	f04f 0b00 	mov.w	fp, #0
 800cd78:	ec47 6b10 	vmov	d0, r6, r7
 800cd7c:	f000 fd12 	bl	800d7a4 <fabs>
 800cd80:	ec51 0b10 	vmov	r0, r1, d0
 800cd84:	f1ba 0f00 	cmp.w	sl, #0
 800cd88:	d127      	bne.n	800cdda <__ieee754_pow+0x1b2>
 800cd8a:	b124      	cbz	r4, 800cd96 <__ieee754_pow+0x16e>
 800cd8c:	4b2c      	ldr	r3, [pc, #176]	; (800ce40 <__ieee754_pow+0x218>)
 800cd8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d121      	bne.n	800cdda <__ieee754_pow+0x1b2>
 800cd96:	f1b9 0f00 	cmp.w	r9, #0
 800cd9a:	da05      	bge.n	800cda8 <__ieee754_pow+0x180>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	2000      	movs	r0, #0
 800cda2:	4927      	ldr	r1, [pc, #156]	; (800ce40 <__ieee754_pow+0x218>)
 800cda4:	f7f3 fd6a 	bl	800087c <__aeabi_ddiv>
 800cda8:	2d00      	cmp	r5, #0
 800cdaa:	da9d      	bge.n	800cce8 <__ieee754_pow+0xc0>
 800cdac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cdb0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cdb4:	ea54 030b 	orrs.w	r3, r4, fp
 800cdb8:	d108      	bne.n	800cdcc <__ieee754_pow+0x1a4>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	f7f3 fa79 	bl	80002b8 <__aeabi_dsub>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	e7ac      	b.n	800cd26 <__ieee754_pow+0xfe>
 800cdcc:	f1bb 0f01 	cmp.w	fp, #1
 800cdd0:	d18a      	bne.n	800cce8 <__ieee754_pow+0xc0>
 800cdd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	e786      	b.n	800cce8 <__ieee754_pow+0xc0>
 800cdda:	0fed      	lsrs	r5, r5, #31
 800cddc:	1e6b      	subs	r3, r5, #1
 800cdde:	930d      	str	r3, [sp, #52]	; 0x34
 800cde0:	ea5b 0303 	orrs.w	r3, fp, r3
 800cde4:	d102      	bne.n	800cdec <__ieee754_pow+0x1c4>
 800cde6:	4632      	mov	r2, r6
 800cde8:	463b      	mov	r3, r7
 800cdea:	e7e8      	b.n	800cdbe <__ieee754_pow+0x196>
 800cdec:	4b16      	ldr	r3, [pc, #88]	; (800ce48 <__ieee754_pow+0x220>)
 800cdee:	4598      	cmp	r8, r3
 800cdf0:	f340 80fe 	ble.w	800cff0 <__ieee754_pow+0x3c8>
 800cdf4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cdf8:	4598      	cmp	r8, r3
 800cdfa:	dd0a      	ble.n	800ce12 <__ieee754_pow+0x1ea>
 800cdfc:	4b0f      	ldr	r3, [pc, #60]	; (800ce3c <__ieee754_pow+0x214>)
 800cdfe:	429c      	cmp	r4, r3
 800ce00:	dc0d      	bgt.n	800ce1e <__ieee754_pow+0x1f6>
 800ce02:	f1b9 0f00 	cmp.w	r9, #0
 800ce06:	f6bf af6d 	bge.w	800cce4 <__ieee754_pow+0xbc>
 800ce0a:	a307      	add	r3, pc, #28	; (adr r3, 800ce28 <__ieee754_pow+0x200>)
 800ce0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce10:	e79f      	b.n	800cd52 <__ieee754_pow+0x12a>
 800ce12:	4b0e      	ldr	r3, [pc, #56]	; (800ce4c <__ieee754_pow+0x224>)
 800ce14:	429c      	cmp	r4, r3
 800ce16:	ddf4      	ble.n	800ce02 <__ieee754_pow+0x1da>
 800ce18:	4b09      	ldr	r3, [pc, #36]	; (800ce40 <__ieee754_pow+0x218>)
 800ce1a:	429c      	cmp	r4, r3
 800ce1c:	dd18      	ble.n	800ce50 <__ieee754_pow+0x228>
 800ce1e:	f1b9 0f00 	cmp.w	r9, #0
 800ce22:	dcf2      	bgt.n	800ce0a <__ieee754_pow+0x1e2>
 800ce24:	e75e      	b.n	800cce4 <__ieee754_pow+0xbc>
 800ce26:	bf00      	nop
 800ce28:	8800759c 	.word	0x8800759c
 800ce2c:	7e37e43c 	.word	0x7e37e43c
 800ce30:	7ff00000 	.word	0x7ff00000
 800ce34:	0800ddbb 	.word	0x0800ddbb
 800ce38:	433fffff 	.word	0x433fffff
 800ce3c:	3fefffff 	.word	0x3fefffff
 800ce40:	3ff00000 	.word	0x3ff00000
 800ce44:	3fe00000 	.word	0x3fe00000
 800ce48:	41e00000 	.word	0x41e00000
 800ce4c:	3feffffe 	.word	0x3feffffe
 800ce50:	2200      	movs	r2, #0
 800ce52:	4b63      	ldr	r3, [pc, #396]	; (800cfe0 <__ieee754_pow+0x3b8>)
 800ce54:	f7f3 fa30 	bl	80002b8 <__aeabi_dsub>
 800ce58:	a355      	add	r3, pc, #340	; (adr r3, 800cfb0 <__ieee754_pow+0x388>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	4604      	mov	r4, r0
 800ce60:	460d      	mov	r5, r1
 800ce62:	f7f3 fbe1 	bl	8000628 <__aeabi_dmul>
 800ce66:	a354      	add	r3, pc, #336	; (adr r3, 800cfb8 <__ieee754_pow+0x390>)
 800ce68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6c:	4606      	mov	r6, r0
 800ce6e:	460f      	mov	r7, r1
 800ce70:	4620      	mov	r0, r4
 800ce72:	4629      	mov	r1, r5
 800ce74:	f7f3 fbd8 	bl	8000628 <__aeabi_dmul>
 800ce78:	2200      	movs	r2, #0
 800ce7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce7e:	4b59      	ldr	r3, [pc, #356]	; (800cfe4 <__ieee754_pow+0x3bc>)
 800ce80:	4620      	mov	r0, r4
 800ce82:	4629      	mov	r1, r5
 800ce84:	f7f3 fbd0 	bl	8000628 <__aeabi_dmul>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	a14c      	add	r1, pc, #304	; (adr r1, 800cfc0 <__ieee754_pow+0x398>)
 800ce8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce92:	f7f3 fa11 	bl	80002b8 <__aeabi_dsub>
 800ce96:	4622      	mov	r2, r4
 800ce98:	462b      	mov	r3, r5
 800ce9a:	f7f3 fbc5 	bl	8000628 <__aeabi_dmul>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	2000      	movs	r0, #0
 800cea4:	4950      	ldr	r1, [pc, #320]	; (800cfe8 <__ieee754_pow+0x3c0>)
 800cea6:	f7f3 fa07 	bl	80002b8 <__aeabi_dsub>
 800ceaa:	4622      	mov	r2, r4
 800ceac:	462b      	mov	r3, r5
 800ceae:	4680      	mov	r8, r0
 800ceb0:	4689      	mov	r9, r1
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	4629      	mov	r1, r5
 800ceb6:	f7f3 fbb7 	bl	8000628 <__aeabi_dmul>
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	4640      	mov	r0, r8
 800cec0:	4649      	mov	r1, r9
 800cec2:	f7f3 fbb1 	bl	8000628 <__aeabi_dmul>
 800cec6:	a340      	add	r3, pc, #256	; (adr r3, 800cfc8 <__ieee754_pow+0x3a0>)
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	f7f3 fbac 	bl	8000628 <__aeabi_dmul>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ced8:	f7f3 f9ee 	bl	80002b8 <__aeabi_dsub>
 800cedc:	4602      	mov	r2, r0
 800cede:	460b      	mov	r3, r1
 800cee0:	4604      	mov	r4, r0
 800cee2:	460d      	mov	r5, r1
 800cee4:	4630      	mov	r0, r6
 800cee6:	4639      	mov	r1, r7
 800cee8:	f7f3 f9e8 	bl	80002bc <__adddf3>
 800ceec:	2000      	movs	r0, #0
 800ceee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cef2:	4632      	mov	r2, r6
 800cef4:	463b      	mov	r3, r7
 800cef6:	f7f3 f9df 	bl	80002b8 <__aeabi_dsub>
 800cefa:	4602      	mov	r2, r0
 800cefc:	460b      	mov	r3, r1
 800cefe:	4620      	mov	r0, r4
 800cf00:	4629      	mov	r1, r5
 800cf02:	f7f3 f9d9 	bl	80002b8 <__aeabi_dsub>
 800cf06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf08:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	4606      	mov	r6, r0
 800cf10:	460f      	mov	r7, r1
 800cf12:	f040 81eb 	bne.w	800d2ec <__ieee754_pow+0x6c4>
 800cf16:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800cfd0 <__ieee754_pow+0x3a8>
 800cf1a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800cf1e:	2400      	movs	r4, #0
 800cf20:	4622      	mov	r2, r4
 800cf22:	462b      	mov	r3, r5
 800cf24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf2c:	f7f3 f9c4 	bl	80002b8 <__aeabi_dsub>
 800cf30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf34:	f7f3 fb78 	bl	8000628 <__aeabi_dmul>
 800cf38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf3c:	4680      	mov	r8, r0
 800cf3e:	4689      	mov	r9, r1
 800cf40:	4630      	mov	r0, r6
 800cf42:	4639      	mov	r1, r7
 800cf44:	f7f3 fb70 	bl	8000628 <__aeabi_dmul>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	4649      	mov	r1, r9
 800cf50:	f7f3 f9b4 	bl	80002bc <__adddf3>
 800cf54:	4622      	mov	r2, r4
 800cf56:	462b      	mov	r3, r5
 800cf58:	4680      	mov	r8, r0
 800cf5a:	4689      	mov	r9, r1
 800cf5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf60:	f7f3 fb62 	bl	8000628 <__aeabi_dmul>
 800cf64:	460b      	mov	r3, r1
 800cf66:	4604      	mov	r4, r0
 800cf68:	460d      	mov	r5, r1
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	4649      	mov	r1, r9
 800cf6e:	4640      	mov	r0, r8
 800cf70:	e9cd 4500 	strd	r4, r5, [sp]
 800cf74:	f7f3 f9a2 	bl	80002bc <__adddf3>
 800cf78:	4b1c      	ldr	r3, [pc, #112]	; (800cfec <__ieee754_pow+0x3c4>)
 800cf7a:	4299      	cmp	r1, r3
 800cf7c:	4606      	mov	r6, r0
 800cf7e:	460f      	mov	r7, r1
 800cf80:	468b      	mov	fp, r1
 800cf82:	f340 82f7 	ble.w	800d574 <__ieee754_pow+0x94c>
 800cf86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cf8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cf8e:	4303      	orrs	r3, r0
 800cf90:	f000 81ea 	beq.w	800d368 <__ieee754_pow+0x740>
 800cf94:	a310      	add	r3, pc, #64	; (adr r3, 800cfd8 <__ieee754_pow+0x3b0>)
 800cf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf9e:	f7f3 fb43 	bl	8000628 <__aeabi_dmul>
 800cfa2:	a30d      	add	r3, pc, #52	; (adr r3, 800cfd8 <__ieee754_pow+0x3b0>)
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	e6d5      	b.n	800cd56 <__ieee754_pow+0x12e>
 800cfaa:	bf00      	nop
 800cfac:	f3af 8000 	nop.w
 800cfb0:	60000000 	.word	0x60000000
 800cfb4:	3ff71547 	.word	0x3ff71547
 800cfb8:	f85ddf44 	.word	0xf85ddf44
 800cfbc:	3e54ae0b 	.word	0x3e54ae0b
 800cfc0:	55555555 	.word	0x55555555
 800cfc4:	3fd55555 	.word	0x3fd55555
 800cfc8:	652b82fe 	.word	0x652b82fe
 800cfcc:	3ff71547 	.word	0x3ff71547
 800cfd0:	00000000 	.word	0x00000000
 800cfd4:	bff00000 	.word	0xbff00000
 800cfd8:	8800759c 	.word	0x8800759c
 800cfdc:	7e37e43c 	.word	0x7e37e43c
 800cfe0:	3ff00000 	.word	0x3ff00000
 800cfe4:	3fd00000 	.word	0x3fd00000
 800cfe8:	3fe00000 	.word	0x3fe00000
 800cfec:	408fffff 	.word	0x408fffff
 800cff0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cff4:	f04f 0200 	mov.w	r2, #0
 800cff8:	da05      	bge.n	800d006 <__ieee754_pow+0x3de>
 800cffa:	4bd3      	ldr	r3, [pc, #844]	; (800d348 <__ieee754_pow+0x720>)
 800cffc:	f7f3 fb14 	bl	8000628 <__aeabi_dmul>
 800d000:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d004:	460c      	mov	r4, r1
 800d006:	1523      	asrs	r3, r4, #20
 800d008:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d00c:	4413      	add	r3, r2
 800d00e:	9309      	str	r3, [sp, #36]	; 0x24
 800d010:	4bce      	ldr	r3, [pc, #824]	; (800d34c <__ieee754_pow+0x724>)
 800d012:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d016:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d01a:	429c      	cmp	r4, r3
 800d01c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d020:	dd08      	ble.n	800d034 <__ieee754_pow+0x40c>
 800d022:	4bcb      	ldr	r3, [pc, #812]	; (800d350 <__ieee754_pow+0x728>)
 800d024:	429c      	cmp	r4, r3
 800d026:	f340 815e 	ble.w	800d2e6 <__ieee754_pow+0x6be>
 800d02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d02c:	3301      	adds	r3, #1
 800d02e:	9309      	str	r3, [sp, #36]	; 0x24
 800d030:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d034:	f04f 0a00 	mov.w	sl, #0
 800d038:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d03c:	930c      	str	r3, [sp, #48]	; 0x30
 800d03e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d040:	4bc4      	ldr	r3, [pc, #784]	; (800d354 <__ieee754_pow+0x72c>)
 800d042:	4413      	add	r3, r2
 800d044:	ed93 7b00 	vldr	d7, [r3]
 800d048:	4629      	mov	r1, r5
 800d04a:	ec53 2b17 	vmov	r2, r3, d7
 800d04e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d052:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d056:	f7f3 f92f 	bl	80002b8 <__aeabi_dsub>
 800d05a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d05e:	4606      	mov	r6, r0
 800d060:	460f      	mov	r7, r1
 800d062:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d066:	f7f3 f929 	bl	80002bc <__adddf3>
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	2000      	movs	r0, #0
 800d070:	49b9      	ldr	r1, [pc, #740]	; (800d358 <__ieee754_pow+0x730>)
 800d072:	f7f3 fc03 	bl	800087c <__aeabi_ddiv>
 800d076:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d07a:	4602      	mov	r2, r0
 800d07c:	460b      	mov	r3, r1
 800d07e:	4630      	mov	r0, r6
 800d080:	4639      	mov	r1, r7
 800d082:	f7f3 fad1 	bl	8000628 <__aeabi_dmul>
 800d086:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d08a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d08e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d092:	2300      	movs	r3, #0
 800d094:	9302      	str	r3, [sp, #8]
 800d096:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d09a:	106d      	asrs	r5, r5, #1
 800d09c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d0a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	4649      	mov	r1, r9
 800d0ae:	4614      	mov	r4, r2
 800d0b0:	461d      	mov	r5, r3
 800d0b2:	f7f3 fab9 	bl	8000628 <__aeabi_dmul>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	4639      	mov	r1, r7
 800d0be:	f7f3 f8fb 	bl	80002b8 <__aeabi_dsub>
 800d0c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0c6:	4606      	mov	r6, r0
 800d0c8:	460f      	mov	r7, r1
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	f7f3 f8f3 	bl	80002b8 <__aeabi_dsub>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d0da:	f7f3 f8ed 	bl	80002b8 <__aeabi_dsub>
 800d0de:	4642      	mov	r2, r8
 800d0e0:	464b      	mov	r3, r9
 800d0e2:	f7f3 faa1 	bl	8000628 <__aeabi_dmul>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	f7f3 f8e3 	bl	80002b8 <__aeabi_dsub>
 800d0f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d0f6:	f7f3 fa97 	bl	8000628 <__aeabi_dmul>
 800d0fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d102:	4610      	mov	r0, r2
 800d104:	4619      	mov	r1, r3
 800d106:	f7f3 fa8f 	bl	8000628 <__aeabi_dmul>
 800d10a:	a37b      	add	r3, pc, #492	; (adr r3, 800d2f8 <__ieee754_pow+0x6d0>)
 800d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d110:	4604      	mov	r4, r0
 800d112:	460d      	mov	r5, r1
 800d114:	f7f3 fa88 	bl	8000628 <__aeabi_dmul>
 800d118:	a379      	add	r3, pc, #484	; (adr r3, 800d300 <__ieee754_pow+0x6d8>)
 800d11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11e:	f7f3 f8cd 	bl	80002bc <__adddf3>
 800d122:	4622      	mov	r2, r4
 800d124:	462b      	mov	r3, r5
 800d126:	f7f3 fa7f 	bl	8000628 <__aeabi_dmul>
 800d12a:	a377      	add	r3, pc, #476	; (adr r3, 800d308 <__ieee754_pow+0x6e0>)
 800d12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d130:	f7f3 f8c4 	bl	80002bc <__adddf3>
 800d134:	4622      	mov	r2, r4
 800d136:	462b      	mov	r3, r5
 800d138:	f7f3 fa76 	bl	8000628 <__aeabi_dmul>
 800d13c:	a374      	add	r3, pc, #464	; (adr r3, 800d310 <__ieee754_pow+0x6e8>)
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	f7f3 f8bb 	bl	80002bc <__adddf3>
 800d146:	4622      	mov	r2, r4
 800d148:	462b      	mov	r3, r5
 800d14a:	f7f3 fa6d 	bl	8000628 <__aeabi_dmul>
 800d14e:	a372      	add	r3, pc, #456	; (adr r3, 800d318 <__ieee754_pow+0x6f0>)
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	f7f3 f8b2 	bl	80002bc <__adddf3>
 800d158:	4622      	mov	r2, r4
 800d15a:	462b      	mov	r3, r5
 800d15c:	f7f3 fa64 	bl	8000628 <__aeabi_dmul>
 800d160:	a36f      	add	r3, pc, #444	; (adr r3, 800d320 <__ieee754_pow+0x6f8>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	f7f3 f8a9 	bl	80002bc <__adddf3>
 800d16a:	4622      	mov	r2, r4
 800d16c:	4606      	mov	r6, r0
 800d16e:	460f      	mov	r7, r1
 800d170:	462b      	mov	r3, r5
 800d172:	4620      	mov	r0, r4
 800d174:	4629      	mov	r1, r5
 800d176:	f7f3 fa57 	bl	8000628 <__aeabi_dmul>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	4630      	mov	r0, r6
 800d180:	4639      	mov	r1, r7
 800d182:	f7f3 fa51 	bl	8000628 <__aeabi_dmul>
 800d186:	4642      	mov	r2, r8
 800d188:	4604      	mov	r4, r0
 800d18a:	460d      	mov	r5, r1
 800d18c:	464b      	mov	r3, r9
 800d18e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d192:	f7f3 f893 	bl	80002bc <__adddf3>
 800d196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d19a:	f7f3 fa45 	bl	8000628 <__aeabi_dmul>
 800d19e:	4622      	mov	r2, r4
 800d1a0:	462b      	mov	r3, r5
 800d1a2:	f7f3 f88b 	bl	80002bc <__adddf3>
 800d1a6:	4642      	mov	r2, r8
 800d1a8:	4606      	mov	r6, r0
 800d1aa:	460f      	mov	r7, r1
 800d1ac:	464b      	mov	r3, r9
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	f7f3 fa39 	bl	8000628 <__aeabi_dmul>
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	4b68      	ldr	r3, [pc, #416]	; (800d35c <__ieee754_pow+0x734>)
 800d1ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d1be:	f7f3 f87d 	bl	80002bc <__adddf3>
 800d1c2:	4632      	mov	r2, r6
 800d1c4:	463b      	mov	r3, r7
 800d1c6:	f7f3 f879 	bl	80002bc <__adddf3>
 800d1ca:	9802      	ldr	r0, [sp, #8]
 800d1cc:	460d      	mov	r5, r1
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4640      	mov	r0, r8
 800d1d6:	4649      	mov	r1, r9
 800d1d8:	f7f3 fa26 	bl	8000628 <__aeabi_dmul>
 800d1dc:	2200      	movs	r2, #0
 800d1de:	4680      	mov	r8, r0
 800d1e0:	4689      	mov	r9, r1
 800d1e2:	4b5e      	ldr	r3, [pc, #376]	; (800d35c <__ieee754_pow+0x734>)
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	f7f3 f866 	bl	80002b8 <__aeabi_dsub>
 800d1ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d1f0:	f7f3 f862 	bl	80002b8 <__aeabi_dsub>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	f7f3 f85c 	bl	80002b8 <__aeabi_dsub>
 800d200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d204:	f7f3 fa10 	bl	8000628 <__aeabi_dmul>
 800d208:	4622      	mov	r2, r4
 800d20a:	4606      	mov	r6, r0
 800d20c:	460f      	mov	r7, r1
 800d20e:	462b      	mov	r3, r5
 800d210:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d214:	f7f3 fa08 	bl	8000628 <__aeabi_dmul>
 800d218:	4602      	mov	r2, r0
 800d21a:	460b      	mov	r3, r1
 800d21c:	4630      	mov	r0, r6
 800d21e:	4639      	mov	r1, r7
 800d220:	f7f3 f84c 	bl	80002bc <__adddf3>
 800d224:	4606      	mov	r6, r0
 800d226:	460f      	mov	r7, r1
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4640      	mov	r0, r8
 800d22e:	4649      	mov	r1, r9
 800d230:	f7f3 f844 	bl	80002bc <__adddf3>
 800d234:	9802      	ldr	r0, [sp, #8]
 800d236:	a33c      	add	r3, pc, #240	; (adr r3, 800d328 <__ieee754_pow+0x700>)
 800d238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23c:	4604      	mov	r4, r0
 800d23e:	460d      	mov	r5, r1
 800d240:	f7f3 f9f2 	bl	8000628 <__aeabi_dmul>
 800d244:	4642      	mov	r2, r8
 800d246:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d24a:	464b      	mov	r3, r9
 800d24c:	4620      	mov	r0, r4
 800d24e:	4629      	mov	r1, r5
 800d250:	f7f3 f832 	bl	80002b8 <__aeabi_dsub>
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4630      	mov	r0, r6
 800d25a:	4639      	mov	r1, r7
 800d25c:	f7f3 f82c 	bl	80002b8 <__aeabi_dsub>
 800d260:	a333      	add	r3, pc, #204	; (adr r3, 800d330 <__ieee754_pow+0x708>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 f9df 	bl	8000628 <__aeabi_dmul>
 800d26a:	a333      	add	r3, pc, #204	; (adr r3, 800d338 <__ieee754_pow+0x710>)
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	4606      	mov	r6, r0
 800d272:	460f      	mov	r7, r1
 800d274:	4620      	mov	r0, r4
 800d276:	4629      	mov	r1, r5
 800d278:	f7f3 f9d6 	bl	8000628 <__aeabi_dmul>
 800d27c:	4602      	mov	r2, r0
 800d27e:	460b      	mov	r3, r1
 800d280:	4630      	mov	r0, r6
 800d282:	4639      	mov	r1, r7
 800d284:	f7f3 f81a 	bl	80002bc <__adddf3>
 800d288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d28a:	4b35      	ldr	r3, [pc, #212]	; (800d360 <__ieee754_pow+0x738>)
 800d28c:	4413      	add	r3, r2
 800d28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d292:	f7f3 f813 	bl	80002bc <__adddf3>
 800d296:	4604      	mov	r4, r0
 800d298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d29a:	460d      	mov	r5, r1
 800d29c:	f7f3 f95a 	bl	8000554 <__aeabi_i2d>
 800d2a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2a2:	4b30      	ldr	r3, [pc, #192]	; (800d364 <__ieee754_pow+0x73c>)
 800d2a4:	4413      	add	r3, r2
 800d2a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	460f      	mov	r7, r1
 800d2ae:	4622      	mov	r2, r4
 800d2b0:	462b      	mov	r3, r5
 800d2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2b6:	f7f3 f801 	bl	80002bc <__adddf3>
 800d2ba:	4642      	mov	r2, r8
 800d2bc:	464b      	mov	r3, r9
 800d2be:	f7f2 fffd 	bl	80002bc <__adddf3>
 800d2c2:	4632      	mov	r2, r6
 800d2c4:	463b      	mov	r3, r7
 800d2c6:	f7f2 fff9 	bl	80002bc <__adddf3>
 800d2ca:	9802      	ldr	r0, [sp, #8]
 800d2cc:	4632      	mov	r2, r6
 800d2ce:	463b      	mov	r3, r7
 800d2d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2d4:	f7f2 fff0 	bl	80002b8 <__aeabi_dsub>
 800d2d8:	4642      	mov	r2, r8
 800d2da:	464b      	mov	r3, r9
 800d2dc:	f7f2 ffec 	bl	80002b8 <__aeabi_dsub>
 800d2e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2e4:	e607      	b.n	800cef6 <__ieee754_pow+0x2ce>
 800d2e6:	f04f 0a01 	mov.w	sl, #1
 800d2ea:	e6a5      	b.n	800d038 <__ieee754_pow+0x410>
 800d2ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d340 <__ieee754_pow+0x718>
 800d2f0:	e613      	b.n	800cf1a <__ieee754_pow+0x2f2>
 800d2f2:	bf00      	nop
 800d2f4:	f3af 8000 	nop.w
 800d2f8:	4a454eef 	.word	0x4a454eef
 800d2fc:	3fca7e28 	.word	0x3fca7e28
 800d300:	93c9db65 	.word	0x93c9db65
 800d304:	3fcd864a 	.word	0x3fcd864a
 800d308:	a91d4101 	.word	0xa91d4101
 800d30c:	3fd17460 	.word	0x3fd17460
 800d310:	518f264d 	.word	0x518f264d
 800d314:	3fd55555 	.word	0x3fd55555
 800d318:	db6fabff 	.word	0xdb6fabff
 800d31c:	3fdb6db6 	.word	0x3fdb6db6
 800d320:	33333303 	.word	0x33333303
 800d324:	3fe33333 	.word	0x3fe33333
 800d328:	e0000000 	.word	0xe0000000
 800d32c:	3feec709 	.word	0x3feec709
 800d330:	dc3a03fd 	.word	0xdc3a03fd
 800d334:	3feec709 	.word	0x3feec709
 800d338:	145b01f5 	.word	0x145b01f5
 800d33c:	be3e2fe0 	.word	0xbe3e2fe0
 800d340:	00000000 	.word	0x00000000
 800d344:	3ff00000 	.word	0x3ff00000
 800d348:	43400000 	.word	0x43400000
 800d34c:	0003988e 	.word	0x0003988e
 800d350:	000bb679 	.word	0x000bb679
 800d354:	0800def8 	.word	0x0800def8
 800d358:	3ff00000 	.word	0x3ff00000
 800d35c:	40080000 	.word	0x40080000
 800d360:	0800df18 	.word	0x0800df18
 800d364:	0800df08 	.word	0x0800df08
 800d368:	a3b4      	add	r3, pc, #720	; (adr r3, 800d63c <__ieee754_pow+0xa14>)
 800d36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36e:	4640      	mov	r0, r8
 800d370:	4649      	mov	r1, r9
 800d372:	f7f2 ffa3 	bl	80002bc <__adddf3>
 800d376:	4622      	mov	r2, r4
 800d378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d37c:	462b      	mov	r3, r5
 800d37e:	4630      	mov	r0, r6
 800d380:	4639      	mov	r1, r7
 800d382:	f7f2 ff99 	bl	80002b8 <__aeabi_dsub>
 800d386:	4602      	mov	r2, r0
 800d388:	460b      	mov	r3, r1
 800d38a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d38e:	f7f3 fbdb 	bl	8000b48 <__aeabi_dcmpgt>
 800d392:	2800      	cmp	r0, #0
 800d394:	f47f adfe 	bne.w	800cf94 <__ieee754_pow+0x36c>
 800d398:	4aa3      	ldr	r2, [pc, #652]	; (800d628 <__ieee754_pow+0xa00>)
 800d39a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	f340 810a 	ble.w	800d5b8 <__ieee754_pow+0x990>
 800d3a4:	151b      	asrs	r3, r3, #20
 800d3a6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d3aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d3ae:	fa4a f303 	asr.w	r3, sl, r3
 800d3b2:	445b      	add	r3, fp
 800d3b4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d3b8:	4e9c      	ldr	r6, [pc, #624]	; (800d62c <__ieee754_pow+0xa04>)
 800d3ba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d3be:	4116      	asrs	r6, r2
 800d3c0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	ea23 0106 	bic.w	r1, r3, r6
 800d3ca:	f1c2 0214 	rsb	r2, r2, #20
 800d3ce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d3d2:	fa4a fa02 	asr.w	sl, sl, r2
 800d3d6:	f1bb 0f00 	cmp.w	fp, #0
 800d3da:	4602      	mov	r2, r0
 800d3dc:	460b      	mov	r3, r1
 800d3de:	4620      	mov	r0, r4
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	bfb8      	it	lt
 800d3e4:	f1ca 0a00 	rsblt	sl, sl, #0
 800d3e8:	f7f2 ff66 	bl	80002b8 <__aeabi_dsub>
 800d3ec:	e9cd 0100 	strd	r0, r1, [sp]
 800d3f0:	4642      	mov	r2, r8
 800d3f2:	464b      	mov	r3, r9
 800d3f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3f8:	f7f2 ff60 	bl	80002bc <__adddf3>
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	a378      	add	r3, pc, #480	; (adr r3, 800d5e0 <__ieee754_pow+0x9b8>)
 800d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d404:	4604      	mov	r4, r0
 800d406:	460d      	mov	r5, r1
 800d408:	f7f3 f90e 	bl	8000628 <__aeabi_dmul>
 800d40c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d410:	4606      	mov	r6, r0
 800d412:	460f      	mov	r7, r1
 800d414:	4620      	mov	r0, r4
 800d416:	4629      	mov	r1, r5
 800d418:	f7f2 ff4e 	bl	80002b8 <__aeabi_dsub>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4640      	mov	r0, r8
 800d422:	4649      	mov	r1, r9
 800d424:	f7f2 ff48 	bl	80002b8 <__aeabi_dsub>
 800d428:	a36f      	add	r3, pc, #444	; (adr r3, 800d5e8 <__ieee754_pow+0x9c0>)
 800d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42e:	f7f3 f8fb 	bl	8000628 <__aeabi_dmul>
 800d432:	a36f      	add	r3, pc, #444	; (adr r3, 800d5f0 <__ieee754_pow+0x9c8>)
 800d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d438:	4680      	mov	r8, r0
 800d43a:	4689      	mov	r9, r1
 800d43c:	4620      	mov	r0, r4
 800d43e:	4629      	mov	r1, r5
 800d440:	f7f3 f8f2 	bl	8000628 <__aeabi_dmul>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	4640      	mov	r0, r8
 800d44a:	4649      	mov	r1, r9
 800d44c:	f7f2 ff36 	bl	80002bc <__adddf3>
 800d450:	4604      	mov	r4, r0
 800d452:	460d      	mov	r5, r1
 800d454:	4602      	mov	r2, r0
 800d456:	460b      	mov	r3, r1
 800d458:	4630      	mov	r0, r6
 800d45a:	4639      	mov	r1, r7
 800d45c:	f7f2 ff2e 	bl	80002bc <__adddf3>
 800d460:	4632      	mov	r2, r6
 800d462:	463b      	mov	r3, r7
 800d464:	4680      	mov	r8, r0
 800d466:	4689      	mov	r9, r1
 800d468:	f7f2 ff26 	bl	80002b8 <__aeabi_dsub>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	4620      	mov	r0, r4
 800d472:	4629      	mov	r1, r5
 800d474:	f7f2 ff20 	bl	80002b8 <__aeabi_dsub>
 800d478:	4642      	mov	r2, r8
 800d47a:	4606      	mov	r6, r0
 800d47c:	460f      	mov	r7, r1
 800d47e:	464b      	mov	r3, r9
 800d480:	4640      	mov	r0, r8
 800d482:	4649      	mov	r1, r9
 800d484:	f7f3 f8d0 	bl	8000628 <__aeabi_dmul>
 800d488:	a35b      	add	r3, pc, #364	; (adr r3, 800d5f8 <__ieee754_pow+0x9d0>)
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	4604      	mov	r4, r0
 800d490:	460d      	mov	r5, r1
 800d492:	f7f3 f8c9 	bl	8000628 <__aeabi_dmul>
 800d496:	a35a      	add	r3, pc, #360	; (adr r3, 800d600 <__ieee754_pow+0x9d8>)
 800d498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49c:	f7f2 ff0c 	bl	80002b8 <__aeabi_dsub>
 800d4a0:	4622      	mov	r2, r4
 800d4a2:	462b      	mov	r3, r5
 800d4a4:	f7f3 f8c0 	bl	8000628 <__aeabi_dmul>
 800d4a8:	a357      	add	r3, pc, #348	; (adr r3, 800d608 <__ieee754_pow+0x9e0>)
 800d4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ae:	f7f2 ff05 	bl	80002bc <__adddf3>
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	462b      	mov	r3, r5
 800d4b6:	f7f3 f8b7 	bl	8000628 <__aeabi_dmul>
 800d4ba:	a355      	add	r3, pc, #340	; (adr r3, 800d610 <__ieee754_pow+0x9e8>)
 800d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c0:	f7f2 fefa 	bl	80002b8 <__aeabi_dsub>
 800d4c4:	4622      	mov	r2, r4
 800d4c6:	462b      	mov	r3, r5
 800d4c8:	f7f3 f8ae 	bl	8000628 <__aeabi_dmul>
 800d4cc:	a352      	add	r3, pc, #328	; (adr r3, 800d618 <__ieee754_pow+0x9f0>)
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	f7f2 fef3 	bl	80002bc <__adddf3>
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	462b      	mov	r3, r5
 800d4da:	f7f3 f8a5 	bl	8000628 <__aeabi_dmul>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	4649      	mov	r1, r9
 800d4e6:	f7f2 fee7 	bl	80002b8 <__aeabi_dsub>
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	460d      	mov	r5, r1
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4640      	mov	r0, r8
 800d4f4:	4649      	mov	r1, r9
 800d4f6:	f7f3 f897 	bl	8000628 <__aeabi_dmul>
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	e9cd 0100 	strd	r0, r1, [sp]
 800d500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d504:	4620      	mov	r0, r4
 800d506:	4629      	mov	r1, r5
 800d508:	f7f2 fed6 	bl	80002b8 <__aeabi_dsub>
 800d50c:	4602      	mov	r2, r0
 800d50e:	460b      	mov	r3, r1
 800d510:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d514:	f7f3 f9b2 	bl	800087c <__aeabi_ddiv>
 800d518:	4632      	mov	r2, r6
 800d51a:	4604      	mov	r4, r0
 800d51c:	460d      	mov	r5, r1
 800d51e:	463b      	mov	r3, r7
 800d520:	4640      	mov	r0, r8
 800d522:	4649      	mov	r1, r9
 800d524:	f7f3 f880 	bl	8000628 <__aeabi_dmul>
 800d528:	4632      	mov	r2, r6
 800d52a:	463b      	mov	r3, r7
 800d52c:	f7f2 fec6 	bl	80002bc <__adddf3>
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	4620      	mov	r0, r4
 800d536:	4629      	mov	r1, r5
 800d538:	f7f2 febe 	bl	80002b8 <__aeabi_dsub>
 800d53c:	4642      	mov	r2, r8
 800d53e:	464b      	mov	r3, r9
 800d540:	f7f2 feba 	bl	80002b8 <__aeabi_dsub>
 800d544:	4602      	mov	r2, r0
 800d546:	460b      	mov	r3, r1
 800d548:	2000      	movs	r0, #0
 800d54a:	4939      	ldr	r1, [pc, #228]	; (800d630 <__ieee754_pow+0xa08>)
 800d54c:	f7f2 feb4 	bl	80002b8 <__aeabi_dsub>
 800d550:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d554:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	da2f      	bge.n	800d5be <__ieee754_pow+0x996>
 800d55e:	4650      	mov	r0, sl
 800d560:	ec43 2b10 	vmov	d0, r2, r3
 800d564:	f000 f9c0 	bl	800d8e8 <scalbn>
 800d568:	ec51 0b10 	vmov	r0, r1, d0
 800d56c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d570:	f7ff bbf1 	b.w	800cd56 <__ieee754_pow+0x12e>
 800d574:	4b2f      	ldr	r3, [pc, #188]	; (800d634 <__ieee754_pow+0xa0c>)
 800d576:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d57a:	429e      	cmp	r6, r3
 800d57c:	f77f af0c 	ble.w	800d398 <__ieee754_pow+0x770>
 800d580:	4b2d      	ldr	r3, [pc, #180]	; (800d638 <__ieee754_pow+0xa10>)
 800d582:	440b      	add	r3, r1
 800d584:	4303      	orrs	r3, r0
 800d586:	d00b      	beq.n	800d5a0 <__ieee754_pow+0x978>
 800d588:	a325      	add	r3, pc, #148	; (adr r3, 800d620 <__ieee754_pow+0x9f8>)
 800d58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d592:	f7f3 f849 	bl	8000628 <__aeabi_dmul>
 800d596:	a322      	add	r3, pc, #136	; (adr r3, 800d620 <__ieee754_pow+0x9f8>)
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	f7ff bbdb 	b.w	800cd56 <__ieee754_pow+0x12e>
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	462b      	mov	r3, r5
 800d5a4:	f7f2 fe88 	bl	80002b8 <__aeabi_dsub>
 800d5a8:	4642      	mov	r2, r8
 800d5aa:	464b      	mov	r3, r9
 800d5ac:	f7f3 fac2 	bl	8000b34 <__aeabi_dcmpge>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	f43f aef1 	beq.w	800d398 <__ieee754_pow+0x770>
 800d5b6:	e7e7      	b.n	800d588 <__ieee754_pow+0x960>
 800d5b8:	f04f 0a00 	mov.w	sl, #0
 800d5bc:	e718      	b.n	800d3f0 <__ieee754_pow+0x7c8>
 800d5be:	4621      	mov	r1, r4
 800d5c0:	e7d4      	b.n	800d56c <__ieee754_pow+0x944>
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	491a      	ldr	r1, [pc, #104]	; (800d630 <__ieee754_pow+0xa08>)
 800d5c6:	f7ff bb8f 	b.w	800cce8 <__ieee754_pow+0xc0>
 800d5ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5ce:	f7ff bb8b 	b.w	800cce8 <__ieee754_pow+0xc0>
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	4639      	mov	r1, r7
 800d5d6:	f7ff bb87 	b.w	800cce8 <__ieee754_pow+0xc0>
 800d5da:	4693      	mov	fp, r2
 800d5dc:	f7ff bb98 	b.w	800cd10 <__ieee754_pow+0xe8>
 800d5e0:	00000000 	.word	0x00000000
 800d5e4:	3fe62e43 	.word	0x3fe62e43
 800d5e8:	fefa39ef 	.word	0xfefa39ef
 800d5ec:	3fe62e42 	.word	0x3fe62e42
 800d5f0:	0ca86c39 	.word	0x0ca86c39
 800d5f4:	be205c61 	.word	0xbe205c61
 800d5f8:	72bea4d0 	.word	0x72bea4d0
 800d5fc:	3e663769 	.word	0x3e663769
 800d600:	c5d26bf1 	.word	0xc5d26bf1
 800d604:	3ebbbd41 	.word	0x3ebbbd41
 800d608:	af25de2c 	.word	0xaf25de2c
 800d60c:	3f11566a 	.word	0x3f11566a
 800d610:	16bebd93 	.word	0x16bebd93
 800d614:	3f66c16c 	.word	0x3f66c16c
 800d618:	5555553e 	.word	0x5555553e
 800d61c:	3fc55555 	.word	0x3fc55555
 800d620:	c2f8f359 	.word	0xc2f8f359
 800d624:	01a56e1f 	.word	0x01a56e1f
 800d628:	3fe00000 	.word	0x3fe00000
 800d62c:	000fffff 	.word	0x000fffff
 800d630:	3ff00000 	.word	0x3ff00000
 800d634:	4090cbff 	.word	0x4090cbff
 800d638:	3f6f3400 	.word	0x3f6f3400
 800d63c:	652b82fe 	.word	0x652b82fe
 800d640:	3c971547 	.word	0x3c971547

0800d644 <__ieee754_sqrt>:
 800d644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d648:	4955      	ldr	r1, [pc, #340]	; (800d7a0 <__ieee754_sqrt+0x15c>)
 800d64a:	ec55 4b10 	vmov	r4, r5, d0
 800d64e:	43a9      	bics	r1, r5
 800d650:	462b      	mov	r3, r5
 800d652:	462a      	mov	r2, r5
 800d654:	d112      	bne.n	800d67c <__ieee754_sqrt+0x38>
 800d656:	ee10 2a10 	vmov	r2, s0
 800d65a:	ee10 0a10 	vmov	r0, s0
 800d65e:	4629      	mov	r1, r5
 800d660:	f7f2 ffe2 	bl	8000628 <__aeabi_dmul>
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	4620      	mov	r0, r4
 800d66a:	4629      	mov	r1, r5
 800d66c:	f7f2 fe26 	bl	80002bc <__adddf3>
 800d670:	4604      	mov	r4, r0
 800d672:	460d      	mov	r5, r1
 800d674:	ec45 4b10 	vmov	d0, r4, r5
 800d678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d67c:	2d00      	cmp	r5, #0
 800d67e:	ee10 0a10 	vmov	r0, s0
 800d682:	4621      	mov	r1, r4
 800d684:	dc0f      	bgt.n	800d6a6 <__ieee754_sqrt+0x62>
 800d686:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d68a:	4330      	orrs	r0, r6
 800d68c:	d0f2      	beq.n	800d674 <__ieee754_sqrt+0x30>
 800d68e:	b155      	cbz	r5, 800d6a6 <__ieee754_sqrt+0x62>
 800d690:	ee10 2a10 	vmov	r2, s0
 800d694:	4620      	mov	r0, r4
 800d696:	4629      	mov	r1, r5
 800d698:	f7f2 fe0e 	bl	80002b8 <__aeabi_dsub>
 800d69c:	4602      	mov	r2, r0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	f7f3 f8ec 	bl	800087c <__aeabi_ddiv>
 800d6a4:	e7e4      	b.n	800d670 <__ieee754_sqrt+0x2c>
 800d6a6:	151b      	asrs	r3, r3, #20
 800d6a8:	d073      	beq.n	800d792 <__ieee754_sqrt+0x14e>
 800d6aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d6ae:	07dd      	lsls	r5, r3, #31
 800d6b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d6b4:	bf48      	it	mi
 800d6b6:	0fc8      	lsrmi	r0, r1, #31
 800d6b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d6bc:	bf44      	itt	mi
 800d6be:	0049      	lslmi	r1, r1, #1
 800d6c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d6c4:	2500      	movs	r5, #0
 800d6c6:	1058      	asrs	r0, r3, #1
 800d6c8:	0fcb      	lsrs	r3, r1, #31
 800d6ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d6ce:	0049      	lsls	r1, r1, #1
 800d6d0:	2316      	movs	r3, #22
 800d6d2:	462c      	mov	r4, r5
 800d6d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d6d8:	19a7      	adds	r7, r4, r6
 800d6da:	4297      	cmp	r7, r2
 800d6dc:	bfde      	ittt	le
 800d6de:	19bc      	addle	r4, r7, r6
 800d6e0:	1bd2      	suble	r2, r2, r7
 800d6e2:	19ad      	addle	r5, r5, r6
 800d6e4:	0fcf      	lsrs	r7, r1, #31
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d6ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d6f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d6f4:	d1f0      	bne.n	800d6d8 <__ieee754_sqrt+0x94>
 800d6f6:	f04f 0c20 	mov.w	ip, #32
 800d6fa:	469e      	mov	lr, r3
 800d6fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d700:	42a2      	cmp	r2, r4
 800d702:	eb06 070e 	add.w	r7, r6, lr
 800d706:	dc02      	bgt.n	800d70e <__ieee754_sqrt+0xca>
 800d708:	d112      	bne.n	800d730 <__ieee754_sqrt+0xec>
 800d70a:	428f      	cmp	r7, r1
 800d70c:	d810      	bhi.n	800d730 <__ieee754_sqrt+0xec>
 800d70e:	2f00      	cmp	r7, #0
 800d710:	eb07 0e06 	add.w	lr, r7, r6
 800d714:	da42      	bge.n	800d79c <__ieee754_sqrt+0x158>
 800d716:	f1be 0f00 	cmp.w	lr, #0
 800d71a:	db3f      	blt.n	800d79c <__ieee754_sqrt+0x158>
 800d71c:	f104 0801 	add.w	r8, r4, #1
 800d720:	1b12      	subs	r2, r2, r4
 800d722:	428f      	cmp	r7, r1
 800d724:	bf88      	it	hi
 800d726:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d72a:	1bc9      	subs	r1, r1, r7
 800d72c:	4433      	add	r3, r6
 800d72e:	4644      	mov	r4, r8
 800d730:	0052      	lsls	r2, r2, #1
 800d732:	f1bc 0c01 	subs.w	ip, ip, #1
 800d736:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d73a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d73e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d742:	d1dd      	bne.n	800d700 <__ieee754_sqrt+0xbc>
 800d744:	430a      	orrs	r2, r1
 800d746:	d006      	beq.n	800d756 <__ieee754_sqrt+0x112>
 800d748:	1c5c      	adds	r4, r3, #1
 800d74a:	bf13      	iteet	ne
 800d74c:	3301      	addne	r3, #1
 800d74e:	3501      	addeq	r5, #1
 800d750:	4663      	moveq	r3, ip
 800d752:	f023 0301 	bicne.w	r3, r3, #1
 800d756:	106a      	asrs	r2, r5, #1
 800d758:	085b      	lsrs	r3, r3, #1
 800d75a:	07e9      	lsls	r1, r5, #31
 800d75c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d760:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d764:	bf48      	it	mi
 800d766:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d76a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d76e:	461c      	mov	r4, r3
 800d770:	e780      	b.n	800d674 <__ieee754_sqrt+0x30>
 800d772:	0aca      	lsrs	r2, r1, #11
 800d774:	3815      	subs	r0, #21
 800d776:	0549      	lsls	r1, r1, #21
 800d778:	2a00      	cmp	r2, #0
 800d77a:	d0fa      	beq.n	800d772 <__ieee754_sqrt+0x12e>
 800d77c:	02d6      	lsls	r6, r2, #11
 800d77e:	d50a      	bpl.n	800d796 <__ieee754_sqrt+0x152>
 800d780:	f1c3 0420 	rsb	r4, r3, #32
 800d784:	fa21 f404 	lsr.w	r4, r1, r4
 800d788:	1e5d      	subs	r5, r3, #1
 800d78a:	4099      	lsls	r1, r3
 800d78c:	4322      	orrs	r2, r4
 800d78e:	1b43      	subs	r3, r0, r5
 800d790:	e78b      	b.n	800d6aa <__ieee754_sqrt+0x66>
 800d792:	4618      	mov	r0, r3
 800d794:	e7f0      	b.n	800d778 <__ieee754_sqrt+0x134>
 800d796:	0052      	lsls	r2, r2, #1
 800d798:	3301      	adds	r3, #1
 800d79a:	e7ef      	b.n	800d77c <__ieee754_sqrt+0x138>
 800d79c:	46a0      	mov	r8, r4
 800d79e:	e7bf      	b.n	800d720 <__ieee754_sqrt+0xdc>
 800d7a0:	7ff00000 	.word	0x7ff00000

0800d7a4 <fabs>:
 800d7a4:	ec51 0b10 	vmov	r0, r1, d0
 800d7a8:	ee10 2a10 	vmov	r2, s0
 800d7ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d7b0:	ec43 2b10 	vmov	d0, r2, r3
 800d7b4:	4770      	bx	lr

0800d7b6 <finite>:
 800d7b6:	ee10 3a90 	vmov	r3, s1
 800d7ba:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800d7be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d7c2:	0fc0      	lsrs	r0, r0, #31
 800d7c4:	4770      	bx	lr

0800d7c6 <matherr>:
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	4770      	bx	lr
 800d7ca:	0000      	movs	r0, r0
 800d7cc:	0000      	movs	r0, r0
	...

0800d7d0 <nan>:
 800d7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d7d8 <nan+0x8>
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	00000000 	.word	0x00000000
 800d7dc:	7ff80000 	.word	0x7ff80000

0800d7e0 <rint>:
 800d7e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7e2:	ec51 0b10 	vmov	r0, r1, d0
 800d7e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d7ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d7ee:	2e13      	cmp	r6, #19
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	ee10 4a10 	vmov	r4, s0
 800d7f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d7fa:	dc56      	bgt.n	800d8aa <rint+0xca>
 800d7fc:	2e00      	cmp	r6, #0
 800d7fe:	da2b      	bge.n	800d858 <rint+0x78>
 800d800:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d804:	4302      	orrs	r2, r0
 800d806:	d023      	beq.n	800d850 <rint+0x70>
 800d808:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d80c:	4302      	orrs	r2, r0
 800d80e:	4254      	negs	r4, r2
 800d810:	4314      	orrs	r4, r2
 800d812:	0c4b      	lsrs	r3, r1, #17
 800d814:	0b24      	lsrs	r4, r4, #12
 800d816:	045b      	lsls	r3, r3, #17
 800d818:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d81c:	ea44 0103 	orr.w	r1, r4, r3
 800d820:	460b      	mov	r3, r1
 800d822:	492f      	ldr	r1, [pc, #188]	; (800d8e0 <rint+0x100>)
 800d824:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800d828:	e9d1 6700 	ldrd	r6, r7, [r1]
 800d82c:	4602      	mov	r2, r0
 800d82e:	4639      	mov	r1, r7
 800d830:	4630      	mov	r0, r6
 800d832:	f7f2 fd43 	bl	80002bc <__adddf3>
 800d836:	e9cd 0100 	strd	r0, r1, [sp]
 800d83a:	463b      	mov	r3, r7
 800d83c:	4632      	mov	r2, r6
 800d83e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d842:	f7f2 fd39 	bl	80002b8 <__aeabi_dsub>
 800d846:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d84a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d84e:	4639      	mov	r1, r7
 800d850:	ec41 0b10 	vmov	d0, r0, r1
 800d854:	b003      	add	sp, #12
 800d856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d858:	4a22      	ldr	r2, [pc, #136]	; (800d8e4 <rint+0x104>)
 800d85a:	4132      	asrs	r2, r6
 800d85c:	ea01 0702 	and.w	r7, r1, r2
 800d860:	4307      	orrs	r7, r0
 800d862:	d0f5      	beq.n	800d850 <rint+0x70>
 800d864:	0852      	lsrs	r2, r2, #1
 800d866:	4011      	ands	r1, r2
 800d868:	430c      	orrs	r4, r1
 800d86a:	d00b      	beq.n	800d884 <rint+0xa4>
 800d86c:	ea23 0202 	bic.w	r2, r3, r2
 800d870:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d874:	2e13      	cmp	r6, #19
 800d876:	fa43 f306 	asr.w	r3, r3, r6
 800d87a:	bf0c      	ite	eq
 800d87c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d880:	2400      	movne	r4, #0
 800d882:	4313      	orrs	r3, r2
 800d884:	4916      	ldr	r1, [pc, #88]	; (800d8e0 <rint+0x100>)
 800d886:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d88a:	4622      	mov	r2, r4
 800d88c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d890:	4620      	mov	r0, r4
 800d892:	4629      	mov	r1, r5
 800d894:	f7f2 fd12 	bl	80002bc <__adddf3>
 800d898:	e9cd 0100 	strd	r0, r1, [sp]
 800d89c:	4622      	mov	r2, r4
 800d89e:	462b      	mov	r3, r5
 800d8a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8a4:	f7f2 fd08 	bl	80002b8 <__aeabi_dsub>
 800d8a8:	e7d2      	b.n	800d850 <rint+0x70>
 800d8aa:	2e33      	cmp	r6, #51	; 0x33
 800d8ac:	dd07      	ble.n	800d8be <rint+0xde>
 800d8ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d8b2:	d1cd      	bne.n	800d850 <rint+0x70>
 800d8b4:	ee10 2a10 	vmov	r2, s0
 800d8b8:	f7f2 fd00 	bl	80002bc <__adddf3>
 800d8bc:	e7c8      	b.n	800d850 <rint+0x70>
 800d8be:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800d8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c6:	40f2      	lsrs	r2, r6
 800d8c8:	4210      	tst	r0, r2
 800d8ca:	d0c1      	beq.n	800d850 <rint+0x70>
 800d8cc:	0852      	lsrs	r2, r2, #1
 800d8ce:	4210      	tst	r0, r2
 800d8d0:	bf1f      	itttt	ne
 800d8d2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d8d6:	ea20 0202 	bicne.w	r2, r0, r2
 800d8da:	4134      	asrne	r4, r6
 800d8dc:	4314      	orrne	r4, r2
 800d8de:	e7d1      	b.n	800d884 <rint+0xa4>
 800d8e0:	0800df28 	.word	0x0800df28
 800d8e4:	000fffff 	.word	0x000fffff

0800d8e8 <scalbn>:
 800d8e8:	b570      	push	{r4, r5, r6, lr}
 800d8ea:	ec55 4b10 	vmov	r4, r5, d0
 800d8ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	462b      	mov	r3, r5
 800d8f6:	b9aa      	cbnz	r2, 800d924 <scalbn+0x3c>
 800d8f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d8fc:	4323      	orrs	r3, r4
 800d8fe:	d03b      	beq.n	800d978 <scalbn+0x90>
 800d900:	4b31      	ldr	r3, [pc, #196]	; (800d9c8 <scalbn+0xe0>)
 800d902:	4629      	mov	r1, r5
 800d904:	2200      	movs	r2, #0
 800d906:	ee10 0a10 	vmov	r0, s0
 800d90a:	f7f2 fe8d 	bl	8000628 <__aeabi_dmul>
 800d90e:	4b2f      	ldr	r3, [pc, #188]	; (800d9cc <scalbn+0xe4>)
 800d910:	429e      	cmp	r6, r3
 800d912:	4604      	mov	r4, r0
 800d914:	460d      	mov	r5, r1
 800d916:	da12      	bge.n	800d93e <scalbn+0x56>
 800d918:	a327      	add	r3, pc, #156	; (adr r3, 800d9b8 <scalbn+0xd0>)
 800d91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91e:	f7f2 fe83 	bl	8000628 <__aeabi_dmul>
 800d922:	e009      	b.n	800d938 <scalbn+0x50>
 800d924:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d928:	428a      	cmp	r2, r1
 800d92a:	d10c      	bne.n	800d946 <scalbn+0x5e>
 800d92c:	ee10 2a10 	vmov	r2, s0
 800d930:	4620      	mov	r0, r4
 800d932:	4629      	mov	r1, r5
 800d934:	f7f2 fcc2 	bl	80002bc <__adddf3>
 800d938:	4604      	mov	r4, r0
 800d93a:	460d      	mov	r5, r1
 800d93c:	e01c      	b.n	800d978 <scalbn+0x90>
 800d93e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d942:	460b      	mov	r3, r1
 800d944:	3a36      	subs	r2, #54	; 0x36
 800d946:	4432      	add	r2, r6
 800d948:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d94c:	428a      	cmp	r2, r1
 800d94e:	dd0b      	ble.n	800d968 <scalbn+0x80>
 800d950:	ec45 4b11 	vmov	d1, r4, r5
 800d954:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d9c0 <scalbn+0xd8>
 800d958:	f000 f83c 	bl	800d9d4 <copysign>
 800d95c:	a318      	add	r3, pc, #96	; (adr r3, 800d9c0 <scalbn+0xd8>)
 800d95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d962:	ec51 0b10 	vmov	r0, r1, d0
 800d966:	e7da      	b.n	800d91e <scalbn+0x36>
 800d968:	2a00      	cmp	r2, #0
 800d96a:	dd08      	ble.n	800d97e <scalbn+0x96>
 800d96c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d970:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d974:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d978:	ec45 4b10 	vmov	d0, r4, r5
 800d97c:	bd70      	pop	{r4, r5, r6, pc}
 800d97e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d982:	da0d      	bge.n	800d9a0 <scalbn+0xb8>
 800d984:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d988:	429e      	cmp	r6, r3
 800d98a:	ec45 4b11 	vmov	d1, r4, r5
 800d98e:	dce1      	bgt.n	800d954 <scalbn+0x6c>
 800d990:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d9b8 <scalbn+0xd0>
 800d994:	f000 f81e 	bl	800d9d4 <copysign>
 800d998:	a307      	add	r3, pc, #28	; (adr r3, 800d9b8 <scalbn+0xd0>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	e7e0      	b.n	800d962 <scalbn+0x7a>
 800d9a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d9a4:	3236      	adds	r2, #54	; 0x36
 800d9a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d9aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4b06      	ldr	r3, [pc, #24]	; (800d9d0 <scalbn+0xe8>)
 800d9b6:	e7b2      	b.n	800d91e <scalbn+0x36>
 800d9b8:	c2f8f359 	.word	0xc2f8f359
 800d9bc:	01a56e1f 	.word	0x01a56e1f
 800d9c0:	8800759c 	.word	0x8800759c
 800d9c4:	7e37e43c 	.word	0x7e37e43c
 800d9c8:	43500000 	.word	0x43500000
 800d9cc:	ffff3cb0 	.word	0xffff3cb0
 800d9d0:	3c900000 	.word	0x3c900000

0800d9d4 <copysign>:
 800d9d4:	ec51 0b10 	vmov	r0, r1, d0
 800d9d8:	ee11 0a90 	vmov	r0, s3
 800d9dc:	ee10 2a10 	vmov	r2, s0
 800d9e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d9e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d9e8:	ea41 0300 	orr.w	r3, r1, r0
 800d9ec:	ec43 2b10 	vmov	d0, r2, r3
 800d9f0:	4770      	bx	lr
	...

0800d9f4 <_init>:
 800d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f6:	bf00      	nop
 800d9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9fa:	bc08      	pop	{r3}
 800d9fc:	469e      	mov	lr, r3
 800d9fe:	4770      	bx	lr

0800da00 <_fini>:
 800da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da02:	bf00      	nop
 800da04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da06:	bc08      	pop	{r3}
 800da08:	469e      	mov	lr, r3
 800da0a:	4770      	bx	lr
